[{"title":"Java-冒泡排序","url":"/2023/01/25/03f3dd343d094bd6baf6772f4a6a2aed/","content":"\n```java\npackage sort;\n\nimport java.util.Arrays;\n//冒泡排序模板\npublic class bubble_sort {\n    public static void main(String[] args) {\n        int[] arr = {44,-30,20,100,22};\n        bubble_sort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n    public static void bubble_sort(int[] arr){\n        for (int i = 0; i < arr.length-1; i++) {\n            for (int j = 0; j < arr.length-1-i; j++) {\n                if(arr[j]>arr[j+1]){\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n    }\n}\n\n```\n","categories":["Java","JAVASE"]},{"title":"javascript-事件流","url":"/2023/01/25/6d5690c11c9c40d9ab1e41f85c32ea0d/","content":"\n# 事件流\n\n事件流指的是事件完整执行过程中的流动路径\n\n捕获：父到子\n\n冒泡：子到父\n\n![image-20220719132235804](https://static.meowrain.cn/i/2022/07/19/lval9u-3.png)\n\n事件冒泡概念：当一个元素的事件被处罚时，同样的事情将会在该元素的所有祖先元素中依次被触发。这一过程被称为事件冒泡\n\n## 冒泡阶段\n\n案例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        .father {\n            margin: 100px auto;\n            width: 500px;\n            height: 500px;\n            background-color: pink;\n        }\n        .son {\n            width: 200px;\n            height: 200px;\n            background-color: blueviolet;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"father\">\n        <div class=\"son\"></div>\n    </div>\n    <script>\n        let fa = document.querySelector('.father');\n        let son = document.querySelector('.son');\n        fa.addEventListener('click',function(){\n            alert('hello i am father');\n        })\n        son.addEventListener('click',function() {\n            alert('hello i am son')\n        })\n    </script>\n</body>\n</html>\n```\n\n> 上述案例中，儿子和父亲元素已经全部被创建了点击事件，但是我们在点击儿子元素后，不仅儿子的点击事件会被触发，父亲的点击事件也会被触发\n>\n> 如下动图：\n>\n> <img src=\"https://static.meowrain.cn/i/2022/07/19/ll5xho-3.gif\" alt=\"动画\" style=\"zoom:50%;\" />\n\n## 捕获阶段\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        .father {\n            margin: 100px auto;\n            width: 500px;\n            height: 500px;\n            background-color: pink;\n        }\n\n        .son {\n            width: 200px;\n            height: 200px;\n            background-color: blueviolet;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"father\">\n        <div class=\"son\"></div>\n    </div>\n    <script>\n        let fa = document.querySelector('.father');\n        let son = document.querySelector('.son');\n        fa.addEventListener('click', function () {\n            alert('hello i am father');\n        }, true)\n        son.addEventListener('click', function () {\n            alert('hello i am son')\n        }, true)\n        document.addEventListener('click', function () {\n            alert('grandfather')\n        }, true)\n    </script>\n</body>\n\n</html>\n```\n\n> 我们点击儿子元素后，会依次触发爷爷，父亲，儿子\n>\n> 如下图\n>\n> <img src=\"https://static.meowrain.cn/i/2022/07/19/lqf1l1-3.gif\" alt=\"动画\" style=\"zoom:50%;\" />\n\n# 阻止事件流动\n\n目标：能够写出阻止事件流动的代码\n\n因为默认就有冒泡模式的存在，所以容易导致事件影响到父级元素\n\n若想把事件就限制在当前元素内，就需要阻止事件流动\n\n阻止事件流动需要拿到事件对象\n\n语法：\n\n```javascript\n        事件对象.stopPropagation()\n```\n\n***\n\n案例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        .father {\n            margin: 100px auto;\n            width: 500px;\n            height: 500px;\n            background-color: pink;\n        }\n\n        .son {\n            width: 200px;\n            height: 200px;\n            background-color: blueviolet;\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"father\">\n        <div class=\"son\"></div>\n    </div>\n    <script>\n        let fa = document.querySelector('.father');\n        let son = document.querySelector('.son');\n        document.addEventListener('click', function (e) {\n            alert('grandfather');\n            e.stopPropagation();//阻止流动\n        })\n        fa.addEventListener('click', function (e) {\n            alert('hello i am father');\n            e.stopPropagation();//阻止流动\n        })\n        son.addEventListener('click', function (e) {\n            alert('hello i am son');\n            e.stopPropagation(); //阻止流动\n        })\n\n\n    </script>\n</body>\n\n</html>\n```\n\n效果如下：\n\n<img src=\"https://static.meowrain.cn/i/2022/07/19/m0ki1x-3.gif\" alt=\"动画\" style=\"zoom:50%;\" />\n","categories":["前端","Javascript"]},{"title":"javascript-DOM-分时问候案例","url":"/2023/01/25/97466e0ebd1f48c8836d82a772e97d39/","content":"\n> 直接挂代码了\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        img {\n            width: 300px;\n        }\n    </style>\n</head>\n<body>\n    <img src=\"https://tse2-mm.cn.bing.net/th/id/OIP-C.5tG321WXo3Mzge2MehLFnwAAAA?pid=ImgDet&rs=1\" alt=\"\">\n    <div>早上好啊，MeowRain</div>\n    <script src=\"../js/分时问候.js\"></script>\n</body>\n</html>\n```\n\n```js\n// 根据系统不同时间来判断，所以需要用到日期内置对象\n// 利用多分支语句来设置不同的图片\n// 需要一个图片，并且根据时间修改图片，就需要用到操作元素src属性\n// 需要一个div元素，显示不同问候语，修改元素内容即可\n//获取元素\nlet img = document.querySelector('img');\nlet div = document.querySelector('div');\n//得到小时数\nlet date = new Date();\nlet h = date.getHours;\n// 判断小时数改变图片的文字和信息\nif (h < 12) {\n    img.src = 'https://tse2-mm.cn.bing.net/th/id/OIP-C.5tG321WXo3Mzge2MehLFnwAAAA?pid=ImgDet&rs=1';\n    div.innerHTML = '<strong>早上好呀，MeowRain</strong>';\n} else if (12<h && h<13) {\n    img.src = 'https://img95.699pic.com/element/40095/5149.png_300.png';\n    div.innerHTML = '<strong>中午好呀，MeowRain,别忘记要午休哦~</strong>';\n}  else if (13<h && h<18) {\n    img.src = 'https://ts1.cn.mm.bing.net/th/id/R-C.832e8b33a5ef7e2ae1b6027737696a05?rik=d2HweNtwgVdumg&riu=http%3a%2f%2fface.zhaoxi.org%2fupload%2f201358%2f20130121193605.gif&ehk=1mIMalbTaUnKu5AhchtHA8ybQmrJ70%2bYb70ugW678Dw%3d&risl=&pid=ImgRaw&r=0';\n    div.innerHTML ='<strong>下午好呀，MeowRain,天气热啦，可以喝杯可乐奥</strong>';\n\n} else {\n    img.src = 'https://tse1-mm.cn.bing.net/th/id/OIP-C.eFjfpAX9hBBc7r5pcSiomQAAAA?pid=ImgDet&rs=1';\n    div.innerHTML = '<strong>晚上好呀，MeowRain,记住早早睡觉奥</strong>';\n}\n```\n","categories":["前端","Javascript"]},{"title":"Java-递归执行机制","url":"/2023/01/25/b3ada79e6ff745f0acd8edcf57c95acc/","content":"\n![image-20221108092002951](https://static.meowrain.cn/i/2022/11/08/sfs3qm-3.png)\n代码参考如下；\n\n```java\npublic class test {\n    public static void main(String[] args) {\n        method fac = new method();\n        System.out.println(fac.factorial(3));\n    }\n}\nclass method {\n    public int factorial(int n) {\n        System.out.println(n);\n        if (n == 1) {\n            return 1;\n        }\n        else {\n            return factorial(n-1) * n;\n        }\n    }\n}\n```\n","categories":["Java","JAVASE"]},{"title":"Java-包装类","url":"/2023/01/25/d5d66a7ebad94d6483e19407faf46cc5/","content":"\n# 包装类\n\n## 包装类的分类\n\n1.  针对八种基本定义相应的引用类型--包装类\n2.  有了类的特点，就可以调用类中的方法\n\n![](https://static.meowrain.cn/i/2022/12/22/23b9y9-3.png)\n\n> 上面这个包装类的父类都是`Number`\n\n## 包装类和基本数据类型的转换\n\n装箱： 基本类型->包装类型\n拆箱： 包装类型->基本类型\n自动装箱底层调用的是valueOf方法，比如`Integer.valueOf()`\n\n```java\npackage cn.meowrain.WrapperClass;\n\npublic class WrapperType {\n    public static void main(String[] args) {\n        //手动装箱\n        int a = 10;\n        Integer n1 = new Integer(a);\n        Integer n2 = Integer.valueOf(a);\n        //手动拆箱\n        int b = n1.intValue();\n        int c = n2.intValue();\n        //自动装箱\n        int d = 20;\n        Integer n3 = d;\n        //自动拆箱\n        int e = n3;\n    }\n}\n\n```\n\n### 包装类型和String类型的相互转换\n\n```java\npackage cn.meowrain.WrapperClass;\n\npublic class wrapper02 {\n    public static void main(String[] args) {\n        //包装类型--》 String类型\n        //----------方式1----------\n        Integer i = 10;\n        String s1 = i.toString();\n\n        //------方式2--------\n\n        String s2 = String.valueOf(i);\n\n        //--------方式3---------\n\n        String s3 = i + \"\";\n\n        //----------------\n        //String 类型--》包装类\n        //方式1\n        Integer j = new Integer(s1);\n        //方式2\n        Integer j2 = Integer.valueOf(s2);\n        Integer j3 = Integer.parseInt(s3);\n\n\n    }\n}\n\n```\n\n### Integer类和Character类的常用方法\n\n```java\npackage cn.meowrain.WrapperClass;\n\npublic class wrapper03 {\n    public static void main(String[] args) {\n        System.out.println(Integer.MAX_VALUE);//返回最大值\n        System.out.println(Integer.MIN_VALUE);//返回最小值\n\n        System.out.println(Character.isDigit('a'));//判断是不是数字\n        System.out.println(Character.isLetter('a'));//判断是不是字母\n        System.out.println(Character.isUpperCase('A'));//判断是不是大写\n        System.out.println(Character.isLowerCase('a'));//判断是不是小写\n\n        System.out.println(Character.isWhitespace(' ')); //判断是不是空格\n        System.out.println(Character.toUpperCase('a'));//转成大写\n        System.out.println(Character.toLowerCase('A'));//转成小写\n    }\n}\n```\n\n### Java Integer创建机制\n\n```java\npackage cn.meowrain.WrapperClass;\n\npublic class wrapper04 {\n    public static void main(String[] args) {\n        Integer n1 = 1;\n        Integer n2 = 1;\n        System.out.println(n1 == n2); //true\n        // -128 ~ 127\n        Integer n3 = 128;\n        Integer n4 = 128;\n        System.out.println(n3 == n4); //false\n    }\n}\n\n```\n","categories":["Java","JAVASE"]},{"title":"Java-枚举","url":"/2023/01/25/abec654a37ad4a498798cdf019a2e61e/","content":"\n# Java-枚举\n\n## 自定义类实现枚举\n\n![image-20221206212227125](https://static.meowrain.cn/i/2022/12/07/8mykc5-3.png)\n\n```java\npackage cn.meowrain.enum_;\n\npublic class Enumeration02 {\n    public static void main(String[] args) {\n        System.out.println(Season.spring);\n    }\n}\n\n//演示自定义枚举实现\nclass Season {\n    private String name;\n    private String desc;\n    //定义了四个对象\n    //1.将构造器私有化，防止直接new\n//2.去掉setxx方法，防止属性被修改\n//3.在Season内部，直接创建固定的对象\n    //4.优化，可以加入final\n    public static final Season spring = new Season(\"春天\", \"温暖\");\n    public static final Season summer = new Season(\"夏天\", \"炎热\");\n    public static final Season autumn = new Season(\"秋天\", \"凉爽\");\n    public static final Season winter = new Season(\"冬天\", \"寒冷\");\n\n    private Season(String name, String desc) {\n        this.name = name;\n        this.desc = desc;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n\n    public String getDesc() {\n        return desc;\n    }\n\n    @Override\n    public String toString() {\n        return \"Season{\" +\n                \"name='\" + name + '\\'' +\n                \", desc='\" + desc + '\\'' +\n                '}';\n    }\n}\n```\n\n![image-20221206214810700](https://static.meowrain.cn/i/2022/12/07/92b2ci-3.png)\n\n## enum关键字实现枚举\n\n```java\npackage cn.meowrain.enum_;\n\npublic class Enumeration03 {\n    public static void main(String[] args) {\n        System.out.println(Season2.SPRING);\n        System.out.println(Season2.SUMMER);\n        System.out.println(Season2.AUTTUMN);\n        System.out.println(Season2.WINTER);\n    }\n}\n\n//是同enum关键字实现\nenum Season2 {\n    //如果使用了enum来实现枚举类\n    //1.使用关键字enum替代class\n    //2.public static Season spring = new Season(\"春天\", \"温暖\");使用\n    //spring(\"春天\",\"温暖\");替代\n    //SPRING(\"春天\", \"温暖\"); 解读 常量名（实参列表）\n    //3.如果有多个常量（对象），使用,分割即可\n    SPRING(\"春天\", \"温暖\"), SUMMER(\"夏天\", \"热\"), AUTTUMN(\"秋天\", \"凉爽\"), WINTER(\"冬天\", \"寒冷\");\n    private String name;\n    private String desc;\n\n    private Season2(String name, String desc) {\n        this.name = name;\n        this.desc = desc;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDesc() {\n        return desc;\n    }\n\n    @Override\n    public String toString() {\n        return \"Season2{\" +\n                \"name='\" + name + '\\'' +\n                \", desc='\" + desc + '\\'' +\n                '}';\n    }\n}\n```\n\n![image-20221206214759910](https://static.meowrain.cn/i/2022/12/07/920iqx-3.png)\n\n![image-20221206214942489](https://static.meowrain.cn/i/2022/12/07/934ymx-3.png)\n\n## enum常用方法\n\n![image-20221206230135628](https://static.meowrain.cn/i/2022/12/07/bllfas-3.png)\n\n![image-20221206230233486](https://static.meowrain.cn/i/2022/12/07/bm5xkb-3.png)\n\n## 课堂练习\n\n![image-20221206233714381](https://static.meowrain.cn/i/2022/12/07/c6w6y4-3.png)\n\n```java\npackage cn.meowrain.enum_;\n\npublic class Enumeration05 {\n    public static void main(String[] args) {\n        Week[] days = Week.values();\n        for (Week day : days) {\n            System.out.println(day.toString());\n        }\n    }\n}\n\nenum Week {\n    Monday(\"星期一\"),\n    TUESDAY(\"星期二\"),\n    WEDNESDAY(\"星期三\"),\n    THURSDAY(\"星期四\"),\n    FRIDAY(\"星期五\"),\n    SATURDAY(\"星期六\"),\n    SUNDAY(\"星期日\");\n    private String name;\n\n    Week(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n}\n```\n\n![image-20221206233725821](https://static.meowrain.cn/i/2022/12/07/c6x96t-3.png)\n\n## enum实现接口\n\n1.  使用`enum关键字`后，就不能再继承其他类了，因为`enum`会隐式继承`Enum`,而Java是单继承机制\n\n2.  枚举类和普通类一样，可以实现接口，如下格式：\n\n    ` enum 类名 implements 接口1,接口2{}`\n\n案例：\n\n```java\npackage cn.meowrain.enum_;\n\npublic class Enumeration06 {\n    public static void main(String[] args) {\n        Music.CLASSMUSIC.playing();\n        Music.POPMUSIC.playing();\n    }\n}\ninterface IPlaying {\n    public void playing();\n}\nenum Music implements IPlaying{\n    CLASSMUSIC,\n    POPMUSIC;\n    public void playing() {\n        System.out.println(\"播放好听的音乐\" + this.name());\n    }\n}\n\n```\n","categories":["Java","JAVASE"]},{"title":"java选择排序","url":"/2023/01/25/d8cc29145a834e3aaa2a43b7d88c9ce1/","content":"\n```java\npackage sort;\n\nimport java.util.Arrays;\n//选择排序模板\npublic class select_sort {\n    public static void main(String[] args) {\n        int[] arr = new int[]{10,20,-10,40,199,2,100};\n        select_sort(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n   public static void select_sort(int[] arr){\n        for(int i = 0;i<arr.length-1;i++){\n            int min = arr[i];\n            int min_index = i;\n            for(int j = i+1;j<arr.length;j++){\n                if(min>arr[j]){\n                    min = arr[j];\n                    min_index = j;\n                }\n            }\n            if(i != min_index){\n                arr[min_index] = arr[i];\n                arr[i] = min;\n            }\n\n        }\n   }\n}\n```\n","categories":["Java","JAVASE"]},{"title":"javascript- 节点增加创建与追加-","url":"/2023/01/25/3eb18b717005473285e60b95a1783d27/","content":"\n# 增加节点\n\n很多情况下，我们需要在页面中增加元素\n\n比如，点击发布按钮，可以新增一条信息\n\n***\n\n一般情况下，我们新增节点，按照如下操作\n\n*   创建一个新的节点’\n*   把创建的新的节点放入到指定的元素内部\n\n## 创建元素节点\n\n```javascript\ndocument.createElement('标签名');\n```\n\n## 追加节点\n\n```javascript\n父元素.appendChild(要插入的元素); //插入到父元素的后面\n父元素.insertBefore(要插入的元素); //插入到父元素的前面\n```\n\n案例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<ul>\n\n</ul>\n<script>\nlet ul = document.querySelector('ul');\nlet li = document.createElement('li'); //<!-- 创建新的标签-->\nul.appendChild(li); //向ul插入li元素\n</script> \n</body>\n</html>\n```\n\n***\n\n把3插入到1,2,4,之间\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<ul>\n    <li>1</li>\n    <li>2</li>\n    <li>4</li>\n</ul>\n<script>\n<!-- 创建新的标签-->\nlet ul = document.querySelector('ul');\nlet li = document.createElement('li'); //创建元素li\nli.innerText = '3'; //在li元素中添加3\nul.insertBefore(li,ul.children[2]); //因为ul里面的子元素li是以数组形式存储的，所以这段代码的意思是，把3加在原来数组[2]也就是4的前面 ----》 注意： [0]是1 [1]是2  [2]是4\n</script>\n</body>\n</html>\n```\n","categories":["前端","Javascript"]},{"title":"javascript-变量提升","url":"/2023/01/25/bf50528806834aada4bf812a6e5cb4d7/","content":"\n# javascript-变量提升\n\n## var\n\n```javascript\nconsole.log(web);\nvar web = \"meowrain\";\n//undefined\n```\n\n这串代码相当于\n\n```js\nvar web;\nconsole.log(web);\n```\n\n但是你不写var web的话，会直接报错\n\n> 在js中,var会变量提升，但let不会\n\n```js\nconsole.log(web);\nlet web = \"nce\";\n// 会报错\n```\n\n***\n\n## let\\&const暂时性死区TDC\n\n> 使用let声明变量，必须在声明之后使用变量，不能再声明之前使用变量\n>\n> ```js\n> console.log(web);\n> let web = \"nce\";\n> // 会报错\n> ```\n","categories":["前端","Javascript"]},{"title":"Java异常处理","url":"/2023/01/25/cefb06ca6f8049a99703cf1b3bc1fa3d/","content":"\n# Java异常处理\n\n```java\npackage cn.meowrain.Erro_Exception;\n\npublic class erro1 {\n    public static void main(String[] args) {\n        int n1 = 10;\n        int n2 = 0;\n        int res = 0;\n        try {\n            res = n1/n2;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"程序继续执行\");\n    }\n}\n```\n\n抛出异常\n\n![](https://static.meowrain.cn/i/2022/12/14/xlw6ei-3.png)\n\n## 基本概念\n\nJava语言中,把程序执行中发生的不正常情况称为异常\n\n> 执行过程中发生的异常事件可以分为两类\n>\n> 1.  Error(错误): Java虚拟机无法解决的严重问题,如:JVM系统内部错误,资源耗尽等严重情况.比如:StackOverflowErro(栈溢出)和OOM(out of memory),Erro是严重错误,程序会崩溃\n> 2.  Exception:其它因编程错误或偶然的外在因素导致的一般性问题,可以使用针对性的代码进行处理\n>     Exception分为两大类: **运行时异常**和**编译时异常**\n\n## 异常体系图\n\n![](https://static.meowrain.cn/i/2022/12/14/z3modm-3.png)\n\n## 常见运行异常\n\n1.  **NullPointerException** 空指针异常\n2.  **ArithmeticException** 数学运算异常\n3.  **ArrayIndexOutOfBoundsException** 数组下标越界异常\n4.  **ClassCastException** 类型转换异常\n5.  **NumberFormatException** 数字格式不正确异常\n\n### 空指针异常\n\n当应用程序试图在需要对象的地方使用null时,抛出该异常\n\n```java\npackage cn.meowrain.Erro_Exception;\n\npublic class erro2 {\n    public static void main(String[] args) {\n        Animal animal = null;\n        animal.eat();\n    }\n}\n\nclass Animal {\n    public void eat() {\n        System.out.println(\"animal eat food\");\n    }\n}\n```\n\n![](https://static.meowrain.cn/i/2022/12/14/z8yk67-3.png)\n\n### 数学运算异常\n\n```java\npackage cn.meowrain.Erro_Exception;\n\npublic class erro2 {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 0;\n        int res = a/b;\n        System.out.println(res);\n    }\n}\n```\n\n![](https://static.meowrain.cn/i/2022/12/14/z9zzt0-3.png)\n\n### 数组下标越界异常\n\n```java\npackage cn.meowrain.Erro_Exception;\n\npublic class erro3 {\n    public static void main(String[] args) {\n        int [] arr = new int[10];\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = i;\n        }\n        System.out.println(arr[10]);\n    }\n}\n```\n\n![](https://static.meowrain.cn/i/2022/12/14/116ncl3-3.png)\n\n### 类型转换异常\n\n```java\npackage cn.meowrain.Erro_Exception;\n\npublic class erro4 {\n    public static void main(String[] args) {\n        A a = new B();\n        C c = (C)a;\n        System.out.println(c);\n    }\n}\nclass A {}\nclass B extends A {}\nclass C extends A {}\n```\n\n![](https://static.meowrain.cn/i/2022/12/14/119fvjl-3.png)\n\n### 数字格式不正确\n\n```java\npackage cn.meowrain.Erro_Exception;\n\npublic class erro5 {\n    public static void main(String[] args) {\n        String name = \"1234\";\n        int num = Integer.parseInt(name);\n        System.out.println(num);\n        String name2 = \"nice\";\n        int num2 = Integer.parseInt(name2);\n        System.out.println(name2);\n    }\n}\n```\n\n![](https://static.meowrain.cn/i/2022/12/14/11cdd8z-3.png)\n\n## 编译异常\n\n> 编译异常是指在编译期间,就必须处理的异常,否则代码不能通过编译\n\n### 常见的编译异常\n\n*   **SQLException** //操作数据库是,查询表可能发生异常\n*   **IOException** //操作文件时,发生的异常\n*   **FileNotFoundException** //当操作一个不存在的文件时,发生异常\n*   **ClassNotFoundException** //加载类,而该类不存在时,异常\n*   **EOFException** //操作文件,到文件末尾,发生异常\n*   **ILLegalArgumentException** //参数异常\n\n***\n\n## 异常处理\n\n### 基本介绍\n\n异常处理就是当异常发生时,对异常处理的方式\n\n1.  try-catch-finally\n    程序员在代码中捕获发生的异常,自行处理\n2.  throws\n    将发生的异常抛出,交给调用者来处理,最顶级的处理者就是jvm\n\n`try { 代码/可能有异常 }catch(Exception e){ //捕获到异常 1. 当异常发生时 2. 系统将异常封装成Exception对象e,传递给catch }finally{ //不管try代码块是否有异常发生,始终要执行finally }`\n\n### try-catch方式处理异常-注意事项\n\n1.  如果异常发生了,则异常发生后面的代码不会执行,直接进入到catch块\n2.  如果异常没有发生,则顺序执行try的代码块,不会进入到catch\n3.  如果希望不管是否发生异常,都执行某段代码(比如关闭连接,释放资源等),在后面加finally\n4.  如果出现异常，则try块中异常发生后，try块中剩余的代码不会执行，将执行catch块中的语句，如果有finally，最后还需要执行finally里面的语句。\n\n```java\npackage cn.meowrain.Erro_Exception;\n\npublic class erro6 {\n    public static void main(String[] args) {\n        try {\n            String name = \"hellow\";\n            System.out.println(Integer.parseInt(name));\n            System.out.println(\"helloworld\");\n\n        } catch (NumberFormatException e) {\n            System.out.println(\"错误:\" + e.getMessage());\n        }\n        System.out.println(\"程序结束\");\n    }\n}\n```\n\n运行结果:\n![](https://static.meowrain.cn/i/2022/12/15/c0xtbb-3.png)\n\n> 可以看到,捕获到异常后没有执行\\`System.out.println(\"helloworld\");\n> 验证了1,2,3\n\n### 捕获多个异常\n\n```java\npackage cn.meowrain.Erro_Exception;\n\npublic class erro7 {\n    public static void main(String[] args) {\n        try {\n            int[] arr = new int[10];\n            for (int i = 0; i < arr.length; i++) {\n                arr[i] = i;\n            }\n            System.out.println(arr[10]); //ArrayIndexOutOfBoundsException\n            int n1 = 10, n2 = 0;\n            int res = n1 / n2;//ArithmeticException\n            System.out.println(res);\n            Person person = new Person();\n            person = null;\n            System.out.println(person.getName()); //NullPointerException\n\n        } catch (NullPointerException | ArrayIndexOutOfBoundsException | ArithmeticException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n\nclass Person {\n    String name = \"mike\";\n\n    public String getName() {\n        return name;\n    }\n}\n```\n\n运行结果：\n![](https://static.meowrain.cn/i/2022/12/15/db0mb0-3.png)\n由上可以看出，是数组下标越界了\n\n### try-catch最佳实践\n\n```java\npackage cn.meowrain.Erro_Exception;\n\nimport java.util.Scanner;\n\npublic class erro8 {\n\n    public static void main(String[] args) {\n        String inputStr = \"\";\n        int num;\n        System.out.println(\"请输入一个整数： \");\n    while (true) {\n        Scanner sc = new Scanner(System.in);\n        inputStr = sc.next();\n        try{\n            num = Integer.parseInt(inputStr);\n            break;\n        }catch (Exception e){\n            System.err.println(\"你输入的不是整数，请重新输入\");\n        }\n    }\n    }\n}\n```\n\n运行结果：\n![](https://static.meowrain.cn/i/2022/12/15/dv652p-3.png)\n\n### throws异常处理\n","categories":["Java","JAVASE"]},{"title":"javascript-克隆节点&&删除节点","url":"/2023/01/25/5b879117bcd14d1f8a9850b134549a71/","content":"\n# 克隆节点\n\n```javascript\n        元素.cloneNode(布尔值);\n//克隆一个已有的元素节点\n```\n\n详细说明\n\n```html\n<ul>\n    <li>df</li>\n</ul>\n    <script>\nlet ul  = document.querySelector(\"ul\");\nlet newul  = ul.cloneNode(false);\n//默认为false，也就是不会克隆子代节点\n// 如果为true，就会克隆子代节点\ndiv.appendChild(newul);\n//如果我写成div.appendChild(ul);，会把ul和它的子元素全部加在div下\n//如果写成上面的这种div.appendChild(newul);就会复制一个ul，放在div下  \n    </script>\n```\n\n**false**的情况：\n\n<img src=\"https://static.meowrain.cn/i/2022/07/15/vqo0ar-3.png\" alt=\"image-20220715191923786\" style=\"zoom: 80%;\" />\n\n**true**的情况：\n\n![image-20220715192007651](https://static.meowrain.cn/i/2022/07/15/vr63rd-3.png)\n\n***\n\n这里咱们专门放图来看一下，顺便复习一下昨天学习的东西\n\n> 注意：通过指定元素.appendChild(要插入的元素)这个操作，我们可以把某个元素放到指定元素的内部\n>\n> Tips:要插入的元素，咱们要通过 `let ul  = document.querySelector(\"ul\");`这种类似的操作先获取元素\n\n# 删除节点\n\n如果一个节点在页面中已经不需要的时候，我们可以删除它\n\n在javascript对的原生dom操作中，要删除元素必须通过`父元素删除`\n\n**语法**\n\n```js\n父元素.removeChild(要删除的元素);\n```\n\n***\n\n> Question1: 删除父元素中的第i个元素\n\n咱们平时用这个只是删除一个元素。\n\n但是要知道的是，假如你在ul标签内有4个li标签，那么通过`ul.children`我们就可以得到一个伪数组，第一个li标签对应0，第二个li标签对应1，以此类推，第四个li标签对应3.得到伪数组以后，我们要删除第一个元素，直接用`ul.removeChild(ul.children[i])`就能删除咱们`第i个`元素啦\n\n***\n\n> Question2: 删除父元素中的所有元素\n\n那么问题来了，假如我要全部把这个父元素下的所有子元素删除掉呢？\n\n**第一种方案**：使用for循环加`.innerHTML`的DOM操作，来把咱们的子元素替换为`''`\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <button class=\"btn\">删除</button>\n    <ul>\n        <li>湖上秋风病未禁，兴来真欲到山阴。</li>\n        <li> 渔蓑乱结汀洲草，樵径香分橘柚林。</li>\n        <li>远谷采薇随鹿迹，閒岩投果见猿心。</li>\n        <li>放歌未尽空回棹，落日增波忧思侵。 </li>\n    </ul>\n    <script>\n        let ul = document.querySelector('ul');//获取元素ul\n        let btn = document.querySelector('.btn');//获取元素button\n        function del() {\n             for (let i = 0; i < ul.children.length; i++) {\n                 ul.children[i].innerHTML = ''\n             }//利用for循环，把ul的子元素li一个一个都替换成''，实现删除的效果\n        }//构建del()函数，方便下面的监听回调此函数\n        btn.addEventListener('click', del);//回调del()函数\n    </script>\n</body>\n\n</html>\n```\n\n![image-20220715210635832](https://static.meowrain.cn/i/2022/07/15/yu2skb-3.png)\n\n在上面这个代码中，我们点击按钮，就可以把li全部替换为空\n\n**第二种方案**：通过删除节点的办法来把父元素里面的子元素全部删除\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n\n<body>\n    <button class=\"btn\">删除</button>\n    <ul>\n        <li>湖上秋风病未禁，兴来真欲到山阴。</li>\n        <li> 渔蓑乱结汀洲草，樵径香分橘柚林。</li>\n        <li>远谷采薇随鹿迹，閒岩投果见猿心。</li>\n        <li>放歌未尽空回棹，落日增波忧思侵。 </li>\n    </ul>\n    <script>\n        let ul = document.querySelector('ul');\n        let btn = document.querySelector('.btn');\n        function del() {\n            for (let j = ul.children.length - 1; j >= 0; j--) {\n                ul.removeChild(ul.children[j]);\n            }\n        }\n        //这下大概需要慢慢解释一下，因为循环如果写成正的话，就会从第一个元素开始移除，但是你移除掉[0]对应的元素以后，下面的原来是在[1]上的元素会变成在[0]上的元素，所以最后是删不尽的\n        //因此我们需要想办法让它倒着删，这样就没有问题了。\n        //下面讲解一下上面的循环运行过程：\n//第一步,首先拿到了ul伪数组的个数4，那么最后一个元素对应的就是[3]，为了删掉这个元素，\n//我们需要让ul.children.length - 1来实现首先删除最后一个元素\n//第二步，会判断是不是大于等于0，这个是为了能让函数最后删除的是[0]的这个元素 \n        btn.addEventListener('click', del);\n    </script>\n</body>\n\n</html>\n```\n","categories":["前端","Javascript"]},{"title":"Javascript-展开语法","url":"/2023/01/25/2601a78cd4fb449e90738af73cc0370d/","content":"\n# Javascript-展开语法\n\n## 展开数组\n\n```js\nconst num = [1,2,3];\nconsole.log(...num); //打印数组元素1,2.3\n```\n\n## 数组合并\n\n```javascript\nlet a = [1,2,3];\nlet b = ['a','nice',...a];//使用...可将a合并到b数组\nconsole.log(b);//[ 'a', 'nice', 1, 2, 3 ]\n```\n\n## 展开对象\n\n```js\nconst career = {career:\"Student\"};\nconst hobby = {hobby: \"game,music,programing\"};\nconst who = {name:\"meowrain\",...career,...hobby};\nconsole.log(who);//{ name: 'meowrain', career: 'Student', hobby: 'game,music,programing' }\n\n```\n\n## 函数传参\n\n使用`...name`来接收任意数量的参数\n\n```javascript\nfunction change(...args) {\n    console.log(args);\n}\nchange(1,2,3,4,5,'ww');//[ 1, 2, 3, 4, 5, 'ww' ]\n\n```\n\n案例：\n\n```js\nlet sum = (x, y, z) => {\n    return x + y + z;\n} //创建名为sum的函数\nconst num = [1,2,3];\nconsole.log(...num); //1,2.3\nconsole.log(sum(...num));//传参1,2,3\n```\n","categories":["前端","Javascript"]},{"title":"Java数据结构-栈","url":"/2023/01/25/e7838ce563844f3a9811936eaa09cb09/","content":"\nStack.java\n\n```java\npackage cn.meowrain.Datastructure.collection;\n\nimport java.util.NoSuchElementException;\n\npublic class Stack<E> {\n    private final Node<E> head = new Node<>(null);\n\n    public void push(E element){\n        Node<E> node = new Node<>(element);\n        node.next = head.next;\n        head.next = node;\n    }\n    public E pop(){\n        if(head.next == null){\n            throw new NoSuchElementException(\"栈为空\");//如果栈中已经没有元素了,就抛出错误\n        }\n        E e = head.next.element; //先把待出栈元素取出来\n        head.next = head.next.next; //直接让头结点的下一个指向下一个的下一个\n        return e;\n    }\n    public boolean isEmpty(){\n        return head.next == null;\n    }\n    private static class Node<E> {\n        private final E element;\n        private Node<E> next;\n\n        public Node(E e) {\n            this.element = e;\n        }\n\n    }\n}\n```\n\nStackRunner.java\n\n```java\npackage cn.meowrain.Datastructure;\n\nimport cn.meowrain.Datastructure.collection.Stack;\n\npublic class StackRunner {\n    public static void main(String[] args) {\n        Stack<String> stack = new Stack<>();\n        stack.push(\"meowrain\");\n        stack.push(\"meow\");\n        stack.push(\"nice\");\n        String n = stack.pop();\n        System.out.println(n);\n    }\n}\n\n```\n","categories":["Java","JAVASE"]},{"title":"Java 访问修饰符","url":"/2023/01/25/0b0365b51c0644958b204ed11719a88a/","content":"\n# Java 访问修饰符\n\n![a46c5c7ed42d1313fa7a6899c7efcf89.png](/resources/7779bcbc642a4d56b3b8f8b06fed9cc9.png)\n![c1daf291f952674f9047dc3f91289a18.png](/resources/e9921fe71f2443b8bf1878967de8991c.png)\n","categories":["Java","JAVASE"]},{"title":"Java Object类详解","url":"/2023/01/25/65905cb7c01348b0b1ac5264ecc87ab0/","content":"\n# Object类详解\n\n## equals方法\n\n\\== 是一个比较运算符\n\n![image-20221121193757084](https://static.meowrain.cn/i/2022/11/21/w1hxcz-3.png)\n\n![image-20221121201430025](https://static.meowrain.cn/i/2022/11/21/xb6e82-3.png)\n\n区分\n\n```java\npackage com.hsp.object;\n\npublic class Equals_exercise02 {\n    public static void main(String[] args) {\n        String name_1 = \"hello\";\n        String name_2 = \"hello\";\n        System.out.println(name_2 == name_1);//trye\n        /*\n        * String str1 = \"abcd\"的实现过程：首先栈区创建str引用，\n        * 然后在String池（独立于栈和堆而存在，存储不可变量）\n        * 中寻找其指向的内容为\"abcd\"的对象，如果String池中没有，\n        * 则创建一个，然后str指向String池中的对象，\n        * 如果有，则直接将str1指向\"abcd\"\"；\n        * 如果后来又定义了字符串变量 str2 = \"abcd\",\n        * 则直接将str2引用指向String池中已经存在的“abcd”，\n        * 不再重新创建对象；当str1进行了赋值（str1=“abc”），\n        * 则str1将不再指向\"abcd\"，而是重新指String池中的\"abc\"，\n        * 此时如果定义String str3 = \"abc\",进行str1 == str3操作，\n        * 返回值为true，因为他们的值一样，地址一样，\n        * 但是如果内容为\"abc\"的str1进行了字符串的+连接str1 = str1+\"d\"\n        * ；此时str1指向的是在堆中新建的内容为\"abcd\"的对象，\n        * 即此时进行str1==str2，返回值false，因为地址不一样。\n\n\n\tString str3 = new String(\"abcd\")的实现过程：\n*\t 直接在堆中创建对象。\n*\t 如果后来又有\n* \t String str4 = new String(\"abcd\")，str4不会指向之前的对象，\n* \t 而是重新创建一个对象并指向它，\n* \t 所以如果此时进行str3==str4返回值是false，\n* \t 因为两个对象的地址不一样，如果是str3.equals(str4)，\n* \t 返回true,因为内容相同。\n\n        * */\n        String name_3 = new String(\"hello\");\n        String name_4 = new String(\"hello\");\n        System.out.println(name_3 == name_4);//false\n        System.out.println(name_3.equals(name_4));\n        System.out.println(name_1.equals(name_2));\n    }\n}\n\n```\n\n## hashCode方法\n\n1.  提高具有哈希结构的容器效率\n2.  两个引用，如果指向的是同一个对象，则哈希值肯定是一样的\n3.  两个引用，如果指向的是不同的对象，则哈希值是不一样的\n4.  哈希值主要根据地址号来的，不能将哈希值等价于地址\n\n```java\npackage com.hsp.object;\n\npublic class HashCode {\n    public static void main(String[] args) {\n        AA aa = new AA();\n        AA aa2 = new AA();\n        System.out.println(aa.hashCode());\n        System.out.println(aa2.hashCode());\n        /*460141958\n          1163157884*/\n    }\n}\nclass AA {}\n\n```\n\n## toString方法\n\n基本介绍：\n\n默认返回： `全类名 + @ + 哈希值的十六进制`\n\n子类往往重写toString方法，用于返回对象的属性信息\n\n```java\npackage com.hsp.object;\n\npublic class toString {\n    public static void main(String[] args) {\n        Monster monster = new Monster(\"妖怪\",\"保安\",1000);\n        System.out.println(monster.toString());//com.hsp.object.Monster@1b6d3586\n    }\n}\nclass Monster {\n        private String name;\n        private String job;\n        private double sal;\n\n    public Monster(String name, String job, double sal) {\n        this.name = name;\n        this.job = job;\n        this.sal = sal;\n    }\n}\n```\n\n重写`toString方法`，打印对象或拼接对象时，都会自动调用该对象的toString形式\n\n```java\npackage com.hsp.object;\n\npublic class toString {\n    public static void main(String[] args) {\n        Monster monster = new Monster(\"妖怪\",\"保安\",1000);\n        System.out.println(monster.toString());//Monster{name='妖怪', job='保安', sal=1000.0}\n\n    }\n}\nclass Monster {\n        private String name;\n        private String job;\n        private double sal;\n//        重写toString方法\n\n    @Override\n    public String toString() {\n        return \"Monster{\" +\n                \"name='\" + name + '\\'' +\n                \", job='\" + job + '\\'' +\n                \", sal=\" + sal +\n                '}';\n    }\n\n    public Monster(String name, String job, double sal) {\n        this.name = name;\n        this.job = job;\n        this.sal = sal;\n    }\n}\n```\n\n当直接输出一个对象时候，`toString方法`会被默认的调用\n\n```java\npackage com.hsp.object;\n\npublic class toString {\n    public static void main(String[] args) {\n        Monster monster = new Monster(\"妖怪\", \"保安\", 1000);\n        System.out.println(monster);\n    }\n}\n\nclass Monster {\n    private String name;\n    private String job;\n    private double sal;\n//        重写toString方法\n\n    @Override\n    public String toString() {\n        return \"Monster{\" +\n                \"name='\" + name + '\\'' +\n                \", job='\" + job + '\\'' +\n                \", sal=\" + sal +\n                '}';\n    }\n\n    public Monster(String name, String job, double sal) {\n        this.name = name;\n        this.job = job;\n        this.sal = sal;\n    }\n}\n```\n\n## finalize()\n\n当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法\n\n1.当对象被回收时，系统自动调用该对象的finalize方法。子类可以重写该方法，做一些释放资源的操作\n\n2.什么时候被回收：当某个对象没有任何引用的时候，则jvm就认为这个对象是一个垃圾对象，就会用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用finalize方法\n\n3.垃圾回收机制的调用，是由系统来决定，也可以由`System.gc()`主动触发垃圾回收机制\n\n> <p style=\"color:red\" >实际开发中基本不会运用，应付面试</p>\n","categories":["Java","JAVASE"]},{"title":"ES6闭包","url":"/2023/01/25/acf1e9f487974ce1853395619e12e44d/","content":"\n# ES6闭包\n\n#### 闭包概念\n\n\\*\\*闭包函数：\\*\\*声明一个在函数中的函数，有权访问另一个函数作用域中变量，叫做闭包函数。（函数嵌套函数）\n\n\\*\\*闭包：\\*\\*内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回（寿命终结）了之后。\n\n\\*\\*闭包的主要作用：\\*\\*延伸了变量的作用范围。\n\n以上来源于： <https://www.jianshu.com/p/f56971e5274f>\n\n案例：\n\n![image-20220828192603085](https://static.meowrain.cn/i/2022/08/28/vup0hf-3.png)\n\n```js\nfunction fn() {\n    let max = 10;\n    function uu(x) {\n        if (x < max) {\n            console.log(x);\n        }\n    } //闭包函数\n    return uu\n}\nlet f = fn(); // = uu() qu'chu\nf(3);\n```\n","categories":["前端","Javascript"]},{"title":"Debian修改国内原","url":"/2023/01/25/761fa1243125429eb927901f3014a91b/","content":"\nDebian修改国内原\n\n## 查看debian版本\n\n`cat /etc/debian_version`\n\n## 修改方法\n\n参考下面的文章即可\n<https://developer.aliyun.com/mirror/debian>\n","categories":["Linux"]},{"title":"Java-Math类","url":"/2023/01/25/47c9d6ac38214463ae1ca07fd5b85614/","content":"\n```java\npackage cn.meowrain.Math;\n\npublic class math {\n    public static void main(String[] args) {\n        //1. abs绝对值\n        int abs = Math.abs(-19);\n        System.out.println(abs);\n        //2.pow求幂\n        double pow = Math.pow(2, 3);\n        System.out.println(pow);\n        //3.ceil向上取整\n        double ceil = Math.ceil(3.1);\n        System.out.println(ceil);\n        //4.floor向下取整\n        double floor = Math.floor(3.6);\n        System.out.println(floor);\n        //5.round四舍五入\n        double round1 = Math.round(3.4);\n        double round2 = Math.round(3.6);\n        StringBuffer str = new StringBuffer();\n        str.append(\"the round 1 :\").append(round1);\n        str.append(\"\\n\").append(\"the round2 :\").append(round2);\n        System.out.println(str);\n        //6.sqrt求开平方\n        double sqrt = Math.sqrt(16);\n        System.out.println(sqrt);\n        //7. random 求随机数\n        //random 返回随机数  0<=x<1\n        //如果想去到 2 - 7的随机数\n        double random = Math.random();\n        int num = (int)((random)*6+2);\n        System.out.println(num);\n\n        //max求两个数的最大值\n        //min求两个数的最小值\n        int a = 10;\n        int b = 20;\n        int max = Math.max(a, b);\n        int min = Math.min(a, b);\n        System.out.println(\"max :\" + max + \"\\n\" + \"min :\" + min);\n\n    }\n}\n\n```\n","tags":["java"],"categories":["Java","JAVASE"]},{"title":"Javascript-三种包装对象","url":"/2023/01/25/4f2d10c3153e4c7c89f2ecf584fbc453/","content":"\n```javascript\n let num = 10;\n        console.log(typeof num.toString()); // string\n        let str = \"hello world\";\n        console.log(str.split(\" \")); // [\"hello\",\"world\"]\n        console.log(str.length);// 11\n        //三种包装对象\n        //1. new String()\n        //2. new Number()\n        //3. new Boolean\n        // 原始类型调用方法或属性的时候,程序的后台会把他们转换为相应的包装对象,因此可以使用上面的那些\n        //对象方法\n        str = \"helloworld\";\n        str.name = \"xiaoming\";\n        console.log(str.name); //undefined\n        //转换成包装对象,并且成功执行方法后,包装对象会立即销毁,变量又重新回到原始类型的状态\n\n\n        let num1 = new Number(123);\n        let num2 = new Number(123);\n        console.log(num1 === num2); //false\n        /*上面两个是引用类型,所以地址不同 */\n\n        /* 创建包装对象的构造函数可以用来做类型转换 */\n        let num3 = 123;\n        console.log(String(num3));\n        console.log(Boolean(num3));\n        let num4 = 123;\n        console.log(num4.toString());\n```\n","categories":["前端","Javascript"]},{"title":"水仙花题解","url":"/2023/01/25/dd59a1b3ef8343efb5e60f2fd43084a8/","content":"\n```c\n\n/*水仙花数是指一个N位正整数(N>=3),它的海个位上的数字的N次幂之和等于它本身。例如：153=1^3+5^3+3^3.本题要求编写程序\n\n计算所有N位水仙花数。*/\n\n#include &lt;stdio.h&gt;\n\n#include &lt;math.h&gt;\n\nint main(void)\n\n{\n\nint N;\n\nscanf(\"%d\", &N);\n\nlong limit = pow(10, N);\n\nlong n, qianwan, baiwan, shiwan, wan, qian, hun, ten, ge, multi, sum;\n\nfor (n = 100; n < limit; n++)\n\n{\n\nqianwan = n / 10000000 % 10;//千万\n\nbaiwan = n / 1000000 % 10;//百万\n\nshiwan = n / 100000 % 10;//十万\n\nwan = n / 10000 % 10;//求万位\n\nqian = n / 1000 % 10;//求千位数\n\nhun = n / 100 % 10; //求百位数\n\nten = n / 10 % 10; //求十位数\n\nge = n % 10; //求个位数\n\nmulti = qianwan * 10000000 + baiwan * 1000000 + shiwan * 100000 + wan * 10000 + qian * 1000 + hun * 100 + ten * 10 + ge;\n\nsum = pow(qianwan, N) + pow(baiwan, N) + pow(shiwan, N) + pow(wan, N) + pow(qian, N) + pow(hun, N) + pow(ten, N) + pow(ge, N);\n\nif (sum == multi)\n\n{\n\nprintf(\"%ld \", multi);\n\n}\n\n}\n\n}\n\n```\n","categories":["C/C++"]},{"title":"Javascript 面向对象(OOP)","url":"/2023/01/25/732ec77199574e42aa8a3ef00df24d8d/","content":"\n# Javascript 面向对象(OOP)\n\n## 语法\n\n```javascript\nclass 类名 {\n    constructor(){\n\n    }\n}\n```\n\n举例:\n\n```js\n//Person类专门用来创建人的对象\nclass Person {\n    constructor(name,age,hooby){\n        this.name = name;\n        this.age = age;\n        this.hooby = hooby;\n    }\n}\n//调用构造函数创建对象创建对象\nconst xiaoming = new Person(\"xiaoming\",18,'programming');\nconsole.log(xiaoming)\n```\n\n![image-20230101161413077](https://static.meowrain.cn/i/2023/01/02/69cfv-3.png)\n\n## instanceOf用法\n\n> 可以用来检查一个对象是否是由某个类创建,如果某个对象是由某个类创建,那么我们称这个对象是这个类的实例\n\n```js\n//Person类专门用来创建人的对象\nclass Person {\n    constructor(name,age,hooby){\n        this.name = name;\n        this.age = age;\n        this.hooby = hooby;\n    }\n}\nclass Dog {\n\n}\n//调用构造函数创建对象创建对象\nconst xiaoming = new Person(\"xiaoming\",18,'programming');\nconst dog1 = new Dog();\nconsole.log(xiaoming instanceof Person); //true\nconsole.log(dog1 instanceof Person); //false \n\n```\n\n![image-20230101161804360](https://static.meowrain.cn/i/2023/01/02/80qe7-3.png)\n\n## 属性\n\n```js\n//Person类专门用来创建人的对象\nclass Person {\n    //在类中写属性,每次创建对象,它都会带有这些实例属性\n    //实例属性只能通过实例访问\n    name = \"meowrian\";\n    age = 17;\n    hobby = \"game\"\n}\nconst meowrain = new Person();\nconsole.log(meowrain);\nconsole.log(meowrain.name,meowrain.age,meowrain.hobby);\n```\n\n![image-20230101162456259](https://static.meowrain.cn/i/2023/01/02/bnn5s-3.png)\n\n### 静态属性\n\n```js\n//Person类专门用来创建人的对象\nclass Person {\n    //静态属性只能通过类名去访问\n    static test = \"test静态属性\";\n}\nconst meowrain = new Person();\nconsole.log(Person.test);\n\n```\n\n## 方法\n\n```js\n//Person类专门用来创建人的对象\nclass Person {\n    name = \"meowrain\";\n    sayHello = ()=>{\n        console.log(\"Hello~\");\n    }\n}\nconst p1 = new Person();\nconsole.log(p1)\np1.sayHello();\n```\n\n![image-20230101163745233](https://static.meowrain.cn/i/2023/01/02/in06n-3.png)\n\n***\n\n### 两种添加方法的方式:\n\n```js\nclass Person {\n    name = \"meowrain\";\n    sayHello = ()=>{\n        console.log(\"Hello~\");\n    }\n    sayGoodbye(){\n        console.log(\"Goodbye~\");\n    } //这种方式直接打印实例对象看不到这个方法\n\n}\nconst p1 = new Person();\nconsole.log(p1)\np1.sayHello();\np1.sayGoodbye();\n```\n\n![image-20230101164005552](https://static.meowrain.cn/i/2023/01/02/jv383-3.png)\n\n### 静态方法(类方法)\n\n```js\n//Person类专门用来创建人的对象\nclass Person {\n    static sayGG = ()=>{\n        console.log(\"GG~\",this);//静态方法中,this指向的是我们的当前类\n    }\n}\nconsole.log(Person.sayGG()); //只能通过类名来调用\n\n```\n\n## 构造函数\n\n```js\nclass Person {\n    //在类中添加一个特殊的方法constructor\n    //该方法我们称为构造函数\n    //构造函数会在我们调用类创建对象时候执行\n    constructor(name, age, gender) {\n        this.name = name;\n        this.age = age;\n        this.gender = gender;\n        console.log(\"构造函数执行了\");\n    }\n}\nconst p1 = new Person(\"meowrian\", 18, \"男\"); //调用类创建一次对象\nconst p2 = new Person(\"meow\", 10, \"男\"); //调用类创建一次对象\nconsole.log(p1.name);\n```\n\n![image-20230101171037475](https://static.meowrain.cn/i/2023/01/02/1o5x75-3.png)\n\n## 封装\n\n```js\n//1. 封装\n// - 对象就是一个用来存储不同属性的容器\n//对象不仅负责属性,还要负责数据的安全\n//直接添加到对象中的属性并不安全,因为它们可以被任意修改\n// 如何确保数据安全\n//提供setter和getter方法,来开放我们对数据的操作\n\n/*实现封装的方式\n    * 1. 属性私有化 # \n    * 通过getter和setter方法来操作属性\n    * get 属性名(){\n    *   return this.#属性名;\n    * }\n    * set 属性名(value){\n    *   this._属性名 = value;\n    * }\n    * */\nclass Person {\n    //用#表示是私有属性 private,只能在类的内部访问\n    #name;\n    #age;\n    #gender;\n\n    constructor(name, age, gender) {\n        this.#name = name;\n        this.#age = age;\n        this.#gender = gender;\n        this._name = name;\n        this._age = age;\n        this._gender = gender;\n    }\n\n    //getter方法,用来读取属性\n    get name() {\n        return this.#name;\n    } //这样写getter方法,在访问的时候直接用 实例.属性名就能获得\n    get age() {\n        return this.#age;\n    }\n\n    get gender() {\n        return this.#gender;\n    }\n\n    //setter方法,用来设置属性\n\n    set name(value) {\n        this._name = value;\n    }\n\n    set age(value) {\n        this._age = value;\n    }\n\n    set gender(value) {\n        this._gender = value;\n    }\n}\n\nconst p1 = new Person(\"meow\", 17, \"男\");\nconsole.log(p1.name, p1.age, p1.gender); //这些都是调用的getter方法\np1.name = \"meowmeow\"; //这里调用的是上面的setter方法\nconsole.log(p1.name);\n```\n\n## 多态\n\n```js\n//多态\n/*\n    * 在JS中不会检查参数的类型,所以这就意味着任何数据都可以作为参数传递\n    * 要调用某个函数,无需指定的类型,只需要对象满足某些条件计即可\n    *\n    * */\nclass Person {\n    constructor(name) {\n        this.name = name;\n    }\n}\n\nclass Dog {\n    constructor(name) {\n        this.name = name;\n    }\n}\nclass  Test {\n\n}\n\nconst dog = new Dog('旺财');\nconst person = new Person(\"喵雨\");\nconst test = new Test();\n// console.log(dog);\n// console.log(person);\n/*定义一个函数,这个函数将会接受一个对象作为参数,可以输出hello,并且打印name属性*/\nconst sayHello = (obj)=> {\n    if (obj.name == undefined) {\n        console.log(\"没有name属性,hello毛呢\")\n    } else if(obj instanceof Person){\n        console.log(\"Hello 人:\" + obj.name);\n    }else {\n        console.log(\"Hello \"+ obj.name);\n    }\n}\n\nsayHello(dog);\nsayHello(person);\nsayHello(test);\n```\n\n![image-20230101184649118](https://static.meowrain.cn/i/2023/01/02/3rdtfq-3.png)\n\n## 继承\n\n```js\nclass Animal {\n    constructor(name) {\n        this.name = name;\n    }\n\n    sayHello() {\n        console.log(\"Animal\")\n    }\n}\nclass Dog extends Animal{\n    constructor(name) {\n        super(name);\n    }\n\n    sayHello() {\n        console.log(\"旺\")\n    } //重写父类方法\n\n}\n\nclass Cat extends Animal{\n    constructor(name) {\n        super(name);\n    }\n\n    sayHello() {\n        console.log(\"meow\")\n    }\n}\n\nconst dog = new Dog(\"旺财\");\nconst cat = new Cat(\"汤姆\");\ndog.sayHello();\ncat.sayHello();\n```\n\n![image-20230101201706956](https://static.meowrain.cn/i/2023/01/02/5risas-3.png)\n\n## 对象的结构\n\n> 对象中存储属性的区域实际有两个:\n>\n> 1.  对象自身\n>\n>     > *   直接通过对象添加的属性,位于对象自身中\n>     > *   在类中通过x = y的形式添加的属性,位于对象自身中\n>     > *   ```js\n>     >     class Person {\n>     >         name = \"meowrian\"\n>     >         age = 18\n>     >         fun = ()=>{\n>     >             console.log('ffff');\n>     >         }\n>     >         constructor(hobby) {\n>     >             this.hobby = hobby\n>     >         }\n>     >     }\n>     >     const p = new Person(\"打篮球\");\n>     >\n>     >     ```\n>     > *\n> 2.  原型对象(**prototype**)\n>\n>     *   对象中还有一些内容,会存储在其他的对象里(原型对象)\n>     *   在对象中会有一个属性用来存储原型对象,这个属性叫做 **`__proto__`**\n>     *   ```js\n>         class Person {\n>             fun(){\n>                 console.log(\"hello\")\n>             } //添加到原型中\n>             constructor(hobby) {\n>                 this.hobby = hobby\n>             }\n>         }\n>         const p = new Person(\"打篮球\");\n>         console.log(p)\n>         ```\n>     *   ![image-20230101204042261](https://static.meowrain.cn/i/2023/01/02/6s5u9q-3.png)\n>     *   会添加到原型对象中的情况:\n>\n>         1.  在类中通过`xxx(){}`方式添加的方法,位于原型中\n>         2.  主动向原型中添加的属性和方法\n>\n>     ![image-20230101203739390](https://static.meowrain.cn/i/2023/01/02/6qgm2z-3.png)\n\n## 原型\n\n相关链接:[\\_\\_proto\\_\\_和prototype的区别](\"https://geek-docs.com/javascript/javascript-ask-answer/difference-between-proto-and-prototype.html#:~:text=Proto%E5%92%8Cpr,sh%E3%80%81pop%E7%AD%89%E3%80%82\")\n![](https://static.meowrain.cn/i/2023/01/02/12r59ek-3.png)\n\n### `__proto__`\n\n```javascript\nclass Person {\n    name = \"meowrain\"\n    sayHello(){kde ubuntu\n        console.log(\"hello,我是\" + this.name);\n    }\n}\nconst p = new Person();\n/*\n* 访问一个对象的原型对象      对象.__proto__\n* console.log(Object.getPrototypeOf(对象));\n\n* */\nconsole.log(p.__proto__);//{constructor: ƒ, sayHello: ƒ}\nconsole.log(Object.getPrototypeOf(p));//{constructor: ƒ, sayHello: ƒ}\n```\n\n![](https://static.meowrain.cn/i/2023/01/02/8d9lzg-3.png)\n![](https://static.meowrain.cn/i/2023/01/02/10g9bts-3.png)\n\n> 原型的作用； 原型就相当于是一个公共的区域，可以被所有该类实例访问\n> 可以将一个该类实例中所有的公共属性统一存储到原型中\n> 这样我们只需要创建一个属性，即可被所有实例访问\n\n### `prototype`\n\n```js\nclass Person {\n    sayHello(){\n        console.log(\"hello\")\n    }\n}\nconst p1 = new Person();\nconsole.log(Person.prototype);\nconsole.log(Person.prototype === p1.__proto__); //true\n\n```\n\n![](https://static.meowrain.cn/i/2023/01/02/12rljrd-3.png)\n可以通过上面两种方式完成类的修改\n\n### Object.hasOwn用法\n\n> 用来检查一个对象的自身是否含有某个属性\n> [MDN文档-Object.hasOwn](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn)\n\n```js\nclass Man {\n    name = \"liming\";\n}\n\nconst man1 = new Man();\nconsole.log(Object.hasOwn(man1, \"name\")) //true\n```\n\n![](https://static.meowrain.cn/i/2023/01/03/qh6g8-3.png)\n\n## 旧类\n\n> 早期js中,直接通过函数来定义类\n> 一个函数如果直接调用xx(),那么这个函数就是一个普通函数\n> 一个函数如果通过调用new xxx()那么这个函数就是一个构造函数\n\n```js\nfunction Person (){\n\n}\nconst p = new Person();\n```\n\n> 上面的等价于下面的\n\n```js\nclass Person {\n    \n}\nconst p = new Person();\n```\n\n***\n\n```js\nfunction Person(name,age){\n    //构造函数里面写的内容就是class中constructor写的内容\n    this.name = name;\n    this.age = age;\n    this.sayHello = function (){\n        console.log(\"hello\")\n    }\n}\n//向原型中添加\nPerson.prototype.sayNice = function (){\n    console.log(\"nice\")\n}\nconst p = new Person(\"meowrain\",12);\nconsole.log(p.name); // meowrain\nconsole.log(p.age); // 12\np.sayHello(); //hello\np.sayNice();//nice\nconsole.log(p);\n```\n\n![](https://static.meowrain.cn/i/2023/01/02/w500jh-3.png) <font color=red>如上图,从上图我们可以看到,sayNice方法被添加到原型中了</font>\n\n### 旧类静态属性,静态方法...\n\n```js\nvar Person = (\n    function () {\n        //构造函数\n        function Person(name, age) {\n            this.name = name;\n            this.age = age;\n        }\n\n        //静态属性\n        Person.staticProperty = \"hobby\";\n        Person.hobby = \"nice\";\n        console.log(Person.hobby);//nice\n\n        //静态方法\n        Person.staticMethod = function () {\n            console.log(\"good\");\n        };\n        Person.staticMethod(); // good\n\n        //创建实例\n        const p = new Person(\"meowrain\", 12);\n        console.log(p.name);\n        console.log(p.age);\n\n        //返回对象\n        return Person;\n    })();\n```\n\n继承:\n\n```js\nvar Animal = (function () {\n    function Animal(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    return Animal;\n})();\nvar Cat = (function () {\n    function Cat(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    //继承Animal\n    Cat.prototype = new Animal();\n    return Cat;\n})();\nconst cat1 = new Cat(\"meow\", 2);\nconsole.log(cat1);\n```\n\n## new运算符\n\n> new运算符是创建对象时候使用的运算符\n> [new运算符-MDN docs](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new)\n> ![](https://static.meowrain.cn/i/2023/01/02/xljgqs-3.png)\n","categories":["前端","Javascript"]},{"title":"Node-包管理工具","url":"/2023/01/25/ac95840c294b45909b8a32b5a3c7b1f7/","content":"\n# Node-包管理工具\n\n## 1.1 快速创建package.json\n\nnpm包管理工具提供了一个快捷命令。可以再执行命令时所处的目录中，快速创建package.json这个包管理配置文件\n\n`npm init -y`\n\n![image-20220911144803634](https://static.meowrain.cn/i/2022/09/11/nxtkl0-3.png)\n\n## 1.2 depenndecies节点\n\n![image-20220911144953773](https://static.meowrain.cn/i/2022/09/11/nyxy8q-3.png)\n\n专门用来记录使用npm install命令安装了哪些包\n\n## 1.3 一次性安装所有的包\n\n如果你之前安装过一些包，现在换了机器，想要还原之前的运行环境，那么就可以直接把package.json文件导出去，然后在另一台机器上直接 输入 `npm install` 即可自动安装之前安装过的所有包\n\n## 1.4 卸载包\n\n`npm uninstall 包名`\n\n## 1.5 开发期间使用\n\n![image-20220911151102520](https://static.meowrain.cn/i/2022/09/11/ozbfdm-3.png)\n\n## 1.6 包的分类\n\n### 项目包\n\n那些被安装到项目的`node_modules 目录`中的包，都是项目包\n\n项目包分为两类：分别是\n\n*   开发依赖包（被记录到devDependencies节点中的包，只在开发期间会用到）\n*   核心依赖包(会被记录到dependencies节点中的包，在开发期间和项目上线之后都会用到\n\n```bash\nnpm i 包名 -D #开发依赖包，会被记录到 devDependencies节点目录下\nnpm i 包名 #核心依赖包(会被记录到dependencies目录下)\n```\n\n### 全局包\n\n```bash\nnpm i 包名 -g\n```\n","categories":["前端","Node.js"]},{"title":"Linux 目录结构","url":"/2023/01/25/76440ac4b9d649d0923e1dc7808d6d9e/","content":"\n# Linux 目录结构\n\n结构说明：\n**/bin**：bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。\n**/boot**：这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。\n**/dev** ：dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。\n**/etc**：etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。\n**/home**：用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。\n**/lib**：lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。\n**/lost+found**：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。\n**/media**：linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。\n**/mnt**：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。\n**/opt**：opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。\n**/proc**：proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系**统内存的映射**，我们可以通过直接访问这个目录来获取系统信息。\n**/root**：该目录为系统管理员，也称作超级权限者的用户主目录。\n**/sbin**：s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。\n**/selinux**：这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。\n**/srv**：该目录存放一些服务启动之后需要提取的数据。\n**/sys**：当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。\n**/tmp**：tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。\n**/usr**：usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。\n**/usr/bin**：系统用户使用的应用程序。\n**/usr/sbin**：超级用户使用的比较高级的管理程序和系统守护程序。\n**/usr/src**：内核源代码默认的放置目录。\n","categories":["Linux"]},{"title":"Linux用户管理","url":"/2023/01/25/e2660f8d01d24bafbcab08e0a21766ae/","content":"\n# 用户管理\n\n## 添加用户\n\n### 基本语法\n\nuseradd 用户名\nuseradd -d 目录 用户名 -可指定用户目录\n\n## 修改用户密码\n\npasswd 用户名\n\n## 删除用户\n\nuserdel 用户名  ---》删除用户\nuserdel -r 用户名 ----》删除用户以及其家目录\n\n## 查询用户信息\n\nid 用户名\n![image-1656298922716](/upload/2022/06/image-1656298922716.png)\nwho am i\n![image-1656298948328](/upload/2022/06/image-1656298948328.png)\n\n## 用户组\n\n## 新增组\n\ngroupadd 组名\n\n## 删除组\n\ngroupdel 组名\n\n## 增加用户时直接加入用户组\n\nuseradd -g 用户组 用户名\n\n## 修改用户的组\n\nusermod -g 用户组 用户名\n","categories":["Linux"]},{"title":"Linux压缩和解压缩","url":"/2023/01/25/6555fe10b1904e6f8ad9e999d5bb8c09/","content":"\n# gzip/gunzip指令\n\ngzip用于压缩文件，gunzip用于解压\n基本语法\ngzip 文件(功能描述：压缩文件，只能把文件压缩为\\*.gz文件)\ngunzip 文件.gz （功能描述：解压缩文件指令）\n\n# zip/unzip指令\n\nzip用于压缩文件夹，unzip用于解压，这个在项目打包发布中很有用\n\n基本语法：\nzip \\[选项]xxx.zip 将要压缩的内容 （功能描述：压缩文件或者文件夹的命令）\nunzip \\[选项]xxxx.zip (功能描述：解压缩文件)\n\nzip常用选项：\n\\-r : 递归压缩，即压缩目录\n\nunzip常用选项\n\\-d<目录>：指定解压后文件的存放目录\n\n应用案例：\n案例1： 将/home下的所闻文件进行压缩成myhome.zip\n\n```shell\nzip -r myhome.zip /home/*\n```\n\n案例2：将myhome.zip解压到/opt/tmp目录下\n\n```shell\nunzip -d /opt/tmp/ myhome.zip\n```\n\n# tar指令\n\ntar指令是打包指令，最后打包的文件是`.tar.gz`的文件\n基本语法：\ntar \\[选项] xxx.tar.gz 打包的内容（功能描述：打包目录，压缩后的文件格式.tar.gz）\n选项说明：\n\n| 选项 | 功能         |\n| -- | ---------- |\n| -c | 产生.tar打包文件 |\n| -v | 显示详情信息     |\n| -f | 指定压缩后的文件名  |\n| -z | 打包的同时压缩    |\n| -x | 解包.tar文件   |\n\n应用实例：\n案例1： 压缩多个文件，将/home/pig.txt和/home/cat.txt压缩成pc.tar.gz\n`tar -zcvf pc.tar.gz  cat.txt pig.txt`\n![图片](/upload/2022/07/%E5%9B%BE%E7%89%87.png)\n案例2： 将/home的文件夹压缩成myhome.tar.gz\n`tar -zcvf myhome.tar.gz /home/`\n![图片-1657111417142](/upload/2022/07/%E5%9B%BE%E7%89%87-1657111417142.png)\n案例3： 将pc.tar.gz解压到当前目录\n`tar -zxvf pc.tar.gz `\n![图片-1657111477529](/upload/2022/07/%E5%9B%BE%E7%89%87-1657111477529.png)\n案例 4： 把`myhome.tar.gz`解压到`/opt/tmp2`目录下\n`tar -zxvf /myhome/myhome.tar.gz -C /opt/tmp2/`\n**-C指定解压目录**\n\n![图片-1657111720673](/upload/2022/07/%E5%9B%BE%E7%89%87-1657111720673.png)\n","categories":["Linux"]},{"title":"Linux 同步时间","url":"/2023/01/25/c701f1c34bb44b30a2fa83eafe2f97b5/","content":"\n# Linux 同步时间\n\n> 今天发现我的小服务器时间不准了，想着怎么同步一下标准北京时间\n\n## 一. `ntpdate` 同步网络时间\n\n```bash\n# 安装ntpdate\nsudo apt-get install ntpdate   //debian系\nsudo pacman -S ntpdate   // Arch系\n\n# 执行时间同步\nsudo ntpdate -u ntp.api.bz  //同步上海授时服务器\n\n```\n\n## 二.NTP服务器\n\n阿里云NTP服务器\n\n```plain\nntp1.aliyun.com\nntp2.aliyun.com\nntp3.aliyun.com\nntp4.aliyun.com\nntp5.aliyun.com\nntp6.aliyun.com\nntp7.aliyun.com\n```\n\n![image-20220805210608011](https://static.meowrain.cn/i/2022/08/05/ytzxgy-3.png)\n","categories":["Linux"]},{"title":"CSS-position位置-绝对定位和相对定位","url":"/2023/01/25/d3a6f3f0a7314b8c96148565dead839f/","content":"\n# CSS-position位置-绝对定位和相对定位\n\n## position: relative 相对定位\n\n当元素的定位设置为relative时，它允许你通过CSS指定该元素在当前文档流页面下的相对偏移量。\n\nCSS中，控制各个方向偏移量的属性是left,right,top和bottom\n\n它们代表从原来位置向远离该方向偏移指定的像素，百分比或者em。\n\n```html\n<style>\n  h2 {\nposition: relative;\nbottom: 10px;\n\n  }\n</style>\n<body>\n  <h1>On Being Well-Positioned</h1>\n  <h2>Move me!</h2>\n  <p>I still think the h2 is where it normally sits.</p>\n</body>\n```\n\n<img src=\"https://static.meowrain.cn/i/2022/08/10/zj16du-3.png\" alt=\"image-20220810214828721\" style=\"zoom:67%;\" />\n\n> 把元素的位置设置成相对，不会改变该元素在布局中所占的位置，也不会对其它元素的位置产生影响\n\n### 使用CSS偏移移动相对定位的元素\n\n`top:10px`就是让元素向下移动10像素，同理，`bottom:10px`相当于让元素向上移动10像素。\n\n`left:10px`就是让元素向右移动10px，`right:10px`让元素向左移动10px\n\n## positon: absolute 绝对定位\n\n当position的值设置为absolute时，绝对定位会将元素从当前的文档流里面移除，周围的元素会忽略它，这样我们可以使用CSS的top,bottom,left,right的属性来调整元素的位置\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        div {\n            width: 400px;\n            height: 400px;\n            background-color: burlywood;\n            position: absolute;\n            top: 20px;\n        }\n        p { \n            text-transform: capitalize;\n        }\n    </style>\n</head>\n<body>\n    <p>let us see the position</p>\n    <div>\n    </div>\n</body>\n</html>\n```\n\n![image-20220810220418382](https://static.meowrain.cn/i/2022/08/10/10gban5-3.png)\n\n上面是绝对定位，我们看看相对定位\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        div {\n            width: 400px;\n            height: 400px;\n            background-color: burlywood;\n            position: relative;\n            top: 20px;\n        }\n        p { \n            text-transform: capitalize;\n        }\n    </style>\n</head>\n<body>\n    <p>let us see the position</p>\n    <div>\n    </div>\n</body>\n</html>\n```\n\n![image-20220810220505484](https://static.meowrain.cn/i/2022/08/10/10gu8dc-3.png)\n\n> **从上面我们能看出来，这个positon设置为absolute的话，再设置top:20px，就是忽略周围所有元素，然后把它自己的位置设置为距离浏览器窗口顶部的10px的距离**\n\n## position:fixed 特殊的绝对定位\n\n其类似于绝对位置，也会将元素从当前的文档流中移除\n\n> **但fixed和absolute的最明显的区别就在于，前者定位的元素不会随着皮姆滚动而移动**\n\n### 案例：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <style>\n        #navbar {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            background-color: bisque;\n            color: blueviolet;\n        }\n        nav ul {\n            text-decoration: none;\n        }\n        nav ul li {\n            display: inline;\n            padding-left: 20px;\n        }\n        div {\n            box-sizing: border-box;\n            margin: 150px auto;\n            width: 400px;\n            height: 400px;\n            background-color: burlywood;\n            text-transform: capitalize;\n            text-align: center;\n            line-height: 400px;\n        }\n    </style>\n</head>\n<body>\n    <header>\n    <nav id=\"navbar\">\n<ul>\n    <li>Home</li>\n    <li>Archive</li>\n    <li>Image</li>\n    <li>Experiment</li>\n    <li>Contact</li>\n</ul>\n    </nav>\n</header>\n    \n    <div>\n        <p>let us see the position</p>\n    </div>\n    <div>\n        <p>let us see the position</p>\n    </div>\n    <div>\n        <p>let us see the position</p>\n    </div>\n</body>\n</html>\n```\n\n![动画](https://static.meowrain.cn/i/2022/08/10/10zvwe9-3.gif)\n","tags":["css"],"categories":["前端","CSS"]},{"title":"C++求和的多种方式","url":"/2023/01/25/a2acb1e85c084003b09433633a27ec8f/","content":"\n## 第一种-多维数组+ 位运算法\n\n```c++\n#include <iostream>\nusing namespace std;\nint sum(int n);\nint main(void) {\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\",sum(n));\n    return 0;\n}\nint sum(int n) {\n    char arr[n][n+1];\n    /*原理：\n    * arr[n][n+1]相当于定义一个n*(n+1)的矩阵\n    * 因为定义的是char类型，所以说每个元素占一个字节\n    * 求sizeof(arr)求得就是n*(n+1)的值\n    * 然后用位运算符，向右一位，相当于除以2\n    * 这样就完成了等差数列求和公式\n    * n* (n+1) /2\n    */\n    return sizeof(arr) >> 1;//右移一位相当于除以2\n}\n```\n\n## 递归法\n\n```c++\n#include <iostream>\nusing namespace std;\nint getSum(int n) {\n    n > 0 && getSum(n-1) + n;\n}\n/*这种方法采取了递归的方法*/\n```\n","categories":["C/C++"]},{"title":"SprintBoot笔记（四）","url":"/2023/01/24/3636e46047924c11b7ec162ffc9f9271/","content":"\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic4.zhimg.com%2Fv2-054d8ff6135b3638aca543eff7424f98_1200x500.jpg\\&refer=http%3A%2F%2Fpic4.zhimg.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1644500043\\&t=72a4f8ecfca9ff5a2a0b3896edef4be7)\n\n# Redis数据库\n\n\\*\\*灵魂拷问：\\*\\*不是学了MySQL吗，存数据也能存了啊，又学一个数据库干嘛？\n\n在前面我们学习了MySQL数据库，它是一种传统的关系型数据库，我们可以使用MySQL来更好地管理和组织我们的数据，虽然在小型Web应用下，只需要一个MySQL+Mybatis自带的缓存系统就可以胜任大部分的数据存储工作。但是MySQL的缺点也很明显，它的数据始终是存储在硬盘上的，对于我们的用户信息这种不需要经常发生修改的内容，使用MySQL存储确实可以，但是如果是快速更新或是频繁使用的数据，比如微博热搜、双十一秒杀，这些数据不仅要求服务器需要提供更高的响应速度，而且还需要面对短时间内上百万甚至上千万次访问，而MySQL的磁盘IO读写性能完全不能满足上面的需求，能够满足上述需求的只有内存，因为速度远高于磁盘IO。\n\n因此，我们需要寻找一种更好的解决方案，来存储上述这类特殊数据，弥补MySQL的不足，以应对大数据时代的重重考验。\n\n## NoSQL概论\n\nNoSQL全称是Not Only SQL（不仅仅是SQL）它是一种非关系型数据库，相比传统SQL关系型数据库，它：\n\n*   不保证关系数据的ACID特性\n*   并不遵循SQL标准\n*   消除数据之间关联性\n\n乍一看，这玩意不比MySQL垃圾？我们再来看看它的优势：\n\n*   远超传统关系型数据库的性能\n*   非常易于扩展\n*   数据模型更加灵活\n*   高可用\n\n这样，NoSQL的优势一下就出来了，这不就是我们正要寻找的高并发海量数据的解决方案吗！\n\nNoSQL数据库分为以下几种：\n\n*   \\*\\*键值存储数据库：\\*\\*所有的数据都是以键值方式存储的，类似于我们之前学过的HashMap，使用起来非常简单方便，性能也非常高。\n*   \\*\\*列存储数据库：\\*\\*这部分数据库通常是用来应对分布式存储的海量数据。键仍然存在，但是它们的特点是指向了多个列。\n*   \\*\\*文档型数据库：\\*\\*它是以一种特定的文档格式存储数据，比如JSON格式，在处理网页等复杂数据时，文档型数据库比传统键值数据库的查询效率更高。\n*   \\*\\*图形数据库：\\*\\*利用类似于图的数据结构存储数据，结合图相关算法实现高速访问。\n\n其中我们要学习的Redis数据库，就是一个开源的**键值存储数据库**，所有的数据全部存放在内存中，它的性能大大高于磁盘IO，并且它也可以支持数据持久化，他还支持横向扩展、主从复制等。\n\n实际生产中，我们一般会配合使用Redis和MySQL以发挥它们各自的优势，取长补短。\n\n## Redis安装和部署\n\n我们这里还是使用Windows安装Redis服务器，但是官方指定是安装到Linux服务器上，我们后面学习了Linux之后，再来安装到Linux服务器上。由于官方并没有提供Windows版本的安装包，我们需要另外寻找：\n\n*   官网地址：<https://redis.io>\n*   GitHub Windows版本维护地址：<https://github.com/tporadowski/redis/releases>\n\n***\n\n## 基本操作\n\n在我们之前使用MySQL时，我们需要先在数据库中创建一张表，并定义好表的每个字段内容，最后再通过`insert`语句向表中添加数据，而Redis并不具有MySQL那样的严格的表结构，Redis是一个键值数据库，因此，可以像Map一样的操作方式，通过键值对向Redis数据库中添加数据（操作起来类似于向一个HashMap中存放数据）\n\n在Redis下，数据库是由一个整数索引标识，而不是由一个数据库名称。 默认情况下，我们连接Redis数据库之后，会使用0号数据库，我们可以通过Redis配置文件中的参数来修改数据库总数，默认为16个。\n\n我们可以通过`select`语句进行切换：\n\n```sql\nselect 序号;\n```\n\n### 数据操作\n\n我们来看看，如何向Redis数据库中添加数据：\n\n```sql\nset <key> <value>\n-- 一次性多个\nmset [<key> <value>]...\n```\n\n所有存入的数据默认会以**字符串**的形式保存，键值具有一定的命名规范，以方便我们可以快速定位我们的数据属于哪一个部分，比如用户的数据：\n\n```sql\n-- 使用冒号来进行板块分割，比如下面表示用户XXX的信息中的name属性，值为lbw\nset user:info:用户ID:name lbw\n```\n\n我们可以通过键值获取存入的值：\n\n```sql\nget <key>\n```\n\n你以为Redis就仅仅只是存取个数据吗？它还支持数据的过期时间设定：\n\n```sql\nset <key> <value> EX 秒\nset <key> <value> PX 毫秒\n```\n\n当数据到达指定时间时，会被自动删除。我们也可以单独为其他的键值对设置过期时间：\n\n```sql\nexpire <key> 秒\n```\n\n通过下面的命令来查询某个键值对的过期时间还剩多少：\n\n```sql\nttl <key>\n-- 毫秒显示\npttl <key>\n-- 转换为永久\npersist <key>\n```\n\n那么当我们想直接删除这个数据时呢？直接使用：\n\n```sql\ndel <key>...\n```\n\n删除命令可以同时拼接多个键值一起删除。\n\n当我们想要查看数据库中所有的键值时：\n\n```sql\nkeys *\n```\n\n也可以查询某个键是否存在：\n\n```sql\nexists <key>...\n```\n\n还可以随机拿一个键：\n\n```sql\nrandomkey\n```\n\n我们可以将一个数据库中的内容移动到另一个数据库中：\n\n```sql\nmove <key> 数据库序号\n```\n\n修改一个键为另一个键：\n\n```sql\nrename <key> <新的名称>\n-- 下面这个会检查新的名称是否已经存在\nrenamex <key> <新的名称>\n```\n\n如果存放的数据是一个数字，我们还可以对其进行自增自减操作：\n\n```sql\n-- 等价于a = a + 1\nincr <key>\n-- 等价于a = a + b\nincrby <key> b\n-- 等价于a = a - 1\ndecr <key>\n```\n\n最后就是查看值的数据类型：\n\n```sql\ntype <key>\n```\n\nRedis数据库也支持多种数据类型，但是它更偏向于我们在Java中认识的那些数据类型。\n\n## 数据类型介绍\n\n一个键值对除了存储一个String类型的值以外，还支持多种常用的数据类型。\n\n### Hash\n\n这种类型本质上就是一个HashMap，也就是嵌套了一个HashMap罢了，在Java中就像这样：\n\n```java\n#Redis默认存String类似于这样：\nMap<String, String> hash = new HashMap<>();\n#Redis存Hash类型的数据类似于这样：\nMap<String, Map<String, String>> hash = new HashMap<>();\n```\n\n它比较适合存储类这样的数据，由于值本身又是一个Map，因此我们可以在此Map中放入类的各种属性和值，以实现一个Hash数据类型存储一个类的数据。\n\n我们可以像这样来添加一个Hash类型的数据：\n\n```sql\nhset <key> [<字段> <值>]...\n```\n\n我们可以直接获取：\n\n```sql\nhget <key> <字段>\n-- 如果想要一次性获取所有的字段和值\nhgetall <key>\n```\n\n同样的，我们也可以判断某个字段是否存在：\n\n```sql\nhexists <key> <字段>\n```\n\n删除Hash中的某个字段：\n\n```sql\nhdel <key>\n```\n\n我们发现，在操作一个Hash时，实际上就是我们普通操作命令前面添加一个`h`，这样就能以同样的方式去操作Hash里面存放的键值对了，这里就不一一列出所有的操作了。我们来看看几个比较特殊的。\n\n我们现在想要知道Hash中一共存了多少个键值对：\n\n```sql\nhlen <key>\n```\n\n我们也可以一次性获取所有字段的值：\n\n```sql\nhvals <key>\n```\n\n唯一需要注意的是，Hash中只能存放字符串值，不允许出现嵌套的的情况。\n\n### List\n\n我们接着来看List类型，实际上这个猜都知道，它就是一个列表，而列表中存放一系列的字符串，它支持随机访问，支持双端操作，就像我们使用Java中的LinkedList一样。\n\n我们可以直接向一个已存在或是不存在的List中添加数据，如果不存在，会自动创建：\n\n```sql\n-- 向列表头部添加元素\nlpush <key> <element>...\n-- 向列表尾部添加元素\nrpush <key> <element>...\n-- 在指定元素前面/后面插入元素\nlinsert <key> before/after <指定元素> <element>\n```\n\n同样的，获取元素也非常简单：\n\n```sql\n-- 根据下标获取元素\nlindex <key> <下标>\n-- 获取并移除头部元素\nlpop <key>\n-- 获取并移除尾部元素\nrpop <key>\n-- 获取指定范围内的\nlrange <key> start stop\n```\n\n注意下标可以使用负数来表示从后到前数的数字（Python：搁这儿抄呢是吧）:\n\n```sql\n-- 获取列表a中的全部元素\nlrange a 0 -1\n```\n\n没想到吧，push和pop还能连着用呢：\n\n```sql\n-- 从前一个数组的最后取一个数出来放到另一个数组的头部，并返回元素\nrpoplpush 当前数组 目标数组\n```\n\n它还支持阻塞操作，类似于生产者和消费者，比如我们想要等待列表中有了数据后再进行pop操作：\n\n```sql\n-- 如果列表中没有元素，那么就等待，如果指定时间（秒）内被添加了数据，那么就执行pop操作，如果超时就作废，支持同时等待多个列表，只要其中一个列表有元素了，那么就能执行\nblpop <key>... timeout\n```\n\n### Set和SortedSet\n\nSet集合其实就像Java中的HashSet一样（我们在JavaSE中已经讲解过了，HashSet本质上就是利用了一个HashMap，但是Value都是固定对象，仅仅是Key不同）它不允许出现重复元素，不支持随机访问，但是能够利用Hash表提供极高的查找效率。\n\n向Set中添加一个或多个值：\n\n```sql\nsadd <key> <value>...\n```\n\n查看Set集合中有多少个值：\n\n```sql\nscard <key>\n```\n\n判断集合中是否包含：\n\n```sql\n-- 是否包含指定值\nsismember <key> <value>\n-- 列出所有值\nsmembers <key>\n```\n\n集合之间的运算：\n\n```sql\n-- 集合之间的差集\nsdiff <key1> <key2>\n-- 集合之间的交集\nsinter <key1> <key2>\n-- 求并集\nsunion <key1> <key2>\n-- 将集合之间的差集存到目标集合中\nsdiffstore 目标 <key1> <key2>\n-- 同上\nsinterstore 目标 <key1> <key2>\n-- 同上\nsunionstore 目标 <key1> <key2>\n```\n\n移动指定值到另一个集合中：\n\n```sql\nsmove <key> 目标 value \n```\n\n移除操作：\n\n```sql\n-- 随机移除一个幸运儿\nspop <key>\n-- 移除指定\nsrem <key> <value>...\n```\n\n那么如果我们要求Set集合中的数据按照我们指定的顺序进行排列怎么办呢？这时就可以使用SortedSet，它支持我们为每个值设定一个分数，分数的大小决定了值的位置，所以它是有序的。\n\n我们可以添加一个带分数的值：\n\n```sql\nzadd <key> [<value> <score>]...\n```\n\n同样的：\n\n```sql\n-- 查询有多少个值\nzcard <key>\n-- 移除\nzrem <key> <value>...\n-- 获取区间内的所有\nzrange <key> start stop\n```\n\n由于所有的值都有一个分数，我们也可以根据分数段来获取：\n\n``` sql\n-- 通过分数段查看\nzrangebyscore <key> start stop [withscores] [limit]\n-- 统计分数段内的数量\nzcount <key>  start stop\n-- 根据分数获取指定值的排名\nzrank <key> <value>\n```\n\n<https://www.jianshu.com/p/32b9fe8c20e1>\n\n有关Bitmap、HyperLogLog和Geospatial等数据类型，这里暂时不做介绍，感兴趣可以自行了解。\n\n***\n\n## 持久化\n\n我们知道，Redis数据库中的数据都是存放在内存中，虽然很高效，但是这样存在一个非常严重的问题，如果突然停电，那我们的数据不就全部丢失了吗？它不像硬盘上的数据，断电依然能够保存。\n\n这个时候我们就需要持久化，我们需要将我们的数据备份到硬盘上，防止断电或是机器故障导致的数据丢失。\n\n持久化的实现方式有两种方案：一种是直接保存当前**已经存储的数据**，相当于复制内存中的数据到硬盘上，需要恢复数据时直接读取即可；还有一种就是保存我们存放数据的**所有过程**，需要恢复数据时，只需要将整个过程完整地重演一遍就能保证与之前数据库中的内容一致。\n\n### RDB\n\nRDB就是我们所说的第一种解决方案，那么如何将数据保存到本地呢？我们可以使用命令：\n\n```sql\nsave\n-- 注意上面这个命令是直接保存，会占用一定的时间，也可以单独开一个子进程后台执行保存\nbgsave\n```\n\n执行后，会在服务端目录下生成一个dump.rdb文件，而这个文件中就保存了内存中存放的数据，当服务器重启后，会自动加载里面的内容到对应数据库中。保存后我们可以关闭服务器：\n\n```sql\nshutdown\n```\n\n重启后可以看到数据依然存在。\n\n![点击查看图片来源](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fqqe2.com%2Fjava%2Fzb_users%2Fupload%2F2020%2F04%2F202004281588086055367603.png\\&refer=http%3A%2F%2Fqqe2.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1644843952\\&t=ec4cd6eb2c6d47a10aff5b9f264d2f16)\n\n虽然这种方式非常方便，但是由于会完整复制所有的数据，如果数据库中的数据量比较大，那么复制一次可能就需要花费大量的时间，所以我们可以每隔一段时间自动进行保存；还有就是，如果我们基本上都是在进行读操作，而没有进行写操作，实际上只需要偶尔保存一次即可，因为数据几乎没有怎么变化，可能两次保存的都是一样的数据。\n\n我们可以在配置文件中设置自动保存，并设定在一段时间内写入多少数据时，执行一次保存操作：\n\n    save 300 10 # 300秒（5分钟）内有10个写入\n    save 60 10000 # 60秒（1分钟）内有10000个写入\n\n配置的save使用的都是bgsave后台执行。\n\n### AOF\n\n虽然RDB能够很好地解决数据持久化问题，但是它的缺点也很明显：每次都需要去完整地保存整个数据库中的数据，同时后台保存过程中也会产生额外的内存开销，最严重的是它并不是实时保存的，如果在自动保存触发之前服务器崩溃，那么依然会导致少量数据的丢失。\n\n而AOF就是另一种方式，它会以日志的形式将我们每次执行的命令都进行保存，服务器重启时会将所有命令依次执行，通过这种重演的方式将数据恢复，这样就能很好解决实时性存储问题。\n\n![rdb和aof区别](https://qqe2.com/java/zb_users/upload/2020/04/202004281588086068660716.png)\n\n但是，我们多久写一次日志呢？我们可以自己配置保存策略，有三种策略：\n\n*   always：每次执行写操作都会保存一次\n*   everysec：每秒保存一次（默认配置），这样就算丢失数据也只会丢一秒以内的数据\n*   no：看系统心情保存\n\n可以在配置文件中配置：\n\n```sql\n# 注意得改成也是\nappendonly yes\n\n# appendfsync always\nappendfsync everysec\n# appendfsync no\n```\n\n重启服务器后，可以看到服务器目录下多了一个`appendonly.aof`文件，存储的就是我们执行的命令。\n\nAOF的缺点也很明显，每次服务器启动都需要进行过程重演，相比RDB更加耗费时间，并且随着我们的操作变多，不断累计，可能到最后我们的aof文件会变得无比巨大，我们需要一个改进方案来优化这些问题。\n\nRedis有一个AOF重写机制进行优化，比如我们执行了这样的语句：\n\n    lpush test 666\n    lpush test 777\n    lpush test 888\n\n实际上用一条语句也可以实现：\n\n    lpush test 666 777 888\n\n正是如此，只要我们能够保证最终的重演结果和原有语句的结果一致，无论语句如何修改都可以，所以我们可以通过这种方式将多条语句进行压缩。\n\n我们可以输入命令来手动执行重写操作：\n\n```sql\nbgrewriteaof\n```\n\n或是在配置文件中配置自动重写：\n\n    # 百分比计算，这里不多介绍\n    auto-aof-rewrite-percentage 100\n    # 当达到这个大小时，触发自动重写\n    auto-aof-rewrite-min-size 64mb\n\n至此，我们就完成了两种持久化方案的介绍，最后我们再来进行一下总结：\n\n*   AOF：\n    *   优点：存储速度快、消耗资源少、支持实时存储\n    *   缺点：加载速度慢、数据体积大\n*   RDB：\n    *   优点：加载速度快、数据体积小\n    *   缺点：存储速度慢大量消耗资源、会发生数据丢失\n\n***\n\n## 事务和锁机制\n\n和MySQL一样，在Redis中也有事务机制，当我们需要保证多条命令一次性完整执行而中途不受到其他命令干扰时，就可以使用事务机制。\n\n我们可以使用命令来直接开启事务：\n\n```sql\nmulti\n```\n\n当我们输入完所有要执行的命令时，可以使用命令来立即执行事务：\n\n```sql\nexec\n```\n\n我们也可以中途取消事务：\n\n```sql\ndiscard\n```\n\n实际上整个事务是创建了一个命令队列，它不像MySQL那种在事务中也能单独得到结果，而是我们提前将所有的命令装在队列中，但是并不会执行，而是等我们提交事务的时候再统一执行。\n\n### 锁\n\n又提到锁了，实际上这个概念对我们来说已经不算是陌生了。实际上在Redis中也会出现多个命令同时竞争同一个数据的情况，比如现在有两条命令同时执行，他们都要去修改a的值，那么这个时候就只能动用锁机制来保证同一时间只能有一个命令操作。\n\n虽然Redis中也有锁机制，但是它是一种乐观锁，不同于MySQL，我们在MySQL中认识的锁是悲观锁，那么什么是乐观锁什么是悲观锁呢？\n\n*   悲观锁：时刻认为别人会来抢占资源，禁止一切外来访问，直到释放锁，具有强烈的排他性质。\n*   乐观锁：并不认为会有人来抢占资源，所以会直接对数据进行操作，在操作时再去验证是否有其他人抢占资源。\n\nRedis中可以使用watch来监视一个目标，如果执行事务之前被监视目标发生了修改，则取消本次事务：\n\n```sql\nwatch\n```\n\n我们可以开两个客户端进行测试。\n\n取消监视可以使用：\n\n```sql\nunwatch\n```\n\n至此，Redis的基础内容就讲解完毕了，在之后的SpringCloud阶段，我们还会去讲解集群相关的知识，包括主从复制、哨兵模式等。\n\n***\n\n## 使用Java与Redis交互\n\n既然了解了如何通过命令窗口操作Redis数据库，那么我们如何使用Java来操作呢？\n\n这里我们需要使用到Jedis框架，它能够实现Java与Redis数据库的交互，依赖：\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>redis.clients</groupId>\n        <artifactId>jedis</artifactId>\n        <version>4.0.0</version>\n    </dependency>\n</dependencies>\n```\n\n### 基本操作\n\n我们来看看如何连接Redis数据库，非常简单，只需要创建一个对象即可：\n\n```java\npublic static void main(String[] args) {\n    //创建Jedis对象\n    Jedis jedis = new Jedis(\"localhost\", 6379);\n  \t\n  \t//使用之后关闭连接\n  \tjedis.close();\n}\n```\n\n通过Jedis对象，我们就可以直接调用命令的同名方法来执行Redis命令了，比如：\n\n```java\npublic static void main(String[] args) {\n    //直接使用try-with-resouse，省去close\n    try(Jedis jedis = new Jedis(\"192.168.10.3\", 6379)){\n        jedis.set(\"test\", \"lbwnb\");   //等同于 set test lbwnb 命令\n        System.out.println(jedis.get(\"test\"));  //等同于 get test 命令\n    }\n}\n```\n\nHash类型的数据也是这样：\n\n```java\npublic static void main(String[] args) {\n    try(Jedis jedis = new Jedis(\"192.168.10.3\", 6379)){\n        jedis.hset(\"hhh\", \"name\", \"sxc\");   //等同于 hset hhh name sxc\n        jedis.hset(\"hhh\", \"sex\", \"19\");    //等同于 hset hhh age 19\n        jedis.hgetAll(\"hhh\").forEach((k, v) -> System.out.println(k+\": \"+v));\n    }\n}\n```\n\n我们接着来看看列表操作：\n\n```java\npublic static void main(String[] args) {\n    try(Jedis jedis = new Jedis(\"192.168.10.3\", 6379)){\n        jedis.lpush(\"mylist\", \"111\", \"222\", \"333\");  //等同于 lpush mylist 111 222 333 命令\n        jedis.lrange(\"mylist\", 0, -1)\n                .forEach(System.out::println);    //等同于 lrange mylist 0 -1\n    }\n}\n```\n\n实际上我们只需要按照对应的操作去调用同名方法即可，所有的类型封装Jedis已经帮助我们完成了。\n\n### SpringBoot整合Redis\n\n我们接着来看如何在SpringBoot项目中整合Redis操作框架，只需要一个starter即可，但是它底层没有用Jedis，而是Lettuce：\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\nstarter提供的默认配置会去连接本地的Redis服务器，并使用0号数据库，当然你也可以手动进行修改：\n\n```yaml\nspring:\n  redis:\n  \t#Redis服务器地址\n    host: 192.168.10.3\n    #端口\n    port: 6379\n    #使用几号数据库\n    database: 0\n```\n\nstarter已经给我们提供了两个默认的模板类：\n\n```java\n@Configuration(\n    proxyBeanMethods = false\n)\n@ConditionalOnClass({RedisOperations.class})\n@EnableConfigurationProperties({RedisProperties.class})\n@Import({LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class})\npublic class RedisAutoConfiguration {\n    public RedisAutoConfiguration() {\n    }\n\n    @Bean\n    @ConditionalOnMissingBean(\n        name = {\"redisTemplate\"}\n    )\n    @ConditionalOnSingleCandidate(RedisConnectionFactory.class)\n    public RedisTemplate<Object, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<Object, Object> template = new RedisTemplate();\n        template.setConnectionFactory(redisConnectionFactory);\n        return template;\n    }\n\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnSingleCandidate(RedisConnectionFactory.class)\n    public StringRedisTemplate stringRedisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        return new StringRedisTemplate(redisConnectionFactory);\n    }\n}\n```\n\n那么如何去使用这两个模板类呢？我们可以直接注入`StringRedisTemplate`来使用模板：\n\n```java\n@SpringBootTest\nclass SpringBootTestApplicationTests {\n\n    @Autowired\n    StringRedisTemplate template;\n\n    @Test\n    void contextLoads() {\n        ValueOperations<String, String> operations = template.opsForValue();\n        operations.set(\"c\", \"xxxxx\");   //设置值\n        System.out.println(operations.get(\"c\"));   //获取值\n      \t\n        template.delete(\"c\");    //删除键\n        System.out.println(template.hasKey(\"c\"));   //判断是否包含键\n    }\n\n}\n```\n\n实际上所有的值的操作都被封装到了`ValueOperations`对象中，而普通的键操作直接通过模板对象就可以使用了，大致使用方式其实和Jedis一致。\n\n我们接着来看看事务操作，由于Spring没有专门的Redis事务管理器，所以只能借用JDBC提供的，只不过无所谓，正常情况下反正我们也要用到这玩意：\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n\n```java\n@Service\npublic class RedisService {\n\n    @Resource\n    StringRedisTemplate template;\n\n    @PostConstruct\n    public void init(){\n        template.setEnableTransactionSupport(true);   //需要开启事务\n    }\n\n    @Transactional    //需要添加此注解\n    public void test(){\n        template.multi();\n        template.opsForValue().set(\"d\", \"xxxxx\");\n        template.exec();\n    }\n}\n```\n\n我们还可以为RedisTemplate对象配置一个Serializer来实现对象的JSON存储：\n\n```java\n@Test\nvoid contextLoad2() {\n    //注意Student需要实现序列化接口才能存入Redis\n    template.opsForValue().set(\"student\", new Student());\n    System.out.println(template.opsForValue().get(\"student\"));\n}\n```\n\n***\n\n## 使用Redis做缓存\n\n我们可以轻松地使用Redis来实现一些框架的缓存和其他存储。\n\n### Mybatis二级缓存\n\n还记得我们在学习Mybatis讲解的缓存机制吗，我们当时介绍了二级缓存，它是Mapper级别的缓存，能够作用与所有会话。但是当时我们提出了一个问题，由于Mybatis的默认二级缓存只能是单机的，如果存在多台服务器访问同一个数据库，实际上二级缓存只会在各自的服务器上生效，但是我们希望的是多台服务器都能使用同一个二级缓存，这样就不会造成过多的资源浪费。\n\n![img](https://img-blog.csdnimg.cn/img_convert/5afd7713f9a97615dc3a0b1d3bc7db27.png)\n\n我们可以将Redis作为Mybatis的二级缓存，这样就能实现多台服务器使用同一个二级缓存，因为它们只需要连接同一个Redis服务器即可，所有的缓存数据全部存储在Redis服务器上。我们需要手动实现Mybatis提供的Cache接口，这里我们简单编写一下：\n\n```java\n//实现Mybatis的Cache接口\npublic class RedisMybatisCache implements Cache {\n\n    private final String id;\n    private static RedisTemplate<Object, Object> template;\n\n   \t//注意构造方法必须带一个String类型的参数接收id\n    public RedisMybatisCache(String id){\n        this.id = id;\n    }\n\n  \t//初始化时通过配置类将RedisTemplate给过来\n    public static void setTemplate(RedisTemplate<Object, Object> template) {\n        RedisMybatisCache.template = template;\n    }\n\n    @Override\n    public String getId() {\n        return id;\n    }\n\n    @Override\n    public void putObject(Object o, Object o1) {\n      \t//这里直接向Redis数据库中丢数据即可，o就是Key，o1就是Value，60秒为过期时间\n        template.opsForValue().set(o, o1, 60, TimeUnit.SECONDS);\n    }\n\n    @Override\n    public Object getObject(Object o) {\n      \t//这里根据Key直接从Redis数据库中获取值即可\n        return template.opsForValue().get(o);\n    }\n\n    @Override\n    public Object removeObject(Object o) {\n      \t//根据Key删除\n        return template.delete(o);\n    }\n\n    @Override\n    public void clear() {\n      \t//由于template中没封装清除操作，只能通过connection来执行\n\t\t\t\ttemplate.execute((RedisCallback<Void>) connection -> {\n          \t//通过connection对象执行清空操作\n            connection.flushDb();\n            return null;\n        });\n    }\n\n    @Override\n    public int getSize() {\n      \t//这里也是使用connection对象来获取当前的Key数量\n        return template.execute(RedisServerCommands::dbSize).intValue();\n    }\n}\n```\n\n缓存类编写完成后，我们接着来编写配置类：\n\n```java\n@Configuration\npublic class MainConfiguration {\n    @Resource\n    RedisTemplate<Object, Object> template;\n\n    @PostConstruct\n    public void init(){\n      \t//把RedisTemplate给到RedisMybatisCache\n        RedisMybatisCache.setTemplate(template);\n    }\n}\n```\n\n最后我们在Mapper上启用此缓存即可：\n\n```java\n//只需要修改缓存实现类implementation为我们的RedisMybatisCache即可\n@CacheNamespace(implementation = RedisMybatisCache.class)\n@Mapper\npublic interface MainMapper {\n\n    @Select(\"select name from student where sid = 1\")\n    String getSid();\n}\n```\n\n最后我们提供一个测试用例来查看当前的二级缓存是否生效：\n\n```java\n@SpringBootTest\nclass SpringBootTestApplicationTests {\n\n\n    @Resource\n    MainMapper mapper;\n\n    @Test\n    void contextLoads() {\n        System.out.println(mapper.getSid());\n        System.out.println(mapper.getSid());\n        System.out.println(mapper.getSid());\n    }\n\n}\n```\n\n手动使用客户端查看Redis数据库，可以看到已经有一条Mybatis生成的缓存数据了。\n\n### Token持久化存储\n\n我们之前使用SpringSecurity时，remember-me的Token是支持持久化存储的，而我们当时是存储在数据库中，那么Token信息能否存储在缓存中呢，当然也是可以的，我们可以手动实现一个：\n\n```java\n//实现PersistentTokenRepository接口\n@Component\npublic class RedisTokenRepository implements PersistentTokenRepository {\n  \t//Key名称前缀，用于区分\n    private final static String REMEMBER_ME_KEY = \"spring:security:rememberMe:\";\n    @Resource\n    RedisTemplate<Object, Object> template;\n\n    @Override\n    public void createNewToken(PersistentRememberMeToken token) {\n      \t//这里要放两个，一个存seriesId->Token，一个存username->seriesId，因为删除时是通过username删除\n        template.opsForValue().set(REMEMBER_ME_KEY+\"username:\"+token.getUsername(), token.getSeries());\n        template.expire(REMEMBER_ME_KEY+\"username:\"+token.getUsername(), 1, TimeUnit.DAYS);\n        this.setToken(token);\n    }\n\n  \t//先获取，然后修改创建一个新的，再放入\n    @Override\n    public void updateToken(String series, String tokenValue, Date lastUsed) {\n        PersistentRememberMeToken token = this.getToken(series);\n        if(token != null)\n           this.setToken(new PersistentRememberMeToken(token.getUsername(), series, tokenValue, lastUsed));\n    }\n\n    @Override\n    public PersistentRememberMeToken getTokenForSeries(String seriesId) {\n        return this.getToken(seriesId);\n    }\n\n  \t//通过username找seriesId直接删除这两个\n    @Override\n    public void removeUserTokens(String username) {\n        String series = (String) template.opsForValue().get(REMEMBER_ME_KEY+\"username:\"+username);\n        template.delete(REMEMBER_ME_KEY+series);\n        template.delete(REMEMBER_ME_KEY+\"username:\"+username);\n    }\n\n  \n  \t//由于PersistentRememberMeToken没实现序列化接口，这里只能用Hash来存储了，所以单独编写一个set和get操作\n    private PersistentRememberMeToken getToken(String series){\n        Map<Object, Object> map = template.opsForHash().entries(REMEMBER_ME_KEY+series);\n        if(map.isEmpty()) return null;\n        return new PersistentRememberMeToken(\n                (String) map.get(\"username\"),\n                (String) map.get(\"series\"),\n                (String) map.get(\"tokenValue\"),\n                new Date(Long.parseLong((String) map.get(\"date\"))));\n    }\n\n    private void setToken(PersistentRememberMeToken token){\n        Map<String, String> map = new HashMap<>();\n        map.put(\"username\", token.getUsername());\n        map.put(\"series\", token.getSeries());\n        map.put(\"tokenValue\", token.getTokenValue());\n        map.put(\"date\", \"\"+token.getDate().getTime());\n        template.opsForHash().putAll(REMEMBER_ME_KEY+token.getSeries(), map);\n        template.expire(REMEMBER_ME_KEY+token.getSeries(), 1, TimeUnit.DAYS);\n    }\n}\n```\n\n接着把验证Service实现了：\n\n```java\n@Service\npublic class AuthService implements UserDetailsService {\n\n    @Resource\n    UserMapper mapper;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        Account account = mapper.getAccountByUsername(username);\n        if(account == null) throw new UsernameNotFoundException(\"\");\n        return User\n                .withUsername(username)\n                .password(account.getPassword())\n                .roles(account.getRole())\n                .build();\n    }\n}\n```\n\nMapper也安排上：\n\n```java\n@Data\npublic class Account implements Serializable {\n    int id;\n    String username;\n    String password;\n    String role;\n}\n```\n\n```java\n@CacheNamespace(implementation = MybatisRedisCache.class)\n@Mapper\npublic interface UserMapper {\n\n    @Select(\"select * from users where username = #{username}\")\n    Account getAccountByUsername(String username);\n}\n```\n\n最后配置文件配一波：\n\n```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n            .authorizeRequests()\n            .anyRequest().authenticated()\n            .and()\n            .formLogin()\n            .and()\n            .rememberMe()\n            .tokenRepository(repository);\n}\n\n@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth\n            .userDetailsService(service)\n            .passwordEncoder(new BCryptPasswordEncoder());\n}\n```\n\nOK，启动服务器验证一下吧。\n\n***\n\n## 三大缓存问题\n\n\\*\\*注意：\\*\\*这部分内容作为选学内容。\n\n虽然我们可以利用缓存来大幅度提升我们程序的数据获取效率，但是使用缓存也存在着一些潜在的问题。\n\n### 缓存穿透\n\n![img](https://mydlq-club.oss-cn-beijing.aliyuncs.com/images/springboot-cache-redis-1004.png?x-oss-process=style/shuiyin)\n\n当我们去查询一个一定不存在的数据，比如Mybatis在缓存是未命中的情况下需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。\n\n这显然是很浪费资源的，我们希望的是，如果这个数据不存在，为什么缓存这一层不直接返回空呢，这时就不必再去查数据库了，但是也有一个问题，缓存不去查数据库怎么知道数据库里面到底有没有这个数据呢？\n\n这时我们就可以使用布隆过滤器来进行判断。什么是布隆过滤器？（当然不是打辅助的那个布隆，只不过也挺像，辅助布隆也是挡子弹的）\n\n![点击查看图片来源](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201903%2F20190321142642446276.png\\&refer=http%3A%2F%2Fimage.bubuko.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1644902390\\&t=4f0440b0357965ead1fa34fb27513927)\n\n使用布隆过滤器，能够告诉你某样东西一定不存在或是某样东西可能存在。\n\n布隆过滤器本质是一个存放二进制位的bit数组，如果我们要添加一个值到布隆过滤器中，我们需要使用N个不同的哈希函数来生成N个哈希值，并对每个生成的哈希值指向的bit位置1，如上图所示，一共添加了三个值abc。\n\n接着我们给一个d，那么这时就可以进行判断，如果说d计算的N个哈希值的位置上都是1，那么就说明d可能存在；这时候又来了个e，计算后我们发现有一个位置上的值是0，这时就可以直接断定e一定不存在。\n\n### 缓存击穿\n\n![img](https://mydlq-club.oss-cn-beijing.aliyuncs.com/images/springboot-cache-redis-1005.png?x-oss-process=style/shuiyin)\n\n某个 Key 属于热点数据，访问非常频繁，同一时间很多人都在访问，在这个Key失效的瞬间，大量的请求到来，这时发现缓存中没有数据，就全都直接请求数据库，相当于击穿了缓存屏障，直接攻击整个系统核心。\n\n这种情况下，最好的解决办法就是不让Key那么快过期，如果一个Key处于高频访问，那么可以适当地延长过期时间。\n\n### 缓存雪崩\n\n![img](https://mydlq-club.oss-cn-beijing.aliyuncs.com/images/springboot-cache-redis-1006.png?x-oss-process=style/shuiyin)\n\n当你的Redis服务器炸了或是大量的Key在同一时间过期，这时相当于缓存直接GG了，那么如果这时又有很多的请求来访问不同的数据，同一时间内缓存服务器就得向数据库大量发起请求来重新建立缓存，很容易把数据库也搞GG。\n\n解决这种问题最好的办法就是设置高可用，也就是搭建Redis集群，当然也可以采取一些服务熔断降级机制，这些内容我们会在SpringCloud阶段再进行探讨。\n","categories":["Java","Springboot笔记"]},{"title":"SpringBoot笔记（三）","url":"/2023/01/24/99650712d4104d00a2c4a5ccfc3f525e/","content":"\n![点击查看源网页](/resources/7ca673e466a245368225bd1628da34cc.jpg)\n\n# Redis数据库\n\n\\*\\*灵魂拷问：\\*\\*不是学了MySQL吗，存数据也能存了啊，又学一个数据库干嘛？\n\n在前面我们学习了MySQL数据库，它是一种传统的关系型数据库，我们可以使用MySQL来更好地管理和组织我们的数据，虽然在小型Web应用下，只需要一个MySQL+Mybatis自带的缓存系统就可以胜任大部分的数据存储工作。但是MySQL的缺点也很明显，它的数据始终是存储在硬盘上的，对于我们的用户信息这种不需要经常发生修改的内容，使用MySQL存储确实可以，但是如果是快速更新或是频繁使用的数据，比如微博热搜、双十一秒杀，这些数据不仅要求服务器需要提供更高的响应速度，而且还需要面对短时间内上百万甚至上千万次访问，而MySQL的磁盘IO读写性能完全不能满足上面的需求，能够满足上述需求的只有内存，因为速度远高于磁盘IO。\n\n因此，我们需要寻找一种更好的解决方案，来存储上述这类特殊数据，弥补MySQL的不足，以应对大数据时代的重重考验。\n\n## NoSQL概论\n\nNoSQL全称是Not Only SQL（不仅仅是SQL）它是一种非关系型数据库，相比传统SQL关系型数据库，它：\n\n*   不保证关系数据的ACID特性\n\n*   并不遵循SQL标准\n\n*   消除数据之间关联性\n\n乍一看，这玩意不比MySQL垃圾？我们再来看看它的优势：\n\n*   远超传统关系型数据库的性能\n\n*   非常易于扩展\n\n*   数据模型更加灵活\n\n*   高可用\n\n这样，NoSQL的优势一下就出来了，这不就是我们正要寻找的高并发海量数据的解决方案吗！\n\nNoSQL数据库分为以下几种：\n\n*   \\*\\*键值存储数据库：\\*\\*所有的数据都是以键值方式存储的，类似于我们之前学过的HashMap，使用起来非常简单方便，性能也非常高。\n\n*   \\*\\*列存储数据库：\\*\\*这部分数据库通常是用来应对分布式存储的海量数据。键仍然存在，但是它们的特点是指向了多个列。\n\n*   \\*\\*文档型数据库：\\*\\*它是以一种特定的文档格式存储数据，比如JSON格式，在处理网页等复杂数据时，文档型数据库比传统键值数据库的查询效率更高。\n\n*   \\*\\*图形数据库：\\*\\*利用类似于图的数据结构存储数据，结合图相关算法实现高速访问。\n\n其中我们要学习的Redis数据库，就是一个开源的**键值存储数据库**，所有的数据全部存放在内存中，它的性能大大高于磁盘IO，并且它也可以支持数据持久化，他还支持横向扩展、主从复制等。\n\n实际生产中，我们一般会配合使用Redis和MySQL以发挥它们各自的优势，取长补短。\n\n## Redis安装和部署\n\n我们这里还是使用Windows安装Redis服务器，但是官方指定是安装到Linux服务器上，我们后面学习了Linux之后，再来安装到Linux服务器上。由于官方并没有提供Windows版本的安装包，我们需要另外寻找：\n\n*   官网地址：<ins><https://redis.io></ins>\n\n*   GitHub Windows版本维护地址：<ins><https://github.com/tporadowski/redis/releases></ins>\n\n***\n\n## 基本操作\n\n在我们之前使用MySQL时，我们需要先在数据库中创建一张表，并定义好表的每个字段内容，最后再通过`insert`语句向表中添加数据，而Redis并不具有MySQL那样的严格的表结构，Redis是一个键值数据库，因此，可以像Map一样的操作方式，通过键值对向Redis数据库中添加数据（操作起来类似于向一个HashMap中存放数据）\n\n在Redis下，数据库是由一个整数索引标识，而不是由一个数据库名称。 默认情况下，我们连接Redis数据库之后，会使用0号数据库，我们可以通过Redis配置文件中的参数来修改数据库总数，默认为16个。\n\n我们可以通过`select`语句进行切换：\n\n select 序号;\n\n### 数据操作\n\n我们来看看，如何向Redis数据库中添加数据：\n\n set <key> <value>\n -- 一次性多个\n mset \\[<key> <value>]...\n\n所有存入的数据默认会以**字符串**的形式保存，键值具有一定的命名规范，以方便我们可以快速定位我们的数据属于哪一个部分，比如用户的数据：\n\n -- 使用冒号来进行板块分割，比如下面表示用户XXX的信息中的name属性，值为lbw\n set user:info:用户ID:name lbw\n\n我们可以通过键值获取存入的值：\n\n get <key>\n\n你以为Redis就仅仅只是存取个数据吗？它还支持数据的过期时间设定：\n\n set <key> <value> EX 秒\n set <key> <value> PX 毫秒\n\n当数据到达指定时间时，会被自动删除。我们也可以单独为其他的键值对设置过期时间：\n\n expire <key> 秒\n\n通过下面的命令来查询某个键值对的过期时间还剩多少：\n\n ttl <key>\n -- 毫秒显示\n pttl <key>\n -- 转换为永久\n persist <key>\n\n那么当我们想直接删除这个数据时呢？直接使用：\n\n del <key>...\n\n删除命令可以同时拼接多个键值一起删除。\n\n当我们想要查看数据库中所有的键值时：\n\nkeys \\*\n\n也可以查询某个键是否存在：\n\nexists \\<key>...\n\n还可以随机拿一个键：\n\nrandomkey\n\n我们可以将一个数据库中的内容移动到另一个数据库中：\n\nmove \\<key> 数据库序号\n\n修改一个键为另一个键：\n\nrename \\<key> <新的名称>\n\\-- 下面这个会检查新的名称是否已经存在\nrenamex \\<key> <新的名称>\n\n如果存放的数据是一个数字，我们还可以对其进行自增自减操作：\n\n\\-- 等价于a = a + 1\nincr \\<key>\n\\-- 等价于a = a + b\nincrby \\<key> b\n\\-- 等价于a = a - 1\ndecr \\<key>\n\n最后就是查看值的数据类型：\n\ntype \\<key>\n\nRedis数据库也支持多种数据类型，但是它更偏向于我们在Java中认识的那些数据类型。\n\n## 数据类型介绍\n\n一个键值对除了存储一个String类型的值以外，还支持多种常用的数据类型。\n\n### Hash\n\n这种类型本质上就是一个HashMap，也就是嵌套了一个HashMap罢了，在Java中就像这样：\n\n\\#Redis默认存String类似于这样：\nMap\\<String, String> hash = new HashMap<>();\n\\#Redis存Hash类型的数据类似于这样：\nMap\\<String, Map\\<String, String>> hash = new HashMap<>();\n\n它比较适合存储类这样的数据，由于值本身又是一个Map，因此我们可以在此Map中放入类的各种属性和值，以实现一个Hash数据类型存储一个类的数据。\n\n我们可以像这样来添加一个Hash类型的数据：\n\nhset \\<key> \\[<字段> <值>]...\n\n我们可以直接获取：\n\nhget \\<key> <字段>\n\\-- 如果想要一次性获取所有的字段和值\nhgetall \\<key>\n\n同样的，我们也可以判断某个字段是否存在：\n\nhexists \\<key> <字段>\n\n删除Hash中的某个字段：\n\nhdel \\<key>\n\n我们发现，在操作一个Hash时，实际上就是我们普通操作命令前面添加一个`h`，这样就能以同样的方式去操作Hash里面存放的键值对了，这里就不一一列出所有的操作了。我们来看看几个比较特殊的。\n\n我们现在想要知道Hash中一共存了多少个键值对：\n\nhlen \\<key>\n\n我们也可以一次性获取所有字段的值：\n\nhvals \\<key>\n\n唯一需要注意的是，Hash中只能存放字符串值，不允许出现嵌套的的情况。\n\n### List\n\n我们接着来看List类型，实际上这个猜都知道，它就是一个列表，而列表中存放一系列的字符串，它支持随机访问，支持双端操作，就像我们使用Java中的LinkedList一样。\n\n我们可以直接向一个已存在或是不存在的List中添加数据，如果不存在，会自动创建：\n\n\\-- 向列表头部添加元素\nlpush \\<key> \\<element>...\n\\-- 向列表尾部添加元素\nrpush \\<key> \\<element>...\n\\-- 在指定元素前面/后面插入元素\nlinsert \\<key> before/after <指定元素> \\<element>\n\n同样的，获取元素也非常简单：\n\n\\-- 根据下标获取元素\nlindex \\<key> <下标>\n\\-- 获取并移除头部元素\nlpop \\<key>\n\\-- 获取并移除尾部元素\nrpop \\<key>\n\\-- 获取指定范围内的\nlrange \\<key> start stop\n\n注意下标可以使用负数来表示从后到前数的数字（Python：搁这儿抄呢是吧）:\n\n\\-- 获取列表a中的全部元素\nlrange a 0 -1\n\n没想到吧，push和pop还能连着用呢：\n\n\\-- 从前一个数组的最后取一个数出来放到另一个数组的头部，并返回元素\nrpoplpush 当前数组 目标数组\n\n它还支持阻塞操作，类似于生产者和消费者，比如我们想要等待列表中有了数据后再进行pop操作：\n\n\\-- 如果列表中没有元素，那么就等待，如果指定时间（秒）内被添加了数据，那么就执行pop操作，如果超时就作废，支持同时等待多个列表，只要其中一个列表有元素了，那么就能执行\nblpop \\<key>... timeout\n\n### Set和SortedSet\n\nSet集合其实就像Java中的HashSet一样（我们在JavaSE中已经讲解过了，HashSet本质上就是利用了一个HashMap，但是Value都是固定对象，仅仅是Key不同）它不允许出现重复元素，不支持随机访问，但是能够利用Hash表提供极高的查找效率。\n\n向Set中添加一个或多个值：\n\nsadd \\<key> \\<value>...\n\n查看Set集合中有多少个值：\n\nscard \\<key>\n\n判断集合中是否包含：\n\n\\-- 是否包含指定值\nsismember \\<key> \\<value>\n\\-- 列出所有值\nsmembers \\<key>\n\n集合之间的运算：\n\n\\-- 集合之间的差集\nsdiff \\<key1> \\<key2>\n\\-- 集合之间的交集\nsinter \\<key1> \\<key2>\n\\-- 求并集\nsunion \\<key1> \\<key2>\n\\-- 将集合之间的差集存到目标集合中\nsdiffstore 目标 \\<key1> \\<key2>\n\\-- 同上\nsinterstore 目标 \\<key1> \\<key2>\n\\-- 同上\nsunionstore 目标 \\<key1> \\<key2>\n\n移动指定值到另一个集合中：\n\nsmove \\<key> 目标 value\n\n移除操作：\n\n\\-- 随机移除一个幸运儿\nspop \\<key>\n\\-- 移除指定\nsrem \\<key> \\<value>...\n\n那么如果我们要求Set集合中的数据按照我们指定的顺序进行排列怎么办呢？这时就可以使用SortedSet，它支持我们为每个值设定一个分数，分数的大小决定了值的位置，所以它是有序的。\n\n我们可以添加一个带分数的值：\n\nzadd \\<key> \\[\\<value> \\<score>]...\n\n同样的：\n\n\\-- 查询有多少个值\nzcard \\<key>\n\\-- 移除\nzrem \\<key> \\<value>...\n\\-- 获取区间内的所有\nzrange \\<key> start stop\n\n由于所有的值都有一个分数，我们也可以根据分数段来获取：\n\n\\-- 通过分数段查看\nzrangebyscore \\<key> start stop \\[withscores] \\[limit]\n\\-- 统计分数段内的数量\nzcount \\<key>  start stop\n\\-- 根据分数获取指定值的排名\nzrank \\<key> \\<value>\n\n<ins><https://www.jianshu.com/p/32b9fe8c20e1></ins>\n\n有关Bitmap、HyperLogLog和Geospatial等数据类型，这里暂时不做介绍，感兴趣可以自行了解。\n\n***\n\n## 持久化\n\n我们知道，Redis数据库中的数据都是存放在内存中，虽然很高效，但是这样存在一个非常严重的问题，如果突然停电，那我们的数据不就全部丢失了吗？它不像硬盘上的数据，断电依然能够保存。\n\n这个时候我们就需要持久化，我们需要将我们的数据备份到硬盘上，防止断电或是机器故障导致的数据丢失。\n\n持久化的实现方式有两种方案：一种是直接保存当前**已经存储的数据**，相当于复制内存中的数据到硬盘上，需要恢复数据时直接读取即可；还有一种就是保存我们存放数据的**所有过程**，需要恢复数据时，只需要将整个过程完整地重演一遍就能保证与之前数据库中的内容一致。\n\n### RDB\n\nRDB就是我们所说的第一种解决方案，那么如何将数据保存到本地呢？我们可以使用命令：\n\nsave\n\\-- 注意上面这个命令是直接保存，会占用一定的时间，也可以单独开一个子进程后台执行保存\nbgsave\n\n执行后，会在服务端目录下生成一个dump.rdb文件，而这个文件中就保存了内存中存放的数据，当服务器重启后，会自动加载里面的内容到对应数据库中。保存后我们可以关闭服务器：\n\nshutdown\n\n重启后可以看到数据依然存在。\n\n![点击查看图片来源](/resources/926e1ae4687446ff819d97edf5310d92.jpg)\n\n虽然这种方式非常方便，但是由于会完整复制所有的数据，如果数据库中的数据量比较大，那么复制一次可能就需要花费大量的时间，所以我们可以每隔一段时间自动进行保存；还有就是，如果我们基本上都是在进行读操作，而没有进行写操作，实际上只需要偶尔保存一次即可，因为数据几乎没有怎么变化，可能两次保存的都是一样的数据。\n\n我们可以在配置文件中设置自动保存，并设定在一段时间内写入多少数据时，执行一次保存操作：\n\nsave 300 10 # 300秒（5分钟）内有10个写入\nsave 60 10000 # 60秒（1分钟）内有10000个写入\n\n配置的save使用的都是bgsave后台执行。\n\n### AOF\n\n虽然RDB能够很好地解决数据持久化问题，但是它的缺点也很明显：每次都需要去完整地保存整个数据库中的数据，同时后台保存过程中也会产生额外的内存开销，最严重的是它并不是实时保存的，如果在自动保存触发之前服务器崩溃，那么依然会导致少量数据的丢失。\n\n而AOF就是另一种方式，它会以日志的形式将我们每次执行的命令都进行保存，服务器重启时会将所有命令依次执行，通过这种重演的方式将数据恢复，这样就能很好解决实时性存储问题。\n\n![rdb和aof区别](/resources/d3de1807ac4d4a22a9a9a63c524d5053.png)\n\n但是，我们多久写一次日志呢？我们可以自己配置保存策略，有三种策略：\n\n*   always：每次执行写操作都会保存一次\n\n*   everysec：每秒保存一次（默认配置），这样就算丢失数据也只会丢一秒以内的数据\n\n*   no：看系统心情保存\n\n可以在配置文件中配置：\n\n\\# 注意得改成也是\nappendonly yes\n\\# appendfsync always\nappendfsync everysec\n\\# appendfsync no\n\n重启服务器后，可以看到服务器目录下多了一个`appendonly.aof`文件，存储的就是我们执行的命令。\n\nAOF的缺点也很明显，每次服务器启动都需要进行过程重演，相比RDB更加耗费时间，并且随着我们的操作变多，不断累计，可能到最后我们的aof文件会变得无比巨大，我们需要一个改进方案来优化这些问题。\n\nRedis有一个AOF重写机制进行优化，比如我们执行了这样的语句：\n\nlpush test 666\nlpush test 777\nlpush test 888\n\n实际上用一条语句也可以实现：\n\nlpush test 666 777 888\n\n正是如此，只要我们能够保证最终的重演结果和原有语句的结果一致，无论语句如何修改都可以，所以我们可以通过这种方式将多条语句进行压缩。\n\n我们可以输入命令来手动执行重写操作：\n\nbgrewriteaof\n\n或是在配置文件中配置自动重写：\n\n\\# 百分比计算，这里不多介绍\nauto-aof-rewrite-percentage 100\n\\# 当达到这个大小时，触发自动重写\nauto-aof-rewrite-min-size 64mb\n\n至此，我们就完成了两种持久化方案的介绍，最后我们再来进行一下总结：\n\n*   AOF：\n\n    *   优点：存储速度快、消耗资源少、支持实时存储\n\n    *   缺点：加载速度慢、数据体积大\n*   RDB：\n\n    *   优点：加载速度快、数据体积小\n\n    *   缺点：存储速度慢大量消耗资源、会发生数据丢失\n\n***\n\n## 事务和锁机制\n\n和MySQL一样，在Redis中也有事务机制，当我们需要保证多条命令一次性完整执行而中途不受到其他命令干扰时，就可以使用事务机制。\n\n我们可以使用命令来直接开启事务：\n\nmulti\n\n当我们输入完所有要执行的命令时，可以使用命令来立即执行事务：\n\nexec\n\n我们也可以中途取消事务：\n\ndiscard\n\n实际上整个事务是创建了一个命令队列，它不像MySQL那种在事务中也能单独得到结果，而是我们提前将所有的命令装在队列中，但是并不会执行，而是等我们提交事务的时候再统一执行。\n\n### 锁\n\n又提到锁了，实际上这个概念对我们来说已经不算是陌生了。实际上在Redis中也会出现多个命令同时竞争同一个数据的情况，比如现在有两条命令同时执行，他们都要去修改a的值，那么这个时候就只能动用锁机制来保证同一时间只能有一个命令操作。\n\n虽然Redis中也有锁机制，但是它是一种乐观锁，不同于MySQL，我们在MySQL中认识的锁是悲观锁，那么什么是乐观锁什么是悲观锁呢？\n\n*   悲观锁：时刻认为别人会来抢占资源，禁止一切外来访问，直到释放锁，具有强烈的排他性质。\n\n*   乐观锁：并不认为会有人来抢占资源，所以会直接对数据进行操作，在操作时再去验证是否有其他人抢占资源。\n\nRedis中可以使用watch来监视一个目标，如果执行事务之前被监视目标发生了修改，则取消本次事务：\n\nwatch\n\n我们可以开两个客户端进行测试。\n\n取消监视可以使用：\n\nunwatch\n\n至此，Redis的基础内容就讲解完毕了，在之后的SpringCloud阶段，我们还会去讲解集群相关的知识，包括主从复制、哨兵模式等。\n\n***\n\n## 使用Java与Redis交互\n\n既然了解了如何通过命令窗口操作Redis数据库，那么我们如何使用Java来操作呢？\n\n这里我们需要使用到Jedis框架，它能够实现Java与Redis数据库的交互，依赖：\n\n\\<dependencies>\n\\<dependency>\n\\<groupId>redis.clients\\</groupId>\n\\<artifactId>jedis\\</artifactId>\n\\<version>4.0.0\\</version>\n\\</dependency>\n\\</dependencies>\n\n### 基本操作\n\n我们来看看如何连接Redis数据库，非常简单，只需要创建一个对象即可：\n\npublic static void main(String\\[] args) {\n//创建Jedis对象\nJedis jedis = new Jedis(\"localhost\", 6379);\n\n    //使用之后关闭连接\n    jedis.close();\n\n}\n\n通过Jedis对象，我们就可以直接调用命令的同名方法来执行Redis命令了，比如：\n\npublic static void main(String\\[] args) {\n//直接使用try-with-resouse，省去close\ntry(Jedis jedis = new Jedis(\"192.168.10.3\", 6379)){\njedis.set(\"test\", \"lbwnb\");   //等同于 set test lbwnb 命令\nSystem.out.println(jedis.get(\"test\"));  //等同于 get test 命令\n}\n}\n\nHash类型的数据也是这样：\n\npublic static void main(String\\[] args) {\ntry(Jedis jedis = new Jedis(\"192.168.10.3\", 6379)){\njedis.hset(\"hhh\", \"name\", \"sxc\");   //等同于 hset hhh name sxc\njedis.hset(\"hhh\", \"sex\", \"19\");    //等同于 hset hhh age 19\njedis.hgetAll(\"hhh\").forEach((k, v) -> System.out.println(k+\": \"+v));\n}\n}\n\n我们接着来看看列表操作：\n\npublic static void main(String\\[] args) {\ntry(Jedis jedis = new Jedis(\"192.168.10.3\", 6379)){\njedis.lpush(\"mylist\", \"111\", \"222\", \"333\");  //等同于 lpush mylist 111 222 333 命令\njedis.lrange(\"mylist\", 0, -1)\n.forEach(System.out::println);    //等同于 lrange mylist 0 -1\n}\n}\n\n实际上我们只需要按照对应的操作去调用同名方法即可，所有的类型封装Jedis已经帮助我们完成了。\n\n### SpringBoot整合Redis\n\n我们接着来看如何在SpringBoot项目中整合Redis操作框架，只需要一个starter即可，但是它底层没有用Jedis，而是Lettuce：\n\n\\<dependency>\n\\<groupId>org.springframework.boot\\</groupId>\n\\<artifactId>spring-boot-starter-data-redis\\</artifactId>\n\\</dependency>\n\nstarter提供的默认配置会去连接本地的Redis服务器，并使用0号数据库，当然你也可以手动进行修改：\n\nspring:\nredis:\n\\#Redis服务器地址\nhost: 192.168.10.3\n\\#端口\nport: 6379\n\\#使用几号数据库\ndatabase: 0\n\nstarter已经给我们提供了两个默认的模板类：\n\n@Configuration(\nproxyBeanMethods = false\n)\n@ConditionalOnClass({RedisOperations.class})\n@EnableConfigurationProperties({RedisProperties.class})\n@Import({LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class})\npublic class RedisAutoConfiguration {\npublic RedisAutoConfiguration() {\n}\n@Bean\n@ConditionalOnMissingBean(\nname = {\"redisTemplate\"}\n)\n@ConditionalOnSingleCandidate(RedisConnectionFactory.class)\npublic RedisTemplate\\<Object, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\nRedisTemplate\\<Object, Object> template = new RedisTemplate();\ntemplate.setConnectionFactory(redisConnectionFactory);\nreturn template;\n}\n@Bean\n@ConditionalOnMissingBean\n@ConditionalOnSingleCandidate(RedisConnectionFactory.class)\npublic StringRedisTemplate stringRedisTemplate(RedisConnectionFactory redisConnectionFactory) {\nreturn new StringRedisTemplate(redisConnectionFactory);\n}\n}\n\n那么如何去使用这两个模板类呢？我们可以直接注入`StringRedisTemplate`来使用模板：\n\n@SpringBootTest\nclass SpringBootTestApplicationTests {\n@Autowired\nStringRedisTemplate template;\n@Test\nvoid contextLoads() {\nValueOperations\\<String, String> operations = template.opsForValue();\noperations.set(\"c\", \"xxxxx\");   //设置值\nSystem.out.println(operations.get(\"c\"));   //获取值\n\n        template.delete(\"c\");    //删除键\n        System.out.println(template.hasKey(\"c\"));   //判断是否包含键\n    }\n\n}\n\n实际上所有的值的操作都被封装到了`ValueOperations`对象中，而普通的键操作直接通过模板对象就可以使用了，大致使用方式其实和Jedis一致。\n\n我们接着来看看事务操作，由于Spring没有专门的Redis事务管理器，所以只能借用JDBC提供的，只不过无所谓，正常情况下反正我们也要用到这玩意：\n\n\\<dependency>\n\\<groupId>org.springframework.boot\\</groupId>\n\\<artifactId>spring-boot-starter-jdbc\\</artifactId>\n\\</dependency>\n\\<dependency>\n\\<groupId>mysql\\</groupId>\n\\<artifactId>mysql-connector-java\\</artifactId>\n\\</dependency>\n\n@Service\npublic class RedisService {\n@Resource\nStringRedisTemplate template;\n@PostConstruct\npublic void init(){\ntemplate.setEnableTransactionSupport(true);   //需要开启事务\n}\n@Transactional    //需要添加此注解\npublic void test(){\ntemplate.multi();\ntemplate.opsForValue().set(\"d\", \"xxxxx\");\ntemplate.exec();\n}\n}\n\n我们还可以为RedisTemplate对象配置一个Serializer来实现对象的JSON存储：\n\n@Test\nvoid contextLoad2() {\n//注意Student需要实现序列化接口才能存入Redis\ntemplate.opsForValue().set(\"student\", new Student());\nSystem.out.println(template.opsForValue().get(\"student\"));\n}\n\n***\n\n## 使用Redis做缓存\n\n我们可以轻松地使用Redis来实现一些框架的缓存和其他存储。\n\n### Mybatis二级缓存\n\n还记得我们在学习Mybatis讲解的缓存机制吗，我们当时介绍了二级缓存，它是Mapper级别的缓存，能够作用与所有会话。但是当时我们提出了一个问题，由于Mybatis的默认二级缓存只能是单机的，如果存在多台服务器访问同一个数据库，实际上二级缓存只会在各自的服务器上生效，但是我们希望的是多台服务器都能使用同一个二级缓存，这样就不会造成过多的资源浪费。\n\n![img](/resources/113967148854480faf118702b7de1421.png)\n\n我们可以将Redis作为Mybatis的二级缓存，这样就能实现多台服务器使用同一个二级缓存，因为它们只需要连接同一个Redis服务器即可，所有的缓存数据全部存储在Redis服务器上。我们需要手动实现Mybatis提供的Cache接口，这里我们简单编写一下：\n\n//实现Mybatis的Cache接口\npublic class RedisMybatisCache implements Cache {\nprivate final String id;\nprivate static RedisTemplate\\<Object, Object> template;\n//注意构造方法必须带一个String类型的参数接收id\npublic RedisMybatisCache(String id){\nthis.id = id;\n}\n//初始化时通过配置类将RedisTemplate给过来\npublic static void setTemplate(RedisTemplate\\<Object, Object> template) {\nRedisMybatisCache.template = template;\n}\n@Override\npublic String getId() {\nreturn id;\n}\n@Override\npublic void putObject(Object o, Object o1) {\n//这里直接向Redis数据库中丢数据即可，o就是Key，o1就是Value，60秒为过期时间\ntemplate.opsForValue().set(o, o1, 60, TimeUnit.SECONDS);\n}\n@Override\npublic Object getObject(Object o) {\n//这里根据Key直接从Redis数据库中获取值即可\nreturn template.opsForValue().get(o);\n}\n@Override\npublic Object removeObject(Object o) {\n//根据Key删除\nreturn template.delete(o);\n}\n@Override\npublic void clear() {\n//由于template中没封装清除操作，只能通过connection来执行\ntemplate.execute((RedisCallback\\<Void>) connection -> {\n//通过connection对象执行清空操作\nconnection.flushDb();\nreturn null;\n});\n}\n@Override\npublic int getSize() {\n//这里也是使用connection对象来获取当前的Key数量\nreturn template.execute(RedisServerCommands::dbSize).intValue();\n}\n}\n\n缓存类编写完成后，我们接着来编写配置类：\n\n@Configuration\npublic class MainConfiguration {\n@Resource\nRedisTemplate\\<Object, Object> template;\n@PostConstruct\npublic void init(){\n//把RedisTemplate给到RedisMybatisCache\nRedisMybatisCache.setTemplate(template);\n}\n}\n\n最后我们在Mapper上启用此缓存即可：\n\n//只需要修改缓存实现类implementation为我们的RedisMybatisCache即可\n@CacheNamespace(implementation = RedisMybatisCache.class)\n@Mapper\npublic interface MainMapper {\n@Select(\"select name from student where sid = 1\")\nString getSid();\n}\n\n最后我们提供一个测试用例来查看当前的二级缓存是否生效：\n\n@SpringBootTest\nclass SpringBootTestApplicationTests {\n@Resource\nMainMapper mapper;\n@Test\nvoid contextLoads() {\nSystem.out.println(mapper.getSid());\nSystem.out.println(mapper.getSid());\nSystem.out.println(mapper.getSid());\n}\n}\n\n手动使用客户端查看Redis数据库，可以看到已经有一条Mybatis生成的缓存数据了。\n\n### Token持久化存储\n\n我们之前使用SpringSecurity时，remember-me的Token是支持持久化存储的，而我们当时是存储在数据库中，那么Token信息能否存储在缓存中呢，当然也是可以的，我们可以手动实现一个：\n\n//实现PersistentTokenRepository接口\n@Component\npublic class RedisTokenRepository implements PersistentTokenRepository {\n//Key名称前缀，用于区分\nprivate final static String REMEMBER\\_ME\\_KEY = \"spring:security:rememberMe:\";\n@Resource\nRedisTemplate\\<Object, Object> template;\n@Override\npublic void createNewToken(PersistentRememberMeToken token) {\n//这里要放两个，一个存seriesId->Token，一个存username->seriesId，因为删除时是通过username删除\ntemplate.opsForValue().set(REMEMBER\\_ME\\_KEY+\"username:\"+token.getUsername(), token.getSeries());\ntemplate.expire(REMEMBER\\_ME\\_KEY+\"username:\"+token.getUsername(), 1, TimeUnit.DAYS);\nthis.setToken(token);\n}\n//先获取，然后修改创建一个新的，再放入\n@Override\npublic void updateToken(String series, String tokenValue, Date lastUsed) {\nPersistentRememberMeToken token = this.getToken(series);\nif(token != null)\nthis.setToken(new PersistentRememberMeToken(token.getUsername(), series, tokenValue, lastUsed));\n}\n@Override\npublic PersistentRememberMeToken getTokenForSeries(String seriesId) {\nreturn this.getToken(seriesId);\n}\n//通过username找seriesId直接删除这两个\n@Override\npublic void removeUserTokens(String username) {\nString series = (String) template.opsForValue().get(REMEMBER\\_ME\\_KEY+\"username:\"+username);\ntemplate.delete(REMEMBER\\_ME\\_KEY+series);\ntemplate.delete(REMEMBER\\_ME\\_KEY+\"username:\"+username);\n}\n\n    //由于PersistentRememberMeToken没实现序列化接口，这里只能用Hash来存储了，所以单独编写一个set和get操作\n    private PersistentRememberMeToken getToken(String series){\n        Map&lt;Object, Object&gt; map = template.opsForHash().entries(REMEMBER\\_ME\\_KEY+series);\n        if(map.isEmpty()) return null;\n        return new PersistentRememberMeToken(\n                (String) map.get(\"username\"),\n                (String) map.get(\"series\"),\n                (String) map.get(\"tokenValue\"),\n                new Date(Long.parseLong((String) map.get(\"date\"))));\n    }\n    private void setToken(PersistentRememberMeToken token){\n        Map&lt;String, String&gt; map = new HashMap<>();\n        map.put(\"username\", token.getUsername());\n        map.put(\"series\", token.getSeries());\n        map.put(\"tokenValue\", token.getTokenValue());\n        map.put(\"date\", \"\"+token.getDate().getTime());\n        template.opsForHash().putAll(REMEMBER\\_ME\\_KEY+token.getSeries(), map);\n        template.expire(REMEMBER\\_ME\\_KEY+token.getSeries(), 1, TimeUnit.DAYS);\n    }\n\n}\n\n接着把验证Service实现了：\n\n@Service\npublic class AuthService implements UserDetailsService {\n@Resource\nUserMapper mapper;\n@Override\npublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\nAccount account = mapper.getAccountByUsername(username);\nif(account == null) throw new UsernameNotFoundException(\"\");\nreturn User\n.withUsername(username)\n.password(account.getPassword())\n.roles(account.getRole())\n.build();\n}\n}\n\nMapper也安排上：\n\n@Data\npublic class Account implements Serializable {\nint id;\nString username;\nString password;\nString role;\n}\n\n@CacheNamespace(implementation = MybatisRedisCache.class)\n@Mapper\npublic interface UserMapper {\n@Select(\"select \\* from users where username = #{username}\")\nAccount getAccountByUsername(String username);\n}\n\n最后配置文件配一波：\n\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\nhttp\n.authorizeRequests()\n.anyRequest().authenticated()\n.and()\n.formLogin()\n.and()\n.rememberMe()\n.tokenRepository(repository);\n}\n@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\nauth\n.userDetailsService(service)\n.passwordEncoder(new BCryptPasswordEncoder());\n}\n\nOK，启动服务器验证一下吧。\n\n***\n\n## 三大缓存问题\n\n\\*\\*注意：\\*\\*这部分内容作为选学内容。\n\n虽然我们可以利用缓存来大幅度提升我们程序的数据获取效率，但是使用缓存也存在着一些潜在的问题。\n\n### 缓存穿透\n\n![img](/resources/80e891bed6094e15831aa527f7265f70.png)\n\n当我们去查询一个一定不存在的数据，比如Mybatis在缓存是未命中的情况下需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。\n\n这显然是很浪费资源的，我们希望的是，如果这个数据不存在，为什么缓存这一层不直接返回空呢，这时就不必再去查数据库了，但是也有一个问题，缓存不去查数据库怎么知道数据库里面到底有没有这个数据呢？\n\n这时我们就可以使用布隆过滤器来进行判断。什么是布隆过滤器？（当然不是打辅助的那个布隆，只不过也挺像，辅助布隆也是挡子弹的）\n\n![点击查看图片来源](/resources/a7cb5c87e21745efb988c7adba29627a.jpg)\n\n使用布隆过滤器，能够告诉你某样东西一定不存在或是某样东西可能存在。\n\n布隆过滤器本质是一个存放二进制位的bit数组，如果我们要添加一个值到布隆过滤器中，我们需要使用N个不同的哈希函数来生成N个哈希值，并对每个生成的哈希值指向的bit位置1，如上图所示，一共添加了三个值abc。\n\n接着我们给一个d，那么这时就可以进行判断，如果说d计算的N个哈希值的位置上都是1，那么就说明d可能存在；这时候又来了个e，计算后我们发现有一个位置上的值是0，这时就可以直接断定e一定不存在。\n\n### 缓存击穿\n\n![img](/resources/b283b940d12a43b283e5a515efd77444.png)\n\n某个 Key 属于热点数据，访问非常频繁，同一时间很多人都在访问，在这个Key失效的瞬间，大量的请求到来，这时发现缓存中没有数据，就全都直接请求数据库，相当于击穿了缓存屏障，直接攻击整个系统核心。\n\n这种情况下，最好的解决办法就是不让Key那么快过期，如果一个Key处于高频访问，那么可以适当地延长过期时间。\n\n### 缓存雪崩\n\n![img](/resources/3bce80c7b66147ed86541b538ef19bb0.png)\n\n当你的Redis服务器炸了或是大量的Key在同一时间过期，这时相当于缓存直接GG了，那么如果这时又有很多的请求来访问不同的数据，同一时间内缓存服务器就得向数据库大量发起请求来重新建立缓存，很容易把数据库也搞GG。\n\n解决这种问题最好的办法就是设置高可用，也就是搭建Redis集群，当然也可以采取一些服务熔断降级机制，这些内容我们会在SpringCloud阶段再进行探讨。\n","categories":["Java","Springboot笔记"]},{"title":"SpringBoot笔记（二）","url":"/2023/01/24/e28befc0f1c24c7d99df9847b5d91cb7/","content":"\n# Git版本控制\n\n\\*\\*注意：\\*\\*开始学习之前，确保自己的网络可以畅通的连接Github：<https://github.com，这个是一个国外网站，连起来特别卡，至于用什么方式实现流畅访问，懂的都懂。>\n\n其实版本控制在我们的生活中无处不在，比如你的期末或是毕业答辩论文，由于你写得不规范或是老师不满意，你的老师可能会让你改了又改，于是就会出现下面这种情况：\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20200417%2F1e63ac0f4d8442cb8c9ab1cb73f510c4.jpeg\\&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1644370473\\&t=fa8742db0b4f8db635ec003e37bca76c)\n\n我们手里的论文可能会经过多次版本迭代，最终我们会选取一个最好的版本作为最终提交的论文。使用版本控制不仅仅是为了去记录版本迭代历史，更是为了能够随时回退到之前的版本，实现时间回溯。同时，可能我们的论文是多个人一同完成，那么多个人如何去实现同步，如何保证每个人提交的更改都能够正常汇总，如何解决冲突，这些问题都需要一个优秀的版本控制系统来解决。\n\n## 走进Git\n\n我们开发的项目，也需要一个合适的版本控制系统来协助我们更好地管理版本迭代，而Git正是因此而诞生的（有关Git的历史，这里就不多做阐述了，感兴趣的小伙伴可以自行了解，是一位顶级大佬在一怒之下只花了2周时间用C语言开发的，之后的章节还会遇到他）\n\n首先我们来了解一下Git是如何工作的：\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fblog%2F932856%2F202004%2F932856-20200423143251346-796113044.jpg\\&refer=http%3A%2F%2Fimg2020.cnblogs.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1644374894\\&t=7c2044128f7851ecd92de3c01f0187ca)\n\n可以看到，它大致分为4个板块：\n\n*   工作目录：存放我们正在写的代码（当我们新版本开发完成之后，就可以进行新版本的提交）\n*   暂存区：暂时保存待提交的内容（新版本提交后会存放到本地仓库）\n*   本地仓库：位于我们电脑上的一个版本控制仓库（存放的就是当前项目各个版本代码的增删信息）\n*   远程仓库：位于服务器上的版本控制仓库（服务器上的版本信息可以由本地仓库推送上去，也可以从服务器抓取到本地仓库）\n\n它是一个分布式的控制系统，因此一般情况下我们每个人的电脑上都有一个本地仓库，由大家共同向远程仓库去推送版本迭代信息。\n\n通过这一系列操作，我们就可以实现每开发完一个版本或是一个功能，就提交一次新版本，这样，我们就可以很好地控制项目的版本迭代，想回退到之前的版本随时都可以回退，想查看新版本添加或是删除了什么代码，随时都可以查看。\n\n## 安装Git\n\n首先请前往Git官网去下载最新的安装包：<https://git-scm.com/download/win>\n\n这手把手演示一下如何安装Git环境。\n\n安装完成后，需要设定用户名和邮箱来区分不同的用户：\n\n```shell\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"email@example.com\"\n```\n\n## 基本命令介绍\n\n### 创建本地仓库\n\n我们可以将任意一个文件夹作为一个本地仓库，输入：\n\n```shell\ngit init\n```\n\n输入后，会自动生成一个`.git`目录，注意这个目录是一个隐藏目录，而当前目录就是我们的工作目录。\n\n创建成功后，我们可以查看一下当前的一个状态，输入：\n\n```shell\ngit status\n```\n\n如果已经成功配置为Git本地仓库，那么输入后可以看到：\n\n```shell\nOn branch master\n\nNo commits yet\n```\n\n这表示我们还没有向仓库中提交任何内容，也就是一个空的状态。\n\n### 添加和提交\n\n接着我们来看看，如何使用git来管理我们文档的版本，我们创建一个文本文档，随便写入一点内容，接着输入：\n\n```shell\ngit status\n```\n\n我们会得到如下提示：\n\n```shell\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\thello.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n\n其中Untracked files是未追踪文件的意思，也就是说，如果一个文件处于未追踪状态，那么git不会记录它的变化，始终将其当做一个新创建的文件，这里我们将其添加到暂存区，那么它会自动变为被追踪状态：\n\n```shell\ngit add hello.txt #也可以 add . 一次性添加目录下所有的\n```\n\n再次查看当前状态：\n\n```sh\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\tnew file:   hello.txt\n```\n\n现在文件名称的颜色变成了绿色，并且是处于Changes to be committed下面，因此，我们的hello.txt现在已经被添加到暂存区了。\n\n接着我们来尝试将其提交到Git本地仓库中，注意需要输入提交的描述以便后续查看，比如你这次提交修改了或是新增了哪些内容：\n\n```sh\ngit commit -m 'Hello World'\n```\n\n接着我们可以查看我们的提交记录：\n\n```sh\ngit log\ngit log --graph\n```\n\n我们还可以查看最近一次变更的详细内容：\n\n```sh\ngit show [也可以加上commit ID查看指定的提交记录]\n```\n\n再次查看当前状态，已经是清空状态了：\n\n```sh\nOn branch master\nnothing to commit, working tree clean\n```\n\n接着我们可以尝试修改一下我们的文本文档，由于当前文件已经是被追踪状态，那么git会去跟踪它的变化，如果说文件发生了修改，那么我们再次查看状态会得到下面的结果：\n\n```sh\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   hello.txt\n```\n\n也就是说现在此文件是处于已修改状态，我们如果修改好了，就可以提交我们的新版本到本地仓库中：\n\n```sh\ngit add .\ngit commit -m 'Modify Text'\n```\n\n接着我们来查询一下提交记录，可以看到一共有两次提交记录。\n\n我们可以创建一个`.gitignore`文件来确定一个文件忽略列表，如果忽略列表中的文件存在且不是被追踪状态，那么git不会对其进行任何检查：\n\n```yaml\n# 这样就会匹配所有以txt结尾的文件\n*.txt\n# 虽然上面排除了所有txt结尾的文件，但是这个不排除\n!666.txt\n# 也可以直接指定一个文件夹，文件夹下的所有文件将全部忽略\ntest/\n# 目录中所有以txt结尾的文件，但不包括子目录\nxxx/*.txt\n# 目录中所有以txt结尾的文件，包括子目录\nxxx/**/*.txt\n```\n\n创建后，我们来看看是否还会检测到我们忽略的文件。\n\n### 回滚\n\n当我们想要回退到过去的版本时，就可以执行回滚操作，执行后，可以将工作空间的内容恢复到指定提交的状态：\n\n```sh\ngit reset --hard commitID\n```\n\n执行后，会直接重置为那个时候的状态。再次查看提交日志，我们发现之后的日志全部消失了。\n\n那么要是现在我又想回去呢？我们可以通过查看所有分支的所有操作记录：\n\n```sh\ngit reflog\n```\n\n这样就能找到之前的commitID，再次重置即可。\n\n## 分支\n\n分支就像我们树上的一个树枝一样，它们可能一开始的时候是同一根树枝，但是长着长着就开始分道扬镳了，这就是分支。我们的代码也是这样，可能一开始写基础功能的时候使用的是单个分支，但是某一天我们希望基于这些基础的功能，把我们的项目做成两个不同方向的项目，比如一个方向做Web网站，另一个方向做游戏服务端。\n\n因此，我们可以在一个主干上分出N个分支，分别对多个分支的代码进行维护。\n\n### 创建分支\n\n我们可以通过以下命令来查看当前仓库中存在的分支：\n\n```sh\ngit branch\n```\n\n我们发现，默认情况下是有一个master分支的，并且我们使用的也是master分支，一般情况下master分支都是正式版本的更新，而其他分支一般是开发中才频繁更新的。我们接着来基于当前分支创建一个新的分支：\n\n```sh\ngit branch test\n# 对应的删除分支是\ngit branch -d yyds\n```\n\n现在我们修改一下文件，提交，再查看一下提交日志：\n\n```sh\ngit commit -a -m 'branch master commit'\n```\n\n通过添加-a来自动将未放入暂存区的已修改文件放入暂存区并执行提交操作。查看日志，我们发现现在我们的提交只生效于master分支，而新创建的分支并没有发生修改。\n\n我们将分支切换到另一个分支：\n\n```sh\ngit checkout test\n```\n\n我们会发现，文件变成了此分支创建的时的状态，也就是说，在不同分支下我们的文件内容是相互隔离的。\n\n我们现在再来提交一次变更，会发现它只生效在yyds分支上。我们可以看看当前的分支状态：\n\n```sh\ngit log --all --graph\n```\n\n### 合并分支\n\n我们也可以将两个分支更新的内容最终合并到同一个分支上，我们先切换回主分支：\n\n```sh\ngit checkout master\n```\n\n接着使用分支合并命令：\n\n```sh\ngit merge test\n```\n\n会得到如下提示：\n\n    Auto-merging hello.txt\n    CONFLICT (content): Merge conflict in hello.txt\n    Automatic merge failed; fix conflicts and then commit the result.\n\n在合并过程中产生了冲突，因为两个分支都对hello.txt文件进行了修改，那么现在要合并在一起，到底保留谁的hello文件呢？\n\n我们可以查看一下是哪里发生了冲突：\n\n```sh\ngit diff\n```\n\n因此，现在我们将master分支的版本回退到修改hello.txt之前或是直接修改为最新版本的内容，这样就不会有冲突了，接着再执行一次合并操作，现在两个分支成功合并为同一个分支。\n\n### 变基分支\n\n除了直接合并分支以外，我们还可以进行变基操作，它跟合并不同，合并是分支回到主干的过程，而变基是直接修改分支开始的位置，比如我们希望将yyds变基到master上，那么yyds会将分支起点移动到master最后一次提交位置：\n\n```sh\ngit rebase master\n```\n\n变基后，yyds分支相当于同步了此前master分支的全部提交。\n\n### 优选\n\n我们还可以选择其将他分支上的提交作用于当前分支上，这种操作称为cherrypick：\n\n```sh\ngit cherry-pick <commit id>:单独合并一个提交\n```\n\n这里我们在master分支上创建一个新的文件，提交此次更新，接着通过cherry-pick的方式将此次更新作用于test分支上。\n\n***\n\n## 使用IDEA版本控制\n\n虽然前面我们基本讲解了git的命令行使用方法，但是没有一个图形化界面，始终会感觉到很抽象，所以这里我们使用IDEA来演示，IDEA内部集成了git模块，它可以让我们的git版本管理图形化显示，当然除了IDEA也有一些独立的软件比如：SourceTree（挺好用）\n\n打开IDEA后，找到版本控模块，我们直接点击创建本地仓库，它会自动将当前项目的根目录作为我们的本地仓库，而我们编写的所有代码和项目目录下其他的文件都可以进行版本控制。\n\n我们发现所有项目中正在编写的类文件全部变红了，也就是处于未追踪状态，接着我们进行第一次初始化提交，提交之后我们可以在下方看到所有的本地仓库提交记录。\n\n接着我们来整合一下Web环境，创建新的类之后，IDEA会提示我们是否将文件添加到Git，也就是是否放入暂存区并开启追踪，我们可以直接对比两次代码的相同和不同之处。\n\n接着我们来演示一下分支创建和分支管理。\n\n***\n\n## 远程仓库\n\n远程仓库实际上就是位于服务器上的仓库，它能在远端保存我们的版本历史，并且可以实现多人同时合作编写项目，每个人都能够同步他人的版本，能够看到他人的版本提交，相当于将我们的代码放在服务器上进行托管。\n\n远程仓库有公有和私有的，公有的远程仓库有GitHub、码云、Coding等，他们都是对外开放的，我们注册账号之后就可以使用远程仓库进行版本控制，其中最大的就是GitHub，但是它服务器在国外，我们国内连接可能会有一点卡。私有的一般是GitLab这种自主搭建的远程仓库私服，在公司中比较常用，它只对公司内部开放，不对外开放。\n\n这里我们以GitHub做讲解，官网：<https://github.com，首先完成用户注册。>\n\n### 远程账户认证和推送\n\n接着我们就可以创建一个自定义的远程仓库了。\n\n创建仓库后，我们可以通过推送来将本地仓库中的内容推送到远程仓库。\n\n```sh\ngit remote add 名称 远程仓库地址\ngit push 远程仓库名称 本地分支名称[:远端分支名称]\n```\n\n注意`push`后面两个参数，一个是远端名称，还有一个就是本地分支名称，但是如果本地分支名称和远端分支名称一致，那么不用指定远端分支名称，但是如果我们希望推送的分支在远端没有同名的，那么需要额外指定。推送前需要登陆账户，GitHub现在不允许使用用户名密码验证，只允许使用个人AccessToken来验证身份，所以我们需要先去生成一个Token才可以。\n\n推送后，我们发现远程仓库中的内容已经与我们本地仓库中的内容保持一致了，注意，远程仓库也可以有很多个分支。\n\n但是这样比较麻烦，我们每次都需要去输入用户名和密码，有没有一劳永逸的方法呢？当然，我们也可以使用SSH来实现一次性校验，我们可以在本地生成一个rsa公钥：\n\n```sh\nssh-keygen -t rsa\ncat ~/.ssh/github.pub\n```\n\n接着我们需要在GitHub上上传我们的公钥，当我们再次去访问GitHub时，会自动验证，就无需进行登录了，之后在Linux部分我们会详细讲解SSH的原理。\n\n接着我们修改一下工作区的内容，提交到本地仓库后，再推送到远程仓库，提交的过程中我们注意观察提交记录：\n\n```sh\ngit commit -a -m 'Modify files'\ngit log --all --oneline --graph\ngit push origin master \ngit log --all --oneline --graph\n```\n\n我们可以将远端和本地的分支进行绑定，绑定后就不需要指定分支名称了：\n\n```sh\ngit push --set-upstream origin master:master\ngit push origin\n```\n\n在一个本地仓库对应一个远程仓库的情况下，远程仓库基本上就是纯粹的代码托管了（云盘那种感觉，就纯粹是存你代码的）\n\n### 克隆项目\n\n如果我们已经存在一个远程仓库的情况下，我们需要在远程仓库的代码上继续编写代码，这个时候怎么办呢？\n\n我们可以使用克隆操作来将远端仓库的内容全部复制到本地：\n\n```sh\ngit clone 远程仓库地址\n```\n\n这样本地就能够直接与远程保持同步。\n\n### 抓取、拉取和冲突解决\n\n我们接着来看，如果这个时候，出现多个本地仓库对应一个远程仓库的情况下，比如一个团队里面，N个人都在使用同一个远程仓库，但是他们各自只负责编写和推送自己业务部分的代码，也就是我们常说的协同工作，那么这个时候，我们就需要协调。\n\n比如程序员A完成了他的模块，那么他就可以提交代码并推送到远程仓库，这时程序员B也要开始写代码了，由于远程仓库有其他程序员的提交记录，因此程序员B的本地仓库和远程仓库不一致，这时就需要有先进行pull操作，获取远程仓库中最新的提交：\n\n```sh\ngit fetch 远程仓库 #抓取：只获取但不合并远端分支，后面需要我们手动合并才能提交\ngit pull 远程仓库 #拉取：获取+合并\n```\n\n在程序员B拉取了最新的版本后，再编写自己的代码然后提交就可以实现多人合作编写项目了，并且在拉取过程中就能将别人提交的内容同步到本地，开发效率大大提升。\n\n如果工作中存在不协调的地方，比如现在我们本地有两个仓库，一个仓库去修改hello.txt并直接提交，另一个仓库也修改hello.txt并直接提交，会得到如下错误：\n\n    To https://github.com/xx/xxx.git\n     ! [rejected]        master -> master (fetch first)\n    error: failed to push some refs to 'https://github.com/xx/xxx.git'\n    hint: Updates were rejected because the remote contains work that you do\n    hint: not have locally. This is usually caused by another repository pushing\n    hint: to the same ref. You may want to first integrate the remote changes\n    hint: (e.g., 'git pull ...') before pushing again.\n    hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\n一旦一个本地仓库推送了代码，那么另一个本地仓库的推送会被拒绝，原因是当前文件已经被其他的推送给修改了，我们这边相当于是另一个版本，和之前两个分支合并一样，产生了冲突，因此我们只能去解决冲突问题。\n\n如果远程仓库中的提交和本地仓库中的提交没有去编写同一个文件，那么就可以直接拉取：\n\n```sh\ngit pull 远程仓库\n```\n\n拉取后会自动进行合并，合并完成之后我们再提交即可。\n\n但是如果两次提交都修改了同一个文件，那么就会遇到和多分支合并一样的情况，在合并时会产生冲突，这时就需要我们自己去解决冲突了。\n\n我们可以在IDEA中演示一下，实际开发场景下可能会遇到的问题。\n\n***\n\n至此，Git版本控制就讲解到这里，下一章我们会继续认识一个全新的数据库：Redis。\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic4.zhimg.com%2Fv2-054d8ff6135b3638aca543eff7424f98_1200x500.jpg\\&refer=http%3A%2F%2Fpic4.zhimg.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1644402012\\&t=79c30b8002d088850e33bd90492419b2)\n","categories":["Java","Springboot笔记"]},{"title":"SpringBoot笔记（一）","url":"/2023/01/24/05176b8a3d5648d6b1fe75092e4c293b/","content":"\n![点击查看源网页](/resources/5b7aeada084b43d9b7466f5cdde65ae7.jpg)\n\n# SpringBoot一站式开发\n\n官网：<ins><https://spring.io/projects/spring-boot></ins>\n\n> Spring Boot可以轻松创建独立的、基于Spring的生产级应用程序，它可以让你“运行即可”。大多数Spring Boot应用程序只需要少量的Spring配置。\n\nSpringBoot功能：\n\n*   创建独立的Spring应用程序\n\n*   直接嵌入Tomcat、Jetty或Undertow（无需部署WAR包，打包成Jar本身就是一个可以运行的应用程序）\n\n*   提供一站式的“starter”依赖项，以简化Maven配置（需要整合什么框架，直接导对应框架的starter依赖）\n\n*   尽可能自动配置Spring和第三方库（除非特殊情况，否则几乎不需要你进行什么配置）\n\n*   提供生产就绪功能，如指标、运行状况检查和外部化配置\n\n*   没有代码生成，也没有XML配置的要求（XML是什么，好吃吗）\n\nSpringBoot是现在最主流的开发框架，它提供了一站式的开发体验，大幅度提高了我们的开发效率。\n\n## 走进SpringBoot\n\n在SSM阶段，当我们需要搭建一个基于Spring全家桶的Web应用程序时，我们不得不做大量的依赖导入和框架整合相关的Bean定义，光是整合框架就花费了我们大量的时间，但是实际上我们发现，整合框架其实基本都是一些固定流程，我们每创建一个新的Web应用程序，基本都会使用同样的方式去整合框架，我们完全可以将一些重复的配置作为约定，只要框架遵守这个约定，为我们提供默认的配置就好，这样就不用我们再去配置了，约定优于配置！\n\n而SpringBoot正是将这些过程大幅度进行了简化，它可以自动进行配置，我们只需要导入对应的启动器（starter）依赖即可。\n\n完成本阶段的学习，基本能够胜任部分网站系统的后端开发工作，也建议同学们学习完SpringBoot之后寻找合适的队友去参加计算机项目相关的高校竞赛。\n\n我们可以通过IDEA来演示如何快速创建一个SpringBoot项目，并且无需任何配置，就可以实现Bean注册。\n\n## SpringBoot项目文件结构\n\n我们在创建SpringBoot项目之后，首先会自动生成一个主类，而主类中的`main`方法中调用了`SpringApplication`类的静态方法来启动整个SpringBoot项目，并且我们可以看到主类的上方有一个`@SpringBootApplication`注解：\n\n @SpringBootApplication\n public class SpringBootTestApplication {\n ​\n  public static void main(String\\[] args) {\n  SpringApplication.run(SpringBootTestApplication.class, args);\n  }\n ​\n }\n\n同时还自带了一个测试类，测试类的上方仅添加了一个`@SpringBootTest`注解：\n\n @SpringBootTest\n class SpringBootTestApplicationTests {\n ​\n  @Test\n  void contextLoads() {\n \n  }\n ​\n }\n\n我们接着来看Maven中写了哪些内容：\n\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n \\<project xmlns=\"<http://maven.apache.org/POM/4.0.0>\" xmlns:xsi=\"<http://www.w3.org/2001/XMLSchema-instance>\"\n  xsi:schemaLocation=\"<http://maven.apache.org/POM/4.0.0> [https://maven.apache.org/xsd/maven-4.0.0.xsd\">](https://maven.apache.org/xsd/maven-4.0.0.xsd\">)\n  <modelVersion>4.0.0</modelVersion>\n  \\<!--  父工程  -->\n  <parent>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-parent</artifactId>\n  <version>2.6.2</version>\n  <relativePath/> \\<!-- lookup parent from repository -->\n  </parent>\n  <groupId>com.example</groupId>\n  <artifactId>springboot-study</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <name>SpringBootTest</name>\n  <description>SpringBootTest</description>\n  <properties>\n  \\<java.version>1.8\\</java.version>\n  </properties>\n  <dependencies>\n  \\<!--  spring-boot-starter SpringBoot核心启动器  -->\n  <dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter</artifactId>\n  </dependency>\n  \\<!--  spring-boot-starter-test SpringBoot测试模块启动器  -->\n  <dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-test</artifactId>\n  <scope>test</scope>\n  </dependency>\n  </dependencies>\n ​\n  <build>\n  <plugins>\n  \\<!--  SpringBoot Maven插件，打包Jar都不用你操心了   -->\n  <plugin>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-maven-plugin</artifactId>\n  </plugin>\n  </plugins>\n  </build>\n ​\n </project>\n\n除了以上这些文件以外，我们的项目目录下还有：\n\n*   .gitignore - Git忽略名单，下一章我们会专门讲解Git版本控制。\n\n*   application.properties - SpringBoot的配置文件，所有依赖的配置都在这里编写，但是一般情况下只需要配置必要项即可。\n\n***\n\n## 整合Web相关框架\n\n我们来看一下，既然我们前面提到SpringBoot会内嵌一个Tomcat服务器，也就是说我们的Jar打包后，相当于就是一个可以直接运行的应用程序，我们来看一下如何创建一个SpringBootWeb项目。\n\n这里我们演示使用IDEA来创建一个基于SpringBoot的Web应用程序。\n\n### 它是真的快\n\n创建完成后，直接开启项目，我们就可以直接访问：<ins><http://localhost:8080/></ins>，我们可以看到，但是由于我们没有编写任何的请求映射，所以没有数据。我们可以来看看日志：\n\n 2022-01-06 22:17:46.308  INFO 853 --- \\[           main] c.example.SpringBootWebTestApplication   : Starting SpringBootWebTestApplication using Java 1.8.0\\_312 on NagodeMacBook-Pro.local with PID 853 (/Users/nagocoler/Downloads/SpringBootWebTest/target/classes started by nagocoler in /Users/nagocoler/Downloads/SpringBootWebTest)\n 2022-01-06 22:17:46.309  INFO 853 --- \\[           main] c.example.SpringBootWebTestApplication   : No active profile set, falling back to default profiles: default\n 2022-01-06 22:17:46.629  INFO 853 --- \\[           main] o.s.b.w\\.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)\n 2022-01-06 22:17:46.632  INFO 853 --- \\[           main] o.apache.catalina.core.StandardService   : Starting service \\[Tomcat]\n 2022-01-06 22:17:46.632  INFO 853 --- \\[           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: \\[Apache Tomcat/9.0.56]\n 2022-01-06 22:17:46.654  INFO 853 --- \\[           main] o.a.c.c.C.\\[Tomcat].\\[localhost].\\[/]       : Initializing Spring embedded WebApplicationContext\n 2022-01-06 22:17:46.654  INFO 853 --- \\[           main] w\\.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 325 ms\n 2022-01-06 22:17:46.780  INFO 853 --- \\[           main] o.s.b.w\\.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''\n 2022-01-06 22:17:46.785  INFO 853 --- \\[           main] c.example.SpringBootWebTestApplication   : Started SpringBootWebTestApplication in 0.62 seconds (JVM running for 0.999)\n 2022-01-06 22:18:02.979  INFO 853 --- \\[nio-8080-exec-1] o.a.c.c.C.\\[Tomcat].\\[localhost].\\[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'\n 2022-01-06 22:18:02.979  INFO 853 --- \\[nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'\n 2022-01-06 22:18:02.980  INFO 853 --- \\[nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms\n\n我们可以看到，日志中除了最基本的SpringBoot启动日志以外，还新增了内嵌Web服务器（Tomcat）的启动日志，并且显示了当前Web服务器所开放的端口，并且自动帮助我们初始化了DispatcherServlet，但是我们只是创建了项目，导入了web相关的starter依赖，没有进行任何的配置，实际上它使用的是starter提供的默认配置进行初始化的。\n\n由于SpringBoot是自动扫描的，因此我们直接创建一个Controller即可被加载：\n\n @Controller\n public class MainController {\n ​\n  //直接访问<http://localhost:8080/index即可，不用加web应用程序名称了>\n  @RequestMapping(\"/index\")\n  @ResponseBody\n  public String index(){\n  return \"你好，欢迎访问主页！\";\n  }\n }\n\n我们几乎没有做任何配置，但是可以直接开始配置Controller，SpringBoot创建一个Web项目的速度就是这么快！\n\n它还可以自动识别类型，如果我们返回的是一个对象类型的数据，那么它会自动转换为JSON数据格式，无需配置：\n\n @Data\n public class Student {\n  int sid;\n  String name;\n  String sex;\n }\n\n @RequestMapping(\"/student\")\n @ResponseBody\n public Student student(){\n  Student student = new Student();\n  student.setName(\"小明\");\n  student.setSex(\"男\");\n  student.setSid(10);\n  return student;\n }\n\n最后浏览器能够直接得到`application/json`的响应数据，就是这么方便。\n\n### 修改Web相关配置\n\n如果我们需要修改Web服务器的端口或是一些其他的内容，我们可以直接在`application.properties`中进行修改，它是整个SpringBoot的配置文件：\n\n # 修改端口为80\n server.port=80\n\n我们还可以编写自定义的配置项，并在我们的项目中通过`@Value`直接注入：\n\ntest.data=100\n\n@Controller\npublic class MainController {\n@Value(\"${test.data}\")\nint data;\n\n通过这种方式，我们就可以更好地将一些需要频繁修改的配置项写在配置文件中，并通过注解方式去获取值。\n\n配置文件除了使用`properties`格式以外，还有一种叫做`yaml`格式，它的语法如下：\n\n一级目录:\n二级目录:\n三级目录1: 值\n三级目录2: 值\n三级目录List:\n\\- 元素1\n\\- 元素2\n\\- 元素3\n\n我们可以看到，每一级目录都是通过缩进（不能使用Tab，只能使用空格）区分，并且键和值之间需要添加冒号+空格来表示。\n\nSpringBoot也支持这种格式的配置文件，我们可以将`application.properties`修改为`application.yml`或是`application.yaml`来使用YAML语法编写配置：\n\nserver:\nport: 80\n\n### 整合SpringSecurity依赖\n\n我们接着来整合一下SpringSecurity依赖，继续感受SpringBoot带来的光速开发体验，只需要导入SpringSecurity的Starter依赖即可：\n\n\\<dependency>\n\\<groupId>org.springframework.boot\\</groupId>\n\\<artifactId>spring-boot-starter-security\\</artifactId>\n\\</dependency>\n\n导入依赖后，我们直接启动SpringBoot应用程序，可以发现SpringSecurity已经生效了。\n\n并且SpringSecurity会自动为我们生成一个默认用户`user`，它的密码会出现在日志中：\n\n2022-01-06 23:10:51.329  INFO 2901 --- \\[           main] o.apache.catalina.core.StandardService   : Starting service \\[Tomcat]\n2022-01-06 23:10:51.329  INFO 2901 --- \\[           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: \\[Apache Tomcat/9.0.56]\n2022-01-06 23:10:51.350  INFO 2901 --- \\[           main] o.a.c.c.C.\\[Tomcat].\\[localhost].\\[/]       : Initializing Spring embedded WebApplicationContext\n2022-01-06 23:10:51.351  INFO 2901 --- \\[           main] w\\.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 341 ms\n2022-01-06 23:10:51.469  INFO 2901 --- \\[           main] .s.s.UserDetailsServiceAutoConfiguration :\nUsing generated security password: ff24bee3-e1b7-4309-9609-d32618baf5cb\n\n其中`ff24bee3-e1b7-4309-9609-d32618baf5cb`就是随机生成的一个密码，我们可以使用此用户登录。\n\n我们也可以在配置文件中直接配置：\n\nspring:\nsecurity:\nuser:\nname: test   # 用户名\npassword: 123456  # 密码\nroles:   # 角色\n\\- user\n\\- admin\n\n实际上这样的配置方式就是一个`inMemoryAuthentication`，只是我们可以直接配置而已。\n\n当然，页面的控制和数据库验证我们还是需要提供`WebSecurityConfigurerAdapter`的实现类去完成：\n\n@Configuration\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\nhttp\n.authorizeRequests()\n.antMatchers(\"/login\").permitAll()\n.anyRequest().hasRole(\"user\")\n.and()\n.formLogin();\n}\n}\n\n注意这里不需要再添加`@EnableWebSecurity`了，因为starter依赖已经帮我们添加了。\n\n使用了SpringBoot之后，我们发现，需要什么功能，只需要导入对应的starter依赖即可，甚至都不需要你去进行额外的配置，你只需要关注依赖本身的必要设置即可，大大提高了我们的开发效率。\n\n***\n\n## 整合Mybatis框架\n\n我们接着来看如何整合Mybatis框架，同样的，我们只需要导入对应的starter依赖即可：\n\n\\<dependency>\n\\<groupId>org.mybatis.spring.boot\\</groupId>\n\\<artifactId>mybatis-spring-boot-starter\\</artifactId>\n\\<version>2.2.0\\</version>\n\\</dependency>\n\\<dependency>\n\\<groupId>mysql\\</groupId>\n\\<artifactId>mysql-connector-java\\</artifactId>\n\\</dependency>\n\n导入依赖后，直接启动会报错，是因为有必要的配置我们没有去编写，我们需要指定数据源的相关信息：\n\nspring:\ndatasource:\nurl: jdbc:mysql://localhost:3306\nusername: root\npassword: 123456\ndriver-class-name: com.mysql.cj.jdbc.Driver\n\n再次启动，成功。\n\n我们发现日志中会出现这样一句话：\n\n2022-01-07 12:32:09.106  WARN 6917 --- \\[           main] o.m.s.mapper.ClassPathMapperScanner      : No MyBatis mapper was found in '\\[com.example]' package. Please check your configuration.\n\n这是Mybatis自动扫描输出的语句，导入依赖后，我们不需要再去设置Mybatis的相关Bean了，也不需要添加任何`@MapperSacn`注解，因为starter已经帮助我们做了，它会自动扫描项目中添加了`@Mapper`注解的接口，直接将其注册为Bean，不需要进行任何配置。\n\n@Mapper\npublic interface MainMapper {\n@Select(\"select \\* from users where username = #{username}\")\nUserData findUserByName(String username);\n}\n\n当然，如果你觉得每个接口都去加一个`@Mapper`比较麻烦的话也可以用回之前的方式，直接`@MapperScan`使用包扫描。\n\n添加Mapper之后，使用方法和SSM阶段是一样的，我们可以将其与SpringSecurity结合使用：\n\n@Service\npublic class UserAuthService implements UserDetailsService {\n@Resource\nMainMapper mapper;\n@Override\npublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\nUserData data = mapper.findUserByName(username);\nif(data == null) throw new UsernameNotFoundException(\"用户 \"+username+\" 登录失败，用户名不存在！\");\nreturn User\n.withUsername(data.getUsername())\n.password(data.getPassword())\n.roles(data.getRole())\n.build();\n}\n}\n\n最后配置一下自定义验证即可，注意这样之前配置文件里面配置的用户就失效了：\n\n@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\nauth\n.userDetailsService(service)\n.passwordEncoder(new BCryptPasswordEncoder());\n}\n\n在首次使用时，我们发现日志中输出以以下语句：\n\n2022-01-07 12:39:40.559  INFO 6930 --- \\[nio-8080-exec-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...\n2022-01-07 12:39:41.033  INFO 6930 --- \\[nio-8080-exec-3] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.\n\n实际上，SpringBoot会自动为Mybatis配置数据源，默认使用的就是`HikariCP`数据源。\n\n***\n\n## 整合Thymeleaf框架\n\n整合Thymeleaf也只需导入对应的starter即可：\n\n\\<dependency>\n\\<groupId>org.springframework.boot\\</groupId>\n\\<artifactId>spring-boot-starter-thymeleaf\\</artifactId>\n\\</dependency>\n\n接着我们只需要直接使用即可：\n\n@RequestMapping(\"/index\")\npublic String index(){\nreturn \"index\";\n}\n\n但是注意，这样只能正常解析HTML页面，但是js、css等静态资源我们需要进行路径指定，不然无法访问，我们在配文件中配置一下静态资源的访问前缀：\n\nspring:\nmvc:\nstatic-path-pattern: /static/\\*\\*\n\n接着我们像之前一样，把登陆页面实现一下吧。\n\n<html lang=\"en\" xmlns:th=http://www.thymeleaf.org\nxmlns:sec=http://www.thymeleaf.org/extras/spring-security>\n\n***\n\n## 日志系统\n\nSpringBoot为我们提供了丰富的日志系统，它几乎是开箱即用的。\n\n### 日志门面和日志实现\n\n我们首先要区分一下，什么是日志门面（Facade）什么是日志实现，我们之前学习的JUL实际上就是一种日志实现，我们可以直接使用JUL为我们提供的日志框架来规范化打印日志，而日志门面，如Slf4j，是把不同的日志系统的实现进行了具体的抽象化，只提供了统一的日志使用接口，使用时只需要按照其提供的接口方法进行调用即可，由于它只是一个接口，并不是一个具体的可以直接单独使用的日志框架，所以最终日志的格式、记录级别、输出方式等都要通过接口绑定的具体的日志系统来实现，这些具体的日志系统就有log4j、logback、java.util.logging等，它们才实现了具体的日志系统的功能。\n\n日志门面和日志实现就像JDBC和数据库驱动一样，一个是画大饼的，一个是真的去做饼的。\n\n![img](/resources/34ac413f2d1545b4bf0994da27599c05.png)\n\n但是现在有一个问题就是，不同的框架可能使用了不同的日志框架，如果这个时候出现众多日志框架并存的情况，我们现在希望的是所有的框架一律使用日志门面（Slf4j）进行日志打印，这时该怎么去解决？我们不可能将其他框架依赖的日志框架替换掉，直接更换为Slf4j吧，这样显然不现实。\n\n这时，可以采取类似于偷梁换柱的做法，只保留不同日志框架的接口和类定义等关键信息，而将实现全部定向为Slf4j调用。相当于有着和原有日志框架一样的外壳，对于其他框架来说依然可以使用对应的类进行操作，而具体如何执行，真正的内心已经是Slf4j的了。\n\n![img](/resources/ca2d2ebc636549ca812a437985f5896d.png)\n\n所以，SpringBoot为了统一日志框架的使用，做了这些事情：\n\n*   直接将其他依赖以前的日志框架剔除\n\n*   导入对应日志框架的Slf4j中间包\n\n*   导入自己官方指定的日志实现，并作为Slf4j的日志实现层\n\n### 在SpringBoot中打印日志信息\n\nSpringBoot使用的是Slf4j作为日志门面，Logback（<ins>Logback</ins> 是log4j 框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J）作为日志实现，对应的依赖为：\n\n\\<dependency>\n\\<groupId>org.springframework.boot\\</groupId>\n\\<artifactId>spring-boot-starter-logging\\</artifactId>\n\\</dependency>\n\n此依赖已经被包含了，所以我们如果需要打印日志，可以像这样：\n\n@RequestMapping(\"/login\")\npublic String login(){\nLogger logger = LoggerFactory.getLogger(MainController.class);\nlogger.info(\"用户访问了一次登陆界面\");\nreturn \"login\";\n}\n\n因为我们使用了Lombok，所以直接一个注解也可以搞定哦：\n\n@Slf4j\n@Controller\npublic class MainController {\n@RequestMapping(\"/login\")\npublic String login(){\nlog.info(\"用户访问了一次登陆界面\");\nreturn \"login\";\n}\n\n日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，SpringBoot默认只会打印INFO以上级别的信息。\n\n### 配置Logback日志\n\nLogback官网：<ins><https://logback.qos.ch></ins>\n\n和JUL一样，Logback也能实现定制化，我们可以编写对应的配置文件，SpringBoot推荐将配置文件名称命名为`logback-spring.xml`表示这是SpringBoot下Logback专用的配置，可以使用SpringBoot 的高级Proﬁle功能，它的内容类似于这样：\n\n\\<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\\<configuration>\n\\<!-- 配置 -->\n\\</configuration>\n\n最外层由`configuration`包裹，一旦编写，那么就会替换默认的配置，所以如果内部什么都不写的话，那么会导致我们的SpringBoot项目没有配置任何日志输出方式，控制台也不会打印日志。\n\n我们接着来看如何配置一个控制台日志打印，我们可以直接导入并使用SpringBoot为我们预设好的日志格式，在`org/springframework/boot/logging/logback/defaults.xml`中已经帮我们把日志的输出格式定义好了，我们只需要设置对应的`appender`即可：\n\n\\<included>\n\\<conversionRule conversionWord=\"clr\" converterClass=\"org.springframework.boot.logging.logback.ColorConverter\" />\n\\<conversionRule conversionWord=\"wex\" converterClass=\"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter\" />\n\\<conversionRule conversionWord=\"wEx\" converterClass=\"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter\" />\n\\<property name=\"CONSOLE\\_LOG\\_PATTERN\" value=\"${CONSOLE\\_LOG\\_PATTERN:-%clr(%d{${LOG\\_DATEFORMAT\\_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG\\_LEVEL\\_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr(\\[%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG\\_EXCEPTION\\_CONVERSION\\_WORD:-%wEx}}\"/>\n\\<property name=\"CONSOLE\\_LOG\\_CHARSET\" value=\"${CONSOLE\\_LOG\\_CHARSET:-${file.encoding:-UTF-8}}\"/>\n\\<property name=\"FILE\\_LOG\\_PATTERN\" value=\"${FILE\\_LOG\\_PATTERN:-%d{${LOG\\_DATEFORMAT\\_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG\\_LEVEL\\_PATTERN:-%5p} ${PID:- } --- \\[%t] %-40.40logger{39} : %m%n${LOG\\_EXCEPTION\\_CONVERSION\\_WORD:-%wEx}}\"/>\n\\<property name=\"FILE\\_LOG\\_CHARSET\" value=\"${FILE\\_LOG\\_CHARSET:-${file.encoding:-UTF-8}}\"/>\n\\<logger name=\"org.apache.catalina.startup.DigesterFactory\" level=\"ERROR\"/>\n\\<logger name=\"org.apache.catalina.util.LifecycleBase\" level=\"ERROR\"/>\n\\<logger name=\"org.apache.coyote.http11.Http11NioProtocol\" level=\"WARN\"/>\n\\<logger name=\"org.apache.sshd.common.util.SecurityUtils\" level=\"WARN\"/>\n\\<logger name=\"org.apache.tomcat.util.net.NioSelectorPool\" level=\"WARN\"/>\n\\<logger name=\"org.eclipse.jetty.util.component.AbstractLifeCycle\" level=\"ERROR\"/>\n\\<logger name=\"org.hibernate.validator.internal.util.Version\" level=\"WARN\"/>\n\\<logger name=\"org.springframework.boot.actuate.endpoint.jmx\" level=\"WARN\"/>\n\\</included>\n\n导入后，我们利用预设的日志格式创建一个控制台日志打印：\n\n\\<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\\<configuration>\n\\<!--  导入其他配置文件，作为预设  -->\n\\<include resource=\"org/springframework/boot/logging/logback/defaults.xml\" />\n\\<!--  Appender作为日志打印器配置，这里命名随意  -->\n\\<!--  ch.qos.logback.core.ConsoleAppender是专用于控制台的Appender  -->\n\\<appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\\<encoder>\n\\<pattern>${CONSOLE\\_LOG\\_PATTERN}\\</pattern>\n\\<charset>${CONSOLE\\_LOG\\_CHARSET}\\</charset>\n\\</encoder>\n\\</appender>\n\\<!--  指定日志输出级别，以及启用的Appender，这里就使用了我们上面的ConsoleAppender  -->\n\\<root level=\"INFO\">\n\\<appender-ref ref=\"CONSOLE\"/>\n\\</root>\n\\</configuration>\n\n配置完成后，我们发现控制台已经可以正常打印日志信息了。\n\n接着我们来看看如何开启文件打印，我们只需要配置一个对应的Appender即可：\n\n\\<!--  ch.qos.logback.core.rolling.RollingFileAppender用于文件日志记录，它支持滚动  -->\n\\<appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\\<encoder>\n\\<pattern>${FILE\\_LOG\\_PATTERN}\\</pattern>\n\\<charset>${FILE\\_LOG\\_CHARSET}\\</charset>\n\\</encoder>\n\\<!--  自定义滚动策略，防止日志文件无限变大，也就是日志文件写到什么时候为止，重新创建一个新的日志文件开始写  -->\n\\<rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n\\<!--  文件保存位置以及文件命名规则，这里用到了%d{yyyy-MM-dd}表示当前日期，%i表示这一天的第N个日志  -->\n\\<FileNamePattern>log/%d{yyyy-MM-dd}-spring-%i.log\\</FileNamePattern>\n\\<!--  到期自动清理日志文件  -->\n\\<cleanHistoryOnStart>true\\</cleanHistoryOnStart>\n\\<!--  最大日志保留时间  -->\n\\<maxHistory>7\\</maxHistory>\n\\<!--  最大单个日志文件大小  -->\n\\<maxFileSize>10MB\\</maxFileSize>\n\\</rollingPolicy>\n\\</appender>\n\\<!--  指定日志输出级别，以及启用的Appender，这里就使用了我们上面的ConsoleAppender  -->\n\\<root level=\"INFO\">\n\\<appender-ref ref=\"CONSOLE\"/>\n\\<appender-ref ref=\"FILE\"/>\n\\</root>\n\n配置完成后，我们可以看到日志文件也能自动生成了。\n\n我们也可以魔改官方提供的日志格式，官方文档：<ins><https://logback.qos.ch/manual/layouts.html></ins>\n\n这里需要提及的是MDC机制，Logback内置的日志字段还是比较少，如果我们需要打印有关业务的更多的内容，包括自定义的一些数据，需要借助logback MDC机制，MDC为“Mapped Diagnostic Context”（映射诊断上下文），即将一些运行时的上下文数据通过logback打印出来；此时我们需要借助org.sl4j.MDC类。\n\n比如我们现在需要记录是哪个用户访问我们网站的日志，只要是此用户访问我们网站，都会在日志中携带该用户的ID，我们希望每条日志中都携带这样一段信息文本，而官方提供的字段无法实现此功能，这时就需要使用MDC机制：\n\n@Slf4j\n@Controller\npublic class MainController {\n@RequestMapping(\"/login\")\npublic String login(){\n//这里就用Session代替ID吧\nMDC.put(\"reqId\", request.getSession().getId());\nlog.info(\"用户访问了一次登陆界面\");\nreturn \"login\";\n}\n\n通过这种方式，我们就可以向日志中传入自定义参数了，我们日志中添加这样一个占位符`%X{键值}`，名字保持一致：\n\n%clr(\\[%X{reqId}]){faint}\n\n这样当我们向MDC中添加信息后，只要是当前线程（本质是ThreadLocal实现）下输出的日志，都会自动替换占位符。\n\n### 自定义Banner\n\n我们在之前发现，实际上Banner部分和日志部分是独立的，SpringBoot启动后，会先打印Banner部分，那么这个Banner部分是否可以自定义呢？答案是可以的。\n\n我们可以直接来配置文件所在目录下创建一个名为`banner.txt`的文本文档，内容随便你：\n\n//                          \\_ooOoo\\_                               //\n//                         o8888888o                              //\n//                         88\" . \"88                              //\n//                         (| ^*^ |)                              //\n//                         O\\  =  /O                              //\n//                      \\_\\_**/`---'\\\\____                           //\n//                    .'  \\\\\\|     |//  `.                         //\n//                   /  \\\\|||  :  |||//  \\                        //\n//                  /  *||||| -:- |||||-  \\                       //\n//                  |   | \\\\\\  -  /// |   |                       //\n//                  | \\\\*|  ''\\\\---/''  |   |                       //\n//                  \\  .-\\\\**  `-`  \\_\\_*/-. /                       //\n//                ***`. .'  /--.--\\  `. . \\_\\_\\_                     //\n//              .\"\" '<  `.___\\\\_<|&gt;_/___.'  >'\"\".                  //\n//            | | :  `- \\\\`.;`\\ \\_ /`;.`/ - `: | |                 //\n//            \\  \\`-.   \\\\* **\\ /** */   .-` /  /                 //\n//      ========`-.****`-.___\\\\_____/___.-`*\\_\\_\\_.-'========         //\n//                           \\`=---='                              //\n//      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        //\n//             佛祖保佑          永无BUG         永不修改             //\n\n可以使用在线生成网站进行生成自己的个性Banner：<ins><https://www.bootschool.net/ascii></ins>\n\n我们甚至还可以使用颜色代码来为文本切换颜色：\n\n${AnsiColor.BRIGHT\\_GREEN}  //绿色\n\n也可以获取一些常用的变量信息：\n\n${AnsiColor.YELLOW} 当前 Spring Boot 版本：${spring-boot.version}\n\n玩的开心！\n\n***\n\n## 多环境配置\n\n在日常开发中，我们项目会有多个环境。例如开发环境（develop）也就是我们研发过程中疯狂敲代码修BUG阶段，生产环境（production ）项目开发得差不多了，可以放在服务器上跑了。不同的环境下，可能我们的配置文件也存在不同，但是我们不可能切换环境的时候又去重新写一次配置文件，所以我们可以将多个环境的配置文件提前写好，进行自由切换。\n\n由于SpringBoot只会读取`application.properties`或是`application.yml`文件，那么怎么才能实现自由切换呢？SpringBoot给我们提供了一种方式，我们可以通过配置文件指定：\n\nspring:\nprofiles:\nactive: dev\n\n接着我们分别创建两个环境的配置文件，`application-dev.yml`和`application-prod.yml`分别表示开发环境和生产环境的配置文件，比如开发环境我们使用的服务器端口为8080，而生产环境下可能就需要设置为80或是443端口，那么这个时候就需要不同环境下的配置文件进行区分：\n\nserver:\nport: 8080\n\nserver:\nport: 80\n\n这样我们就可以灵活切换生产环境和开发环境下的配置文件了。\n\nSpringBoot自带的Logback日志系统也是支持多环境配置的，比如我们想在开发环境下输出日志到控制台，而生产环境下只需要输出到文件即可，这时就需要进行环境配置：\n\n\\<springProfile name=\"dev\">\n\\<root level=\"INFO\">\n\\<appender-ref ref=\"CONSOLE\"/>\n\\<appender-ref ref=\"FILE\"/>\n\\</root>\n\\</springProfile>\n\\<springProfile name=\"prod\">\n\\<root level=\"INFO\">\n\\<appender-ref ref=\"FILE\"/>\n\\</root>\n\\</springProfile>\n\n注意`springProfile`是区分大小写的！\n\n那如果我们希望生产环境中不要打包开发环境下的配置文件呢，我们目前虽然可以切换开发环境，但是打包的时候依然是所有配置文件全部打包，这样总感觉还欠缺一点完美，因此，打包的问题就只能找Maven解决了，Maven也可以设置多环境：\n\n\\<!--分别设置开发，生产环境-->\n\\<profiles>\n\\<!-- 开发环境 -->\n\\<profile>\n\\<id>dev\\</id>\n\\<activation>\n\\<activeByDefault>true\\</activeByDefault>\n\\</activation>\n\\<properties>\n\\<environment>dev\\</environment>\n\\</properties>\n\\</profile>\n\\<!-- 生产环境 -->\n\\<profile>\n\\<id>prod\\</id>\n\\<activation>\n\\<activeByDefault>false\\</activeByDefault>\n\\</activation>\n\\<properties>\n\\<environment>prod\\</environment>\n\\</properties>\n\\</profile>\n\\</profiles>\n\n接着，我们需要根据环境的不同，排除其他环境的配置文件：\n\n\\<resources>\n\\<!--排除配置文件-->\n\\<resource>\n\\<directory>src/main/resources\\</directory>\n\\<!--先排除所有的配置文件-->\n\\<excludes>\n\\<!--使用通配符，当然可以定义多个exclude标签进行排除-->\n\\<exclude>application\\*.yml\\</exclude>\n\\</excludes>\n\\</resource>\n\\<!--根据激活条件引入打包所需的配置和文件-->\n\\<resource>\n\\<directory>src/main/resources\\</directory>\n\\<!--引入所需环境的配置文件-->\n\\<filtering>true\\</filtering>\n\\<includes>\n\\<include>application.yml\\</include>\n\\<!--根据maven选择环境导入配置文件-->\n\\<include>application-${environment}.yml\\</include>\n\\</includes>\n\\</resource>\n\\</resources>\n\n接着，我们可以直接将Maven中的`environment`属性，传递给SpringBoot的配置文件，在构建时替换为对应的值：\n\nspring:\nprofiles:\nactive: '@environment@'  #注意YAML配置文件需要加单引号，否则会报错\n\n这样，根据我们Maven环境的切换，SpringBoot的配置文件也会进行对应的切换。\n\n最后我们打开Maven栏目，就可以自由切换了，直接勾选即可，注意切换环境之后要重新加载一下Maven项目，不然不会生效！\n\n***\n\n## 打包运行\n\n现在我们的SpringBoot项目编写完成了，那么如何打包运行呢？非常简单，只需要点击Maven生命周期中的`package`即可，它会自动将其打包为可直接运行的Jar包，第一次打包可能会花费一些时间下载部分依赖的源码一起打包进Jar文件。\n\n我们发现在打包的过程中还会完整的将项目跑一遍进行测试，如果我们不想测试直接打包，可以手动使用以下命令：\n\nmvn package  -DskipTests\n\n打包后，我们会直接得到一个名为`springboot-study-0.0.1-SNAPSHOT.jar`的文件，这时在CMD窗口中输入命令：\n\njava -jar springboot-study-0.0.1-SNAPSHOT.jar\n\n输入后，可以看到我们的Java项目成功运行起来了，如果手动关闭窗口会导致整个项目终止运行。\n\n***\n\n## 再谈Spring框架\n\n\\*\\*注意：\\*\\*开始本部分前，建议先完成SSM阶段的Spring源码讲解部分。\n\n我们在SpringBoot阶段，需要继续扩充Spring框架的相关知识，来巩固和强化对于Spring框架的认识。\n\n### 任务调度\n\n为了执行某些任务，我们可能需要一些非常规的操作，比如我们希望使用多线程来处理我们的结果或是执行一些定时任务，到达指定时间再去执行。\n\n这时我们首先想到的就是创建一个新的线程来处理，或是使用TimerTask来完成定时任务，但是我们有了Spring框架之后，就不用这样了，因为Spring框架为我们提供了更加便捷的方式进行任务调度。\n\n#### 异步任务\n\n需要使用Spring异步任务支持，我们需要在配置类上添加`@EnableAsync`或是在SpringBoot的启动类上添加也可以。\n\n@EnableAsync\n@SpringBootApplication\npublic class SpringBootWebTestApplication {\npublic static void main(String\\[] args) {\nSpringApplication.run(SpringBootWebTestApplication.class, args);\n}\n}\n\n接着我们只需要在需要异步执行的方法上，添加`@Async`注解即可将此方法标记为异步，当此方法被调用时，会异步执行，也就是新开一个线程执行，不是在当前线程执行。\n\n@Service\npublic class TestService {\n@Async\npublic void test(){\ntry {\nThread.sleep(3000);\nSystem.out.println(\"我是异步任务！\");\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n}\n\n@RequestMapping(\"/login\")\npublic String login(HttpServletRequest request){\nservice.test();\nSystem.out.println(\"我是同步任务！\");\nreturn \"login\";\n}\n\n实际上这也是得益于AOP机制，通过线程池实现，但是也要注意，正是因为它是AOP机制的产物，所以它只能是在Bean中才会生效！\n\n使用 @Async 注释的方法可以返回 'void' 或 \"Future\" 类型，Future是一种用于接收任务执行结果的一种类型，我们会在Java并发编程中进行讲解，这里暂时不做介绍。\n\n#### 定时任务\n\n看完了异步任务，我们接着来看定时任务，定时任务其实就是指定在哪个时候再去执行，在JavaSE阶段我们使用过TimerTask来执行定时任务。\n\nSpring中的定时任务是全局性质的，当我们的Spring程序启动后，那么定时任务也就跟着启动了，我们可以在配置类上添加`@EnableScheduling`或是在SpringBoot的启动类上添加也可：\n\n@EnableAsync\n@EnableScheduling\n@SpringBootApplication\npublic class SpringBootWebTestApplication {\npublic static void main(String\\[] args) {\nSpringApplication.run(SpringBootWebTestApplication.class, args);\n}\n}\n\n接着我们可以创建一个定时任务配置类，在配置类里面编写定时任务：\n\n@Configuration\npublic class ScheduleConfiguration {\n@Scheduled(fixedRate = 2000)\npublic void task(){\nSystem.out.println(\"我是定时任务！\"+new Date());\n}\n}\n\n我们注意到`@Scheduled`中有很多参数，我们需要指定'cron', 'fixedDelay(String)', or 'fixedRate(String)'的其中一个，否则无法创建定时任务，他们的区别如下：\n\n*   fixedDelay：在上一次定时任务执行完之后，间隔多久继续执行。\n\n*   fixedRate：无论上一次定时任务有没有执行完成，两次任务之间的时间间隔。\n\n*   cron：使用cron表达式来指定任务计划。\n\n这里重点讲解一下cron表达式：<ins><https://blog.csdn.net/sunnyzyq/article/details/98597252></ins>\n\n### 监听器\n\n监听器对我们来说也是一个比较陌生的概念，那么何谓监听呢？\n\n监听实际上就是等待某个事件的触发，当事件触发时，对应事件的监听器就会被通知。\n\n@Component\npublic class TestListener implements ApplicationListener\\<ContextRefreshedEvent> {\n@Override\npublic void onApplicationEvent(ContextRefreshedEvent event) {\nSystem.out.println(event.getApplicationContext());\n}\n}\n\n通过监听事件，我们就可以在对应的时机进行一些额外的处理，我们可以通过断点调试来查看一个事件是如何发生，以及如何通知监听器的。\n\n通过阅读源码，我们得知，一个事件实际上就是通过`publishEvent`方法来进行发布的，我们也可以自定义我们自己项目中的事件，并注册对应的监听器进行处理。\n\npublic class TestEvent extends ApplicationEvent {   //需要继承ApplicationEvent\npublic TestEvent(Object source) {\nsuper(source);\n}\n}\n\n@Component\npublic class TestListener implements ApplicationListener\\<TestEvent> {\n@Override\npublic void onApplicationEvent(TestEvent event) {\nSystem.out.println(\"自定义事件发生了：\"+event.getSource());\n}\n}\n\n@Resource\nApplicationContext context;\n@RequestMapping(\"/login\")\npublic String login(HttpServletRequest request){\ncontext.publishEvent(new TestEvent(\"有人访问了登录界面！\"));\nreturn \"login\";\n}\n\n这样，我们就实现了自定义事件发布和监听。\n\n### Aware系列接口\n\n我们在之前讲解Spring源码时，经常会发现某些类的定义上，除了我们当时讲解的继承关系以外，还实现了一些接口，他们的名称基本都是`xxxxAware`，比如我们在讲解SpringSecurity的源码中，AbstractAuthenticationProcessingFilter类就是这样：\n\npublic abstract class AbstractAuthenticationProcessingFilter extends GenericFilterBean implements ApplicationEventPublisherAware, MessageSourceAware {\nprotected ApplicationEventPublisher eventPublisher;\nprotected AuthenticationDetailsSource\\<HttpServletRequest, ?> authenticationDetailsSource = new WebAuthenticationDetailsSource();\nprivate AuthenticationManager authenticationManager;\n...\n\n我们发现它除了继承自GenericFilterBean之外，还实现了ApplicationEventPublisherAware和MessageSourceAware接口，那么这些Aware接口到底是干嘛的呢？\n\nAware的中文意思为**感知**。简单来说，他就是一个标识，实现此接口的类会获得某些感知能力，Spring容器会在Bean被加载时，根据类实现的感知接口，会调用类中实现的对应感知方法。\n\n比如AbstractAuthenticationProcessingFilter就实现了ApplicationEventPublisherAware接口，此接口的感知功能为事件发布器，在Bean加载时，会调用实现类中的`setApplicationEventPublisher`方法，而AbstractAuthenticationProcessingFilter类则利用此方法，在Bean加载阶段获得了容器的事件发布器，以便之后发布事件使用。\n\npublic void setApplicationEventPublisher(ApplicationEventPublisher eventPublisher) {\nthis.eventPublisher = eventPublisher;   //直接存到成员变量\n}\n\nprotected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) throws IOException, ServletException {\nSecurityContext context = SecurityContextHolder.createEmptyContext();\ncontext.setAuthentication(authResult);\nSecurityContextHolder.setContext(context);\nif (this.logger.isDebugEnabled()) {\nthis.logger.debug(LogMessage.format(\"Set SecurityContextHolder to %s\", authResult));\n}\nthis.rememberMeServices.loginSuccess(request, response, authResult);\n//在这里使用\nif (this.eventPublisher != null) {\nthis.eventPublisher.publishEvent(new InteractiveAuthenticationSuccessEvent(authResult, this.getClass()));\n}\nthis.successHandler.onAuthenticationSuccess(request, response, authResult);\n}\n\n同样的，除了ApplicationEventPublisherAware接口外，我们再来演示一个接口，比如：\n\n@Service\npublic class TestService implements BeanNameAware {\n@Override\npublic void setBeanName(String s) {\nSystem.out.println(s);\n}\n}\n\nBeanNameAware就是感知Bean名称的一个接口，当Bean被加载时，会调用`setBeanName`方法并将Bean名称作为参数传递。\n\n有关所有的Aware这里就不一一列举了。\n\n***\n\n## 探究SpringBoot实现原理\n\n\\*\\*注意：\\*\\*难度较大，本版块作为选学内容，在开始前，必须完成SSM阶段源码解析部分的学习。\n\n我们在前面的学习中切实感受到了SpringBoot为我们带来的便捷，那么它为何能够实现如此快捷的开发模式，starter又是一个怎样的存在，它是如何进行自动配置的，我们现在就开始研究。\n\n### 启动原理\n\n首先我们来看看，SpringBoot项目启动之后，做了什么事情，SpringApplication中的静态`run`方法：\n\npublic static ConfigurableApplicationContext run(Class\\<?> primarySource, String... args) {\nreturn run(new Class\\[]{primarySource}, args);\n}\n\n套娃如下：\n\npublic static ConfigurableApplicationContext run(Class\\<?>\\[] primarySources, String\\[] args) {\nreturn (new SpringApplication(primarySources)).run(args);\n}\n\n我们发现，这里直接new了一个新的SpringApplication对象，传入我们的主类作为构造方法参数，并调用了非static的`run`方法，我们先来看看构造方法里面做了什么事情：\n\npublic SpringApplication(ResourceLoader resourceLoader, Class\\<?>... primarySources) {\n...\nthis.resourceLoader = resourceLoader;\nAssert.notNull(primarySources, \"PrimarySources must not be null\");\nthis.primarySources = new LinkedHashSet(Arrays.asList(primarySources));\n//这里是关键，这里会判断当前SpringBoot应用程序是否为Web项目，并返回当前的项目类型\n//deduceFromClasspath是根据类路径下判断是否包含SpringBootWeb依赖，如果不包含就是NONE类型，包含就是SERVLET类型\nthis.webApplicationType = WebApplicationType.deduceFromClasspath();\nthis.bootstrapRegistryInitializers = new ArrayList(this.getSpringFactoriesInstances(BootstrapRegistryInitializer.class));\n//创建所有ApplicationContextInitializer实现类的对象\nthis.setInitializers(this.getSpringFactoriesInstances(ApplicationContextInitializer.class));\nthis.setListeners(this.getSpringFactoriesInstances(ApplicationListener.class));\nthis.mainApplicationClass = this.deduceMainApplicationClass();\n}\n\n关键就在这里了，它是如何知道哪些类是ApplicationContextInitializer的实现类的呢？\n\n这里就要提到spring.factories了，它是 Spring 仿造Java SPI实现的一种类加载机制。它在 META-INF/spring.factories 文件中配置接口的实现类名称，然后在程序中读取这些配置文件并实例化。这种自定义的SPI机制是 Spring Boot Starter 实现的基础。\n\nSPI的常见例子：\n\n*   数据库驱动加载接口实现类的加载：JDBC加载不同类型数据库的驱动\n\n*   日志门面接口实现类加载：SLF4J加载不同提供商的日志实现类\n\n说白了就是人家定义接口，但是实现可能有很多种，但是核心只提供接口，需要我们按需选择对应的实现，这种方式是高度解耦的。\n\n我们来看看`getSpringFactoriesInstances`方法做了什么：\n\nprivate \\<T> Collection\\<T> getSpringFactoriesInstances(Class\\<T> type, Class\\<?>\\[] parameterTypes, Object... args) {\n//获取当前的类加载器\nClassLoader classLoader = this.getClassLoader();\n//获取所有依赖中 META-INF/spring.factories 中配置的对应接口类的实现类列表\nSet\\<String> names = new LinkedHashSet(SpringFactoriesLoader.loadFactoryNames(type, classLoader));\n//根据上方列表，依次创建实例对象\\\nList\\<T> instances = this.createSpringFactoriesInstances(type, parameterTypes, classLoader, args, names);\n//根据对应类上的Order接口或是注解进行排序\nAnnotationAwareOrderComparator.sort(instances);\n//返回实例\nreturn instances;\n}\n\n其中`SpringFactoriesLoader.loadFactoryNames`正是读取配置的核心部分，我们后面还会遇到。\n\n接着我们来看run方法里面做了什么事情。\n\npublic ConfigurableApplicationContext run(String... args) {\nlong startTime = System.nanoTime();\nDefaultBootstrapContext bootstrapContext = this.createBootstrapContext();\nConfigurableApplicationContext context = null;\nthis.configureHeadlessProperty();\n//获取所有的SpringApplicationRunListener，并通知启动事件，默认只有一个实现类EventPublishingRunListener\n//EventPublishingRunListener会将初始化各个阶段的事件转发给所有监听器\nSpringApplicationRunListeners listeners = this.getRunListeners(args);\nlisteners.starting(bootstrapContext, this.mainApplicationClass);\ntry {\n//环境配置\nApplicationArguments applicationArguments = new DefaultApplicationArguments(args);\nConfigurableEnvironment environment = this.prepareEnvironment(listeners, bootstrapContext, applicationArguments);\nthis.configureIgnoreBeanInfo(environment);\n//打印Banner\nBanner printedBanner = this.printBanner(environment);\n//创建ApplicationContext，注意这里会根据是否为Web容器使用不同的ApplicationContext实现类\ncontext = this.createApplicationContext();\ncontext.setApplicationStartup(this.applicationStartup);\n//初始化ApplicationContext\nthis.prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);\n//执行ApplicationContext的refresh方法\nthis.refreshContext(context);\nthis.afterRefresh(context, applicationArguments);\nDuration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);\nif (this.logStartupInfo) {\n(new StartupInfoLogger(this.mainApplicationClass)).logStarted(this.getApplicationLog(), timeTakenToStartup);\n}\n....\n}\n\n我们发现，实际上SpringBoot就是Spring的一层壳罢了，离不开最关键的ApplicationContext，也就是说，在启动后会自动配置一个ApplicationContext，只不过是进行了大量的扩展。\n\n我们来看ApplicationContext是怎么来的，打开`createApplicationContext`方法：\n\nprotected ConfigurableApplicationContext createApplicationContext() {\nreturn this.applicationContextFactory.create(this.webApplicationType);\n}\n\n我们发现在构造方法中`applicationContextFactory`直接使用的是DEFAULT：\n\nthis.applicationContextFactory = ApplicationContextFactory.DEFAULT;\n\nApplicationContextFactory DEFAULT = (webApplicationType) -> {\ntry {\nswitch(webApplicationType) {\ncase SERVLET:\nreturn new AnnotationConfigServletWebServerApplicationContext();\ncase REACTIVE:\nreturn new AnnotationConfigReactiveWebServerApplicationContext();\ndefault:\nreturn new AnnotationConfigApplicationContext();\n}\n} catch (Exception var2) {\nthrow new IllegalStateException(\"Unable create a default ApplicationContext instance, you may need a custom ApplicationContextFactory\", var2);\n}\n};\nConfigurableApplicationContext create(WebApplicationType webApplicationType);\n\nDEFAULT是直接编写的一个匿名内部类，其实已经很明确了，正是根据`webApplicationType`类型进行判断，如果是SERVLET，那么久返回专用于Web环境的AnnotationConfigServletWebServerApplicationContext对象（SpringBoot中新增的），否则返回普通的AnnotationConfigApplicationContext对象，也就是到这里为止，Spring的容器就基本已经确定了。\n\n注意AnnotationConfigApplicationContext是Spring框架提供的类，从这里开始相当于我们在讲Spring的底层源码了，我们继续深入，AnnotationConfigApplicationContext对象在创建过程中会创建`AnnotatedBeanDefinitionReader`，它是用于通过注解解析Bean定义的工具类：\n\npublic AnnotationConfigApplicationContext() {\nStartupStep createAnnotatedBeanDefReader = this.getApplicationStartup().start(\"spring.context.annotated-bean-reader.create\");\nthis.reader = new AnnotatedBeanDefinitionReader(this);\ncreateAnnotatedBeanDefReader.end();\nthis.scanner = new ClassPathBeanDefinitionScanner(this);\n}\n\n其构造方法：\n\npublic AnnotatedBeanDefinitionReader(BeanDefinitionRegistry registry, Environment environment) {\n...\n//这里会注册很多的后置处理器\nAnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);\n}\n\npublic static Set\\<BeanDefinitionHolder> registerAnnotationConfigProcessors(BeanDefinitionRegistry registry, @Nullable Object source) {\nDefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry);\n....\nSet\\<BeanDefinitionHolder> beanDefs = new LinkedHashSet(8);\nRootBeanDefinition def;\nif (!registry.containsBeanDefinition(\"org.springframework.context.annotation.internalConfigurationAnnotationProcessor\")) {\n//注册了ConfigurationClassPostProcessor用于处理@Configuration、@Import等注解\n//注意这里是关键，之后Selector还要讲到它\n//它是继承自BeanDefinitionRegistryPostProcessor，所以它的执行时间在Bean定义加载完成后，Bean初始化之前\ndef = new RootBeanDefinition(ConfigurationClassPostProcessor.class);\ndef.setSource(source);\nbeanDefs.add(registerPostProcessor(registry, def, \"org.springframework.context.annotation.internalConfigurationAnnotationProcessor\"));\n}\nif (!registry.containsBeanDefinition(\"org.springframework.context.annotation.internalAutowiredAnnotationProcessor\")) {\n//AutowiredAnnotationBeanPostProcessor用于处理@Value等注解自动注入\ndef = new RootBeanDefinition(AutowiredAnnotationBeanPostProcessor.class);\ndef.setSource(source);\nbeanDefs.add(registerPostProcessor(registry, def, \"org.springframework.context.annotation.internalAutowiredAnnotationProcessor\"));\n}\n\n    ...\n\n回到SpringBoot，我们最后来看，`prepareContext`方法中又做了什么事情：\n\nprivate void prepareContext(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context, ConfigurableEnvironment environment, SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner) {\n//环境配置\ncontext.setEnvironment(environment);\nthis.postProcessApplicationContext(context);\nthis.applyInitializers(context);\nlisteners.contextPrepared(context);\nbootstrapContext.close(context);\nif (this.logStartupInfo) {\nthis.logStartupInfo(context.getParent() == null);\nthis.logStartupProfileInfo(context);\n}\n//将Banner注册为Bean\nConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\nbeanFactory.registerSingleton(\"springApplicationArguments\", applicationArguments);\nif (printedBanner != null) {\nbeanFactory.registerSingleton(\"springBootBanner\", printedBanner);\n}\nif (beanFactory instanceof AbstractAutowireCapableBeanFactory) {\n((AbstractAutowireCapableBeanFactory)beanFactory).setAllowCircularReferences(this.allowCircularReferences);\nif (beanFactory instanceof DefaultListableBeanFactory) {\n((DefaultListableBeanFactory)beanFactory).setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);\n}\n}\nif (this.lazyInitialization) {\ncontext.addBeanFactoryPostProcessor(new LazyInitializationBeanFactoryPostProcessor());\n}\n//这里会获取我们一开始传入的项目主类\nSet\\<Object> sources = this.getAllSources();\nAssert.notEmpty(sources, \"Sources must not be empty\");\n//这里会将我们的主类直接注册为Bean，这样就可以通过注解加载了\nthis.load(context, sources.toArray(new Object\\[0]));\nlisteners.contextLoaded(context);\n}\n\n因此，在`prepareContext`执行完成之后，我们的主类成功完成Bean注册，接下来，就该类上注解大显身手了。\n\n### 自动配置原理\n\n既然主类已经在初始阶段注册为Bean，那么在加载时，就会根据注解定义，进行更多的额外操作。所以我们来看看主类上的`@SpringBootApplication`注解做了什么事情。\n\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@SpringBootConfiguration\n@EnableAutoConfiguration\n@ComponentScan(\nexcludeFilters = {@Filter(\ntype = FilterType.CUSTOM,\nclasses = {TypeExcludeFilter.class}\n), @Filter(\ntype = FilterType.CUSTOM,\nclasses = {AutoConfigurationExcludeFilter.class}\n)}\n)\npublic @interface SpringBootApplication {\n\n我们发现，`@SpringBootApplication`上添加了`@ComponentScan`注解，此注解我们此前已经认识过了，但是这里并没有配置具体扫描的包，因此它会自动将声明此接口的类所在的包作为basePackage，因此当添加`@SpringBootApplication`之后也就等于直接开启了自动扫描，但是一定注意不能在主类之外的包进行Bean定义，否则无法扫描到，需要手动配置。\n\n接着我们来看第二个注解`@EnableAutoConfiguration`，它就是自动配置的核心了，我们来看看它是如何定义的：\n\n@Target({ElementType.TYPE})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@AutoConfigurationPackage\n@Import({AutoConfigurationImportSelector.class})\npublic @interface EnableAutoConfiguration {\n\n老套路了，直接一手`@Import`，通过这种方式来将一些外部的Bean加载到容器中。我们来看看AutoConfigurationImportSelector做了什么事情：\n\npublic class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered {\n...\n}\n\n我们看到它实现了很多接口，包括大量的Aware接口，实际上就是为了感知某些必要的对象，并将其存到当前类中。\n\n其中最核心的是`DeferredImportSelector`接口，它是`ImportSelector`的子类，它定义了`selectImports`方法，用于返回需要加载的类名称，在Spring加载ImportSelector类型的Bean时，会调用此方法来获取更多需要加载的类，并将这些类一并注册为Bean：\n\npublic interface ImportSelector {\nString\\[] selectImports(AnnotationMetadata importingClassMetadata);\n@Nullable\ndefault Predicate\\<String> getExclusionFilter() {\nreturn null;\n}\n}\n\n到目前为止，我们了解了两种使用`@Import`有特殊机制的接口：ImportSelector（这里用到的）和ImportBeanDefinitionRegistrar（之前Mybatis-spring源码有讲）当然还有普通的`@Configuration`配置类。\n\n我们可以来阅读一下`ConfigurationClassPostProcessor`的源码，看看它到底是如何处理`@Import`的：\n\npublic void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {\nList\\<BeanDefinitionHolder> configCandidates = new ArrayList();\n//注意这个阶段仅仅是已经完成扫描了所有的Bean，得到了所有的BeanDefinition，但是还没有进行任何区分\n//candidate是候选者的意思，一会会将标记了@Configuration的类作为ConfigurationClass加入到configCandidates中\nString\\[] candidateNames = registry.getBeanDefinitionNames();\nString\\[] var4 = candidateNames;\nint var5 = candidateNames.length;\nfor(int var6 = 0; var6 < var5; ++var6) {\nString beanName = var4\\[var6];\nBeanDefinition beanDef = registry.getBeanDefinition(beanName);\nif (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION\\_CLASS\\_ATTRIBUTE) != null) {\nif (this.logger.isDebugEnabled()) {\nthis.logger.debug(\"Bean definition has already been processed as a configuration class: \" + beanDef);\n}\n} else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {   //判断是否添加了@Configuration注解\nconfigCandidates.add(new BeanDefinitionHolder(beanDef, beanName));\n}\n}\nif (!configCandidates.isEmpty()) {\n//...省略\n//这里创建了一个ConfigurationClassParser用于解析配置类\nConfigurationClassParser parser = new ConfigurationClassParser(this.metadataReaderFactory, this.problemReporter, this.environment, this.resourceLoader, this.componentScanBeanNameGenerator, registry);\n//所有配置类的BeanDefinitionHolder列表\nSet\\<BeanDefinitionHolder> candidates = new LinkedHashSet(configCandidates);\n//已经解析完成的类\nHashSet alreadyParsed = new HashSet(configCandidates.size());\ndo {\n//这里省略，直到所有的配置类全部解析完成\n//注意在循环过程中可能会由于@Import新增更多的待解析配置类，一律丢进candidates集合中\n} while(!candidates.isEmpty());\n...\n}\n}\n\n我们接着来看，`ConfigurationClassParser`是如何进行解析的：\n\nprotected void processConfigurationClass(ConfigurationClass configClass, Predicate\\<String> filter) throws IOException {\n//@Conditional相关注解处理\n//后面会讲\nif (!this.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.PARSE\\_CONFIGURATION)) {\n...\n}\nConfigurationClassParser.SourceClass sourceClass = this.asSourceClass(configClass, filter);\ndo {\n//核心\nsourceClass = this.doProcessConfigurationClass(configClass, sourceClass, filter);\n} while(sourceClass != null);\nthis.configurationClasses.put(configClass, configClass);\n}\n}\n\n最后我们再来看最核心的`doProcessConfigurationClass`方法：\n\nprotected final SourceClass doProcessConfigurationClass(ConfigurationClass configClass, SourceClass sourceClass)\n...\nprocessImports(configClass, sourceClass, getImports(sourceClass), true);    // 处理Import注解\n...\nreturn null;\n}\n\nprivate void processImports(ConfigurationClass configClass, ConfigurationClassParser.SourceClass currentSourceClass, Collection\\<ConfigurationClassParser.SourceClass> importCandidates, Predicate\\<String> exclusionFilter, boolean checkForCircularImports) {\nif (!importCandidates.isEmpty()) {\nif (checkForCircularImports && this.isChainedImportOnStack(configClass)) {\nthis.problemReporter.error(new ConfigurationClassParser.CircularImportProblem(configClass, this.importStack));\n} else {\nthis.importStack.push(configClass);\ntry {\nIterator var6 = importCandidates.iterator();\nwhile(var6.hasNext()) {\nConfigurationClassParser.SourceClass candidate = (ConfigurationClassParser.SourceClass)var6.next();\nClass candidateClass;\n//如果是ImportSelector类型，继续进行运行\nif (candidate.isAssignable(ImportSelector.class)) {\ncandidateClass = candidate.loadClass();\nImportSelector selector = (ImportSelector)ParserStrategyUtils.instantiateClass(candidateClass, ImportSelector.class, this.environment, this.resourceLoader, this.registry);\nPredicate\\<String> selectorFilter = selector.getExclusionFilter();\nif (selectorFilter != null) {\nexclusionFilter = exclusionFilter.or(selectorFilter);\n}\n//如果是DeferredImportSelector的实现类，那么会走deferredImportSelectorHandler的handle方法\nif (selector instanceof DeferredImportSelector) {\nthis.deferredImportSelectorHandler.handle(configClass, (DeferredImportSelector)selector);\n//否则就按照正常的ImportSelector类型进行加载\n} else {\n//调用selectImports方法获取所有需要加载的类\nString\\[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());\nCollection\\<ConfigurationClassParser.SourceClass> importSourceClasses = this.asSourceClasses(importClassNames, exclusionFilter);\n//递归处理，直到没有\nthis.processImports(configClass, currentSourceClass, importSourceClasses, exclusionFilter, false);\n}\n//判断是否为ImportBeanDefinitionRegistrar类型\n} else if (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) {\ncandidateClass = candidate.loadClass();\nImportBeanDefinitionRegistrar registrar = (ImportBeanDefinitionRegistrar)ParserStrategyUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class, this.environment, this.resourceLoader, this.registry);\n//往configClass丢ImportBeanDefinitionRegistrar信息进去，之后再处理\nconfigClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());\n//否则按普通的配置类进行处理\n} else {\nthis.importStack.registerImport(currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());\nthis.processConfigurationClass(candidate.asConfigClass(configClass), exclusionFilter);\n}\n}\n} catch (BeanDefinitionStoreException var17) {\nthrow var17;\n} catch (Throwable var18) {\nthrow new BeanDefinitionStoreException(\"Failed to process import candidates for configuration class \\[\" + configClass.getMetadata().getClassName() + \"]\", var18);\n} finally {\nthis.importStack.pop();\n}\n}\n}\n}\n\n不难注意到，虽然这里额外处理了`ImportSelector`对象，但是还针对`ImportSelector`的子接口`DeferredImportSelector`进行了额外处理，Deferred是延迟的意思，它是一个延迟执行的`ImportSelector`，并不会立即进处理，而是丢进DeferredImportSelectorHandler，并且在`parse`方法的最后进行处理：\n\npublic void parse(Set\\<BeanDefinitionHolder> configCandidates) {\n...\nthis.deferredImportSelectorHandler.process();\n}\n\n我们接着来看`DeferredImportSelector`正好就有一个`process`方法：\n\npublic interface DeferredImportSelector extends ImportSelector {\n@Nullable\ndefault Class\\<? extends DeferredImportSelector.Group> getImportGroup() {\nreturn null;\n}\npublic interface Group {\nvoid process(AnnotationMetadata metadata, DeferredImportSelector selector);\nIterable\\<DeferredImportSelector.Group.Entry> selectImports();\npublic static class Entry {\n...\n\n最后经过ConfigurationClassParser处理完成后，通过`parser.getConfigurationClasses()`就能得到通过配置类导入了哪些额外的配置类。最后将这些配置类全部注册BeanDefinition，然后就可以交给接下来的Bean初始化过程去处理了。\n\nthis.reader.loadBeanDefinitions(configClasses);\n\n最后我们再去看`loadBeanDefinitions`是如何运行的：\n\npublic void loadBeanDefinitions(Set\\<ConfigurationClass> configurationModel) {\nConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator trackedConditionEvaluator = new ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator();\nIterator var3 = configurationModel.iterator();\nwhile(var3.hasNext()) {\nConfigurationClass configClass = (ConfigurationClass)var3.next();\nthis.loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator);\n}\n}\nprivate void loadBeanDefinitionsForConfigurationClass(ConfigurationClass configClass, ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator trackedConditionEvaluator) {\nif (trackedConditionEvaluator.shouldSkip(configClass)) {\nString beanName = configClass.getBeanName();\nif (StringUtils.hasLength(beanName) && this.registry.containsBeanDefinition(beanName)) {\nthis.registry.removeBeanDefinition(beanName);\n}\nthis.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());\n} else {\nif (configClass.isImported()) {\nthis.registerBeanDefinitionForImportedConfigurationClass(configClass);  //注册配置类自己\n}\nIterator var3 = configClass.getBeanMethods().iterator();\nwhile(var3.hasNext()) {\nBeanMethod beanMethod = (BeanMethod)var3.next();\nthis.loadBeanDefinitionsForBeanMethod(beanMethod); //注册@Bean注解标识的方法\n}\n//注册`@ImportResource`引入的XML配置文件中读取的bean定义\nthis.loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());\n//注册configClass中经过解析后保存的所有ImportBeanDefinitionRegistrar，注册对应的BeanDefinition\nthis.loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());\n}\n}\n\n这样，整个`@Configuration`配置类的底层配置流程我们就大致了解了。接着我们来看AutoConfigurationImportSelector是如何实现自动配置的，可以看到内部类AutoConfigurationGroup的process方法，它是父接口的实现，因为父接口是`DeferredImportSelector`，那么很容易得知，实际上最后会调用`process`方法获取所有的自动配置类：\n\npublic void process(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector) {\nAssert.state(deferredImportSelector instanceof AutoConfigurationImportSelector, () -> {\nreturn String.format(\"Only %s implementations are supported, got %s\", AutoConfigurationImportSelector.class.getSimpleName(), deferredImportSelector.getClass().getName());\n});\n//获取所有的Entry，其实就是，读取spring.factories来查看有哪些自动配置类\nAutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = ((AutoConfigurationImportSelector)deferredImportSelector).getAutoConfigurationEntry(annotationMetadata);\nthis.autoConfigurationEntries.add(autoConfigurationEntry);\nIterator var4 = autoConfigurationEntry.getConfigurations().iterator();\nwhile(var4.hasNext()) {\nString importClassName = (String)var4.next();\nthis.entries.putIfAbsent(importClassName, annotationMetadata);\n}\n}\n\n我们接着来看`getAutoConfigurationEntry`方法：\n\nprotected AutoConfigurationImportSelector.AutoConfigurationEntry getAutoConfigurationEntry(AnnotationMetadata annotationMetadata) {\n//判断是否开启了自动配置，是的，自动配置可以关\nif (!this.isEnabled(annotationMetadata)) {\nreturn EMPTY\\_ENTRY;\n} else {\n//根据注解定义获取一些属性\nAnnotationAttributes attributes = this.getAttributes(annotationMetadata);\n//得到spring.factories文件中所有需要自动配置的类\nList\\<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n... 这里先看前半部分\n}\n}\n\n注意这里并不是spring.factories文件中所有的自动配置类都会被加载，它会根据@Condition注解的条件进行加载。这样就能实现我们需要什么模块添加对应依赖就可以实现自动配置了。\n\n所有的源码看不懂，都源自于你的心中没有形成一个完整的闭环！一旦一条线推到头，闭环形成，所有疑惑迎刃而解。\n\n### 自定义Starter\n\n我们仿照Mybatis来编写一个自己的starter，Mybatis的starter包含两个部分：\n\n\\<project xmlns=\"<http://maven.apache.org/POM/4.0.0>\" xmlns:xsi=\"<http://www.w3.org/2001/XMLSchema-instance>\" xsi:schemaLocation=\"<http://maven.apache.org/POM/4.0.0> <http://maven.apache.org/xsd/maven-4.0.0.xsd\">>\n\\<modelVersion>4.0.0\\</modelVersion>\n\\<parent>\n\\<groupId>org.mybatis.spring.boot\\</groupId>\n\\<artifactId>mybatis-spring-boot\\</artifactId>\n\\<version>2.2.0\\</version>\n\\</parent>\n\\<!--  starter本身只做依赖集中管理，不编写任何代码  -->\n\\<artifactId>mybatis-spring-boot-starter\\</artifactId>\n\\<name>mybatis-spring-boot-starter\\</name>\n\\<properties>\n\\<module.name>org.mybatis.spring.boot.starter\\</module.name>\n\\</properties>\n\\<dependencies>\n\\<dependency>\n\\<groupId>org.springframework.boot\\</groupId>\n\\<artifactId>spring-boot-starter\\</artifactId>\n\\</dependency>\n\\<dependency>\n\\<groupId>org.springframework.boot\\</groupId>\n\\<artifactId>spring-boot-starter-jdbc\\</artifactId>\n\\</dependency>\n\\<!--  编写的专用配置模块   -->\n\\<dependency>\n\\<groupId>org.mybatis.spring.boot\\</groupId>\n\\<artifactId>mybatis-spring-boot-autoconfigure\\</artifactId>\n\\</dependency>\n\\<dependency>\n\\<groupId>org.mybatis\\</groupId>\n\\<artifactId>mybatis\\</artifactId>\n\\</dependency>\n\\<dependency>\n\\<groupId>org.mybatis\\</groupId>\n\\<artifactId>mybatis-spring\\</artifactId>\n\\</dependency>\n\\</dependencies>\n\\</project>\n\n因此我们也将我们自己的starter这样设计：\n\n我们设计三个模块：\n\n*   spring-boot-hello：基础业务功能模块\n\n*   spring-boot-starter-hello：启动器\n\n*   spring-boot-autoconifgurer-hello：自动配置依赖\n\n首先是基础业务功能模块，这里我们随便创建一个类就可以了：\n\npublic class HelloWorldService {\n\n}\n\n启动器主要做依赖管理，这里就不写任何代码，只写pom文件：\n\n\\<dependencies>\n\\<dependency>\n\\<groupId>org.example\\</groupId>\n\\<artifactId>spring-boot-autoconfigurer-hello\\</artifactId>\n\\<version>1.0-SNAPSHOT\\</version>\n\\</dependency>\n\\</dependencies>\n\n导入autoconfigurer模块作为依赖即可，接着我们去编写autoconfigurer模块，首先导入依赖：\n\n\\<dependencies>\n\\<dependency>\n\\<groupId>org.springframework.boot\\</groupId>\n\\<artifactId>spring-boot-autoconfigure\\</artifactId>\n\\<version>2.6.2\\</version>\n\\</dependency>\n\\<dependency>\n\\<groupId>org.springframework.boot\\</groupId>\n\\<artifactId>spring-boot-configuration-processor\\</artifactId>\n\\<version>2.6.2\\</version>\n\\<optional>true\\</optional>\n\\</dependency>\n\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.example&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-hello&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n\n\\</dependencies>\n\n接着创建一个HelloWorldAutoConfiguration作为自动配置类：\n\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnWebApplication\n@ConditionalOnClass(HelloWorldService.class)\n@EnableConfigurationProperties(HelloWorldProperties.class)\npublic class HelloWorldAutoConfiguration {\nLogger logger = Logger.getLogger(this.getClass().getName());\n@Resource\nHelloWorldProperties properties;\n@Bean\npublic HelloWorldService helloWorldService(){\nlogger.info(\"自定义starter项目已启动！\");\nlogger.info(\"读取到自定义配置：\"+properties.getValue());\nreturn new HelloWorldService();\n}\n}\n\n对应的配置读取类：\n\n@ConfigurationProperties(\"hello.world\")\npublic class HelloWorldProperties {\nprivate String value;\npublic void setValue(String value) {\nthis.value = value;\n}\npublic String getValue() {\nreturn value;\n}\n}\n\n最后再编写`spring.factories`文件，并将我们的自动配置类添加即可：\n\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.hello.autoconfigurer.HelloWorldAutoConfiguration\n\n最后再Maven根项目执行`install`安装到本地仓库，完成。接着就可以在其他项目中使用我们编写的自定义starter了。\n\n### Runner接口\n\n在项目中，可能会遇到这样一个问题：我们需要在项目启动完成之后，紧接着执行一段代码。\n\n我们可以编写自定义的ApplicationRunner来解决，它会在项目启动完成后执行：\n\n@Component\npublic class TestRunner implements ApplicationRunner {\n@Override\npublic void run(ApplicationArguments args) throws Exception {\nSystem.out.println(\"我是自定义执行！\");\n}\n}\n\n当然也可以使用CommandLineRunner，它也支持使用@Order或是实现Ordered接口来支持优先级执行。\n\n实际上它就是run方法的最后：\n\npublic ConfigurableApplicationContext run(String... args) {\n....\nlisteners.started(context, timeTakenToStartup);\n//这里已经完成整个SpringBoot项目启动，所以执行所有的Runner\nthis.callRunners(context, applicationArguments);\n} catch (Throwable var12) {\nthis.handleRunFailure(context, var12, listeners);\nthrow new IllegalStateException(var12);\n}\ntry {\nDuration timeTakenToReady = Duration.ofNanos(System.nanoTime() - startTime);\nlisteners.ready(context, timeTakenToReady);\nreturn context;\n} catch (Throwable var11) {\nthis.handleRunFailure(context, var11, (SpringApplicationRunListeners)null);\nthrow new IllegalStateException(var11);\n}\n}\n\n下一章，我们将继续讲解几乎程序员必会的Git版本控制。\n","categories":["Java","Springboot笔记"]},{"title":"SQL事务（非常详细）","url":"/2023/01/24/74716fee04044e3cb78e867d1d06d583/","content":"\n在数据库中，我们将一条 SQL 语句称为一次基本的操作。将若干条 SQL 语句“打包”在一起，共同执行一个完整的任务，这就是事务。\n事务（ Transaction）由一次或者多次基本操作构成，或者说，事务由一条或者多条 SQL 语句构成。\n事务有一个最显著的特征，就是它包含的所有 SQL 语句作为一个整体向数据库提交，只有所有的 SQL 语句都执行完成，整个事务才算成功，一旦某个 SQL 语句执行失败，整个事务就失败了。事务失败后需要回滚所有的 SQL 语句。\n事务中的所有 SQL 语句是一个整体，共同进退，不可分割，要么全部执行成功，要么全部执行失败。\n事务有很多实用的场景。例如对于电商网站，通常将用户订单存储在一张表中，将商品库存情况存储在另一张表中，当有用户下单时，需要执行两条 SQL 语句，一条负责更新订单表，一条负责更新库存表，这两条 SQL 语句必须同时执行成功。如果只有一条语句执行成功，另一条语句执行失败，将导致数据库出错，这种后果是无法接受的。\n为了避免出现意外，可以将以上两条语句放到一个事务中，其中一条语句执行失败时，数据库将回滚到原来的状态。对于买家来说，数据库回滚会导致下单失败，但这很容易处理，让买家再次下单即可。数据库的正确性永远是最重要的。\n其实我们平时使用数据库时，就已经在使用事务了，只不过这种事务只包含一条 SQL 语句，并且由数据库引擎自动封装和提交。这意味着，对于任何一条 SQL 语句，要么执行成功，要么执行失败，不能成功一部分，失败一部分。\n\n## 事务的属性\n\n一般来说，事务具有四个标准属性，分别是原子性（**A**tomicity，或称不可分割性）、一致性（**C**onsistency）、隔离性（**I**solation，又称独立性）、持久性（**D**urability），简称 **ACID**。具体说明如下：\n\n#### 1) 原子性\n\n一个事务中的所有 SQL 语句，要么全部执行成功，要么全部执行失败，不会结束在中间的某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。\n\n#### 2) 一致性\n\n在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的数据必须完全符合所有的预设规则，其中包含数据的精确度、串联性以及后续数据库可以自发性地完成预定的工作。\n\n#### 3) 隔离性\n\n数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。\n\n#### 4) 持久性\n\n事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n## 事务执行流程\n\n各种数据库对事务的支持细节不尽相同，本教程以 MySQL 数据库为例进行讲解，MySQL 使用标准 SQL 来支持事务。\n与事务控制有关的 SQL 命令包括：\n\n*   BEGIN 或者 START TRANSACTION：开始事务；\n*   COMMIT：提交事务；\n*   ROLLBACK：回滚事务；\n*   SAVEPOINT：在事务内部设置回滚标记点；\n*   RELEASE SAVEPOINT：删除回滚标记点；\n*   ROLLBACK TO：将事务回滚到标记点（ROLLBACK 命令的一种变形写法）。\n\n一个事务要么提交（Commit），要么回滚（Rollback），提交意味着成功，回滚意味着失败。编写事务代码时，以 BEGIN 命令开头，后跟一条或者多条 SQL 语句，最后书写 COMMIT 或者 ROLLBACK 命令；COMMIT 和 ROLLBACK 对应事务的两种状态，只能出现一个。\n事务控制命令仅能与 DML 类别的 SQL 命令一起使用，包括 INSERT、UPDATE、DELETE 和 SELECT，在创建或者删除表时不能使用事务，因为这些操作在数据库中是自动提交的。\n\n#### 1) 开始事务\n\n开始事务有以下两种命令，选择其一即可：\n\nBEGIN;\n\n或者\n\nSTART TRANSACTION;\n\n该命令用来标记一个事务的起始点。\n\n#### 2) 提交事务\n\n提交事务使用如下命令：\n\nCOMMIT;\n\n提交事务意味着真正执行事务包含的 SQL 语句，并把对数据库的修改写入到磁盘上的物理数据库中。COMMIT 意味着事务结束，并且执行成功。\n例如，有包含如下记录的 CUSTOMERS 表：\n\n    +----+----------+-----+-----------+----------+\n    | ID | NAME     | AGE | ADDRESS   | SALARY   |\n    +----+----------+-----+-----------+----------+\n    |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n    |  2 | Khilan   |  25 | Delhi     |  1500.00 |\n    |  3 | kaushik  |  23 | Kota      |  2000.00 |\n    +----+----------+-----+-----------+----------+\n\n打开一个 MySQL 命令行窗口（我们称它为 A 窗口），使用事务向表中插入两条数据：\n\n    mysql> BEGIN;\n    mysql> INSERT INTO CUSTOMERS (NAME, AGE, ADDRESS, SALARY) VALUES ('Chaitali', 25, 'Mumbai', 6500.00 );\n    mysql> INSERT INTO CUSTOMERS (NAME, AGE, ADDRESS, SALARY) VALUES ('Hardik', 27, 'Bhopal', 8500.00 );\n\n再打开另外一个 MYSQL 命令行窗口（我们称它为 B 窗口），使用 SELECT 命令查看 CUSTOMERS 表的内容：\n\n    mysql>  SELECT * FROM CUSTOMERS;\n    +----+---------+-----+-----------+--------+\n    | id | name    | age | address   | salary |\n    +----+---------+-----+-----------+--------+\n    |  1 | Ramesh  |  32 | Ahmedabad |   2000 |\n    |  2 | Khilan  |  25 | Delhi     |   1500 |\n    |  3 | Kaushik |  23 | Kota      |   2000 |\n    +----+---------+-----+-----------+--------+\n\n您看，A 窗口对表的修改并没有影响到 B 窗口，B 窗口只能查看到修改之前的内容，这说明 A 窗口的修改动作并没有立即更新到物理数据库，所以在其它会话窗口中无法看到。\n在 A 窗口中提交事务：\n\n    mysql> COMMIT;\n\n在 B 窗口中再次查看 CUSTOMERS 表的内容：\n\n    mysql>  SELECT * FROM CUSTOMERS;\n    +----+----------+-----+-----------+--------+\n    | id | name     | age | address   | salary |\n    +----+----------+-----+-----------+--------+\n    |  1 | Ramesh   |  32 | Ahmedabad |   2000 |\n    |  2 | Khilan   |  25 | Delhi     |   1500 |\n    |  3 | Kaushik  |  23 | Kota      |   2000 |\n    |  4 | Chaitali |  25 | Mumbai    |   6500 |\n    |  5 | Hardik   |  27 | Bhopal    |   8500 |\n    +----+----------+-----+-----------+--------+\n\n您看，在 A 窗口提交事务以后，对表所做的修改才真正更新到物理数据库中，所以才能在其它会话窗口中查看到 A 窗口中插入的数据。\n\n#### 3) 回滚事务\n\n回滚意味着撤销尚未保存到物理数据库中的操作，具体语法格式如下：\n\n    ROLLBACK;\n\n事务执行过程中如果发生了某种故障，事务不能继续执行，就可以撤销事务，此时对数据库的修改并不会保存到物理数据库中。撤销意味着事务结束，并且执行失败。\n例如，有包含如下记录的 CUSTOMERS 表：\n\n    +----+----------+-----+-----------+--------+\n    | id | name     | age | address   | salary |\n    +----+----------+-----+-----------+--------+\n    |  1 | Ramesh   |  32 | Ahmedabad |   2000 |\n    |  2 | Khilan   |  25 | Delhi     |   1500 |\n    |  3 | Kaushik  |  23 | Kota      |   2000 |\n    |  4 | Chaitali |  25 | Mumbai    |   6500 |\n    |  5 | Hardik   |  27 | Bhopal    |   8500 |\n    +----+----------+-----+-----------+--------+\n\n使用事务删除最后两个用户，并回滚：\n\n    mysql> BEGIN;\n    mysql> DELETE FROM CUSTOMERS WHERE ID=4;\n    mysql> DELETE FROM CUSTOMERS WHERE ID=5;\n    mysql> ROLLBACK;\n\n    mysql> SELECT * FROM CUSTOMERS;\n    +----+----------+-----+-----------+--------+\n    | id | name     | age | address   | salary |\n    +----+----------+-----+-----------+--------+\n    |  1 | Ramesh   |  32 | Ahmedabad |   2000 |\n    |  2 | Khilan   |  25 | Delhi     |   1500 |\n    |  3 | Kaushik  |  23 | Kota      |   2000 |\n    |  4 | Chaitali |  25 | Mumbai    |   6500 |\n    |  5 | Hardik   |  27 | Bhopal    |   8500 |\n    +----+----------+-----+-----------+--------+\n\n您看，回滚事务以后，物理数据库中的数据并没有发生改变，表中的内容和事务执行之前的内容一致。\n\n#### 4) 回滚标记点\n\nROLLBACK 命令默认回滚整个事务，也即事务中的所有修改操作都无效。但是 SQL 允许回滚事务的一部分，此时需要在事务中设置一个标记点，在该标记点之后的 SQL 语句将被回滚，之前的 SQL 语句将被成功执行。\n设置标记点使用 SAVEPOINT 命令，具体语法如下：\n\nSAVEPOINT point\\_name;\n\npoint\\_name 为标记点名字。\n回滚到标记点使用 ROLLBACK TO 命令，具体语法如下：\n\nROLLBACK TO point\\_name;\n\n例如，有包含如下记录的 CUSTOMERS 表：\n\n    +----+----------+-----+-----------+--------+\n    | id | name     | age | address   | salary |\n    +----+----------+-----+-----------+--------+\n    |  1 | Ramesh   |  32 | Ahmedabad |   2000 |\n    |  2 | Khilan   |  25 | Delhi     |   1500 |\n    |  3 | Kaushik  |  23 | Kota      |   2000 |\n    |  4 | Chaitali |  25 | Mumbai    |   6500 |\n    |  5 | Hardik   |  27 | Bhopal    |   8500 |\n    +----+----------+-----+-----------+--------+\n\n使用事务删除最后两个用户，并回滚到标记点：\n\n    mysql> BEGIN;\n    mysql> DELETE FROM CUSTOMERS WHERE ID=4;\n    mysql> SAVEPOINT sp;\n    mysql> DELETE FROM CUSTOMERS WHERE ID=5;\n    mysql> ROLLBACK TO sp;\n\n    mysql> SELECT * FROM CUSTOMERS;\n    +----+---------+-----+-----------+--------+\n    | id | name    | age | address   | salary |\n    +----+---------+-----+-----------+--------+\n    |  1 | Ramesh  |  32 | Ahmedabad |   2000 |\n    |  2 | Khilan  |  25 | Delhi     |   1500 |\n    |  3 | Kaushik |  23 | Kota      |   2000 |\n    |  5 | Hardik  |  27 | Bhopal    |   8500 |\n    +----+---------+-----+-----------+--------+\n","categories":["Java","JavaWeb笔记"]},{"title":"JavaWeb笔记（四）","url":"/2023/01/24/1c60970a20864932bc3ef0807b9fda67/","content":"\n\\*\\*提醒：\\*\\*还没有申请到IDEA专业版本授权的同学要抓紧了，很快就需要用到。\n\n经过前面基础内容的学习，现在我们就可以正式地进入Web开发的学习当中啦\\~\n\n本章节会讲解前端基础内容（如果已经学习过，可以直接跳到下一个大章节了）那么什么是前端，什么又是后端呢？\n\n*   前端：我们网站的页面，包括网站的样式、图片、视频等一切用户可见的内容都是前端的内容。\n*   后端：处理网站的所有数据来源，比如我们之前从数据库中查询数据，而我们查询的数据经过处理最终会被展示到前端，而用于处理前端数据的工作就是由后端来完成的。\n\n相当于，前端仅仅是一层皮，它直接决定了整个网站的美观程度，我们可以自由地编排页面的布局，甚至可以编写好看的特效；而灵魂则是后端，如何处理用户的交互、如何处理数据查询是后端的职责所在，我们前面学习的都是后端内容，而Java也是一门专注于后端开发的语言。\n\n对于前端开发我们需要学习一些新的内容，只有了解了它们，我们才能编写出美观的页面。\n\n本教程并不会过多地去讲解前端知识，我们只会提及一些必要的内容，我们主要学习的是JavaWeb，更倾向于后端开发，学习前端的目的只是为了让同学们了解前后端的交互方式，在进行后端开发时思路能够更加清晰，有关前端的完整内容学习，可以浏览其他前端知识教程。\n\n我们在最开始讲解网络编程时，提到了浏览器访问服务器，实际上浏览器访问服务器就是一种B/S结构，而我们使用Java代码编写的客户端连接服务器就是一种C/S结构。\n\nWeb开发还要从HTML开始讲起，这个语言非常简单，很好学习，看完视频如果你觉得前端简单自己更喜欢一些，建议马上转前端吧，还来得及，工资还比后端高，不像后端那么枯燥乏味。\n\n## HTML页面\n\n我们前面学习了XML语言，它是一种标记语言，我们需要以成对标签的格式进行填写，但是它是专用于保存数据，而不是展示数据，而HTML恰恰相反，它专用于展示数据，由于我们前面已经学习过XML语言了，HTML语言和XML很相似，所以我们学习起来会很快。\n\n### 第一个HTML页面\n\n我们前面知道，通过浏览器可以直接浏览XML文件，而浏览器一般是用于浏览HTML文件的，以HTML语言编写的内容，会被浏览器识别为一个页面，并根据我们编写的内容，将对应的组件添加到浏览器窗口中。\n\n我们一般使用Chrome、Safari、Microsoft Edge等浏览器进行测试，IE浏览器已经彻底淘汰了！\n\n比如我们可以创建一个Html文件来看看浏览器会如何识别，使用IDEA也能编写HTML页面，我们在IDEA中新建一个`Web模块`，进入之后我们发现，项目中没有任何内容，我们右键新建一个HTML文件，选择HTML5文件，并命名为index，创建后出现：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n</body>\n</html>\n```\n\n我们发现，它和XML基本长得一样，并且还自带了一些标签，那么现在我们通过浏览器来浏览这个HTML文件（这里推荐使用内置预览，不然还得来回切换窗口）\n\n我们发现现在什么东西都没有，但是在浏览器的标签位置显示了网页的名称为`Title`，并且显示了一个IDEA的图标作为网页图标。\n\n现在我们稍微进行一些修改：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>lbw的直播间</title>\n</head>\n<body>\n    现在全体起立\n</body>\n</html>\n```\n\n再次打开浏览器，我们发现页面中出现了我们输入的文本内容，并且标题也改为了我们自定义的标题。\n\n我们可以在设置->工具->Web浏览器和预览中将重新加载页面规则改为`变更时`，这样我们使用内置浏览器或是外部浏览器，可以自动更新我们编写的内容。\n\n我们还可以在页面中添加一个图片，随便将一张图片放到html文件的同级目录下，命名为`image.xxx`，其中xxx是后缀名称，不要修改，我们在body节点中添加以下内容：\n\n```html\n<img width=\"300\" src=\"image.xxx\" alt=\"剑光如我，斩尽牛杂\">\n<!--  注意xxx替换成对应的后缀名称  -->\n```\n\n我们发现，我们的页面中居然能够显示我们添加的图片内容。因此，我们只需要编写对应的标签，浏览器就能够自动识别为对应的组件，并将其展示到我们的浏览器窗口中。\n\n我们再来看看插入一个B站的视频，很简单，只需要到对应的视频下方，找到分享，我们看到有一个嵌入代码：\n\n```html\n<iframe src=\"//player.bilibili.com/player.html?aid=333231998&bvid=BV1rA411g7q8&cid=346917516&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"500\"> </iframe>\n```\n\n每一个页面都是通过这些标签来编写的，几乎所有的网站都是使用HTML编写页面。\n\n### HTML语法规范\n\n一个HTML文件中一般分为两个部分：\n\n*   头部：一般包含页面的标题、页面的图标、还有页面的一些设置，也可以在这里导入css、js等内容。\n*   主体：整个页面所有需要显示的内容全部在主体编写。\n\n我们首先来看头部，我们之前使用的HTML文件中头部包含了这些内容：\n\n```html\n<meta charset=\"UTF-8\">\n<title>lbw的直播间</title>\n```\n\n首先`meta`标签用于定义页面的一些元信息，这里使用它来定义了一个字符集（编码格式），一般是UTF-8，下面的`title`标签就是页面的标题，会显示在浏览器的上方。我们现在来给页面设置一个图标，图标一般可以在字节跳动的IconPark网站找到：<https://iconpark.oceanengine.com/home，选择一个自己喜欢的图标下载即可。>\n\n将图标放入到项目目录中，并命名为icon.png，在HTML头部添加以下内容：\n\n```html\n<link rel=\"icon\" href=\"icon.png\" type=\"image/x-icon\" />\n```\n\n`link`标签用于关联当前HTML页面与其他资源的关系，关系通过`rel`属性指定，这里使用的是icon表示这个文件是当前页面图标。\n\n现在访问此页面，我们发现页面的图标已经变成我们指定的图标样式了。\n\n现在我们再来看主体，我们可以在主体内部编写该页面要展示的所有内容，比如我们之前就用到了img标签来展示一个图片，其中每一个标签都称为一个元素：\n\n```html\n<img width=\"300\" src=\"image.xxx\" alt=\"当图片加载失败时，显示的文本\">\n```\n\n我们发现，这个标签只存在一个，并没有成对出现，HTML中有些标签是单标签，也就是说只有这一个，还有一些标签是双标签，必须成对出现，HTML中，也不允许交叉嵌套，但是出现交叉嵌套时，浏览器并不会提示错误，而是仍旧尝试去解析这些内容，甚至会帮助我们进行一定程度的修复，比如：\n\n```html\n<body>\n\n    <iframe src=\"//player.bilibili.com/player.html?aid=333231998&bvid=BV1rA411g7q8&cid=346917516&page=1\" width=\"800\" height=\"500\"\n            scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\">\n</body>\n</iframe>\n```\n\n很明显上面的代码已经出现交叉嵌套的情况了，但是依然能够在浏览器中正确地显示。\n\n在主体中，我们一般使用div标签来分割页面：\n\n```html\n<body>\n    <div>我是第一块</div>\n    <div>我是第二块</div>\n</body>\n```\n\n通过使用`div`标签，我们将整个页面按行划分，而高度就是内部元素的高度，那么如果只希望按元素划分，也就是说元素占多大就划分多大的空间，那么我们就可以使用`span`标签来划分：\n\n```html\n<body>\n    <div>\n        <span>我是第一块第一个部分</span>\n        <span>我是第一块第二个部分</span>\n    </div>\n    <div>我是第二块</div>\n</body>\n```\n\n我们也可以使用`p`段落标签，它一般用于文章分段：\n\n```html\n<body>\n    <p>\n        你看这个彬彬啊，才喝几罐就醉了，真的太逊了。 这个彬彬就是逊呀！\n        听你这么说，你很勇哦？ 开玩笑，我超勇的，超会喝的啦。\n        超会喝，很勇嘛。身材不错哦，蛮结实的嘛。\n    </p>\n    <p>\n        哎，杰哥，你干嘛啊。都几岁了，还那么害羞！我看你，完全是不懂哦！\n        懂，懂什么啊？ 你想懂？我房里有一些好康的。\n        好康，是新游戏哦！ 什么新游戏，比游戏还刺激！\n    </p>\n    <p>\n        杰哥，这是什么啊？ 哎呦，你脸红啦！来，让我看看。\n        不要啦！！ 让我看看嘛。 不要啦，杰哥，你干嘛啊！\n        让我看看你法语正不正常啊！\n    </p>\n</body>\n```\n\n那么如果遇到特殊字符该怎么办呢？和XML一样，我们可以使用转义字符：\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.51wendang.com%2Fpic%2F208288d7561926f359c6be84%2F1-352-jpg_6_0_______-356-0-0-356.jpg\\&refer=http%3A%2F%2Fwww.51wendang.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1639877607\\&t=bcc1fcfe8bae53e90c365a4fd8c00a1c)\n\n\\*\\*注意：\\*\\*多个连续的空格字符只能被识别为一个，如果需要连续多个必须使用转义字符，同时也不会识别换行，换行只会变成一个空格，需要换行必须使用`br`标签。\n\n通过了解了HTML的一些基础语法，我们现在就知道一个页面大致是如何编写了。\n\n### HTML常用标签\n\n前面我们已经了解了HTML的基本语法规范，那么现在我们就来看看，有哪些常用的标签吧，首先是换行和分割线：\n\n*   br 换行\n*   hr 分割线\n\n```html\n<body>\n    <div>\n        我是一段文字<br>我是第二段文字\n    </div>\n    <hr>\n    <div>我是底部文字</div>\n</body>\n```\n\n标题一般用h1到h6表示，我们来看看效果：\n\n```html\n<body>\n<h1>一级标题</h1>\n<h2>二级标题</h2>\n<h3>三级标题</h3>\n<h4>四级标题</h4>\n<h5>五级标题</h5>\n<h6>六级标题</h6>\n<p>我是正文内容，真不错。</p>\n</body>\n```\n\n现在我们来看看超链接，我们可以添加一个链接用于指向其他网站：\n\n```html\n<a href=\"https://www.bilibili.com\">点击访问小破站</a>\n```\n\n我们也可以指定页面上的一个锚点进行滚动：\n\n```html\n<body>\n<a href=\"#test\">跳转锚点</a>\n<img src=\"image.jpeg\" width=\"500\">\n<img src=\"image.jpeg\" width=\"500\">\n<img src=\"image.jpeg\" width=\"500\">\n<img src=\"image.jpeg\" width=\"500\">\n<div id=\"test\">我是锚点</div>\n<img src=\"image.jpeg\" width=\"500\">\n<img src=\"image.jpeg\" width=\"500\">\n<img src=\"image.jpeg\" width=\"500\">\n</body>\n```\n\n每个元素都可以有一个id属性，我们只需要给元素添加一个id属性，就使用a标签可以跳转到一个指定锚点。\n\n我们接着来看看列表元素，这是一个无需列表，其中每一个`li`表示一个列表项：\n\n```html\n<ul>\n    <li>一号选项</li>\n    <li>二号选项</li>\n    <li>三号选项</li>\n    <li>四号选项</li>\n    <li>五号选项</li>\n</ul>\n```\n\n我们也可以使用`ol`来显示一个有序列表：\n\n```html\n<ol>\n    <li>一号选项</li>\n    <li>二号选项</li>\n    <li>三号选项</li>\n    <li>四号选项</li>\n    <li>五号选项</li>\n</ol>\n```\n\n表格也是很重要的一种元素，但是它编写起来相对有一点麻烦：\n\n```html\n<table>\n    <thead>\n    <tr>\n        <th>学号</th>\n        <th>姓名</th>\n        <th>性别</th>\n        <th>年级</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>0001</td>\n        <td>小明</td>\n        <td>男</td>\n        <td>2019</td>\n    </tr>\n    <tr>\n        <td>0002</td>\n        <td>小红</td>\n        <td>女</td>\n        <td>2020</td>\n    </tr>\n    </tbody>\n</table>\n```\n\n虽然这样生成了一个表格，但是这个表格并没有分割线，并且格式也不符合我们想要的样式，那么如何才能修改这些基础属性的样式呢，我们就需要聊聊CSS了。\n\n### HTML表单\n\n表单就像其名字一样，用户在页面中填写了对应的内容，点击按钮就可以提交到后台，比如登陆界面，就可以使用表单来实现：\n\n一个网页中最重要的当属输入框和按钮了，那么我们来看看如何创建一个输入框和按钮：\n\n```html\n<label>\n    我是输入框\n    <input type=\"text\">\n</label>\n```\n\n对于一个输入框，我们一般会将其包括在一个`lable`标签中，它和span效果一样，但是我们点击前面文字也能快速获取输入框焦点。\n\n```html\n<body>\n<div>登陆我们的网站</div>\n<hr>\n<div>\n    <label>\n        账号：\n        <input type=\"text\">\n    </label>\n</div>\n<div>\n    <label>\n        密码：\n        <input type=\"password\">\n    </label>\n</div>\n</body>\n```\n\n输入框可以有很多类型，我们来试试看password，现在输入内容就不会直接展示原文了。\n\n创建一个按钮有以下几种方式，在学习JavaWeb时，我们更推荐第二种方式，我们后面进行登陆操作需要配合表单使用：\n\n```html\n<button>登陆</button>\n<input type=\"submit\" value=\"登陆\">\n<input type=\"button\" value=\"登陆\">\n```\n\n现在我们就可以写一个大致的登陆页面了：\n\n```html\n<body>\n    <h1>登陆我们的网站</h1>\n    <form>\n        <div>\n            <label>\n                账号：\n                <input type=\"text\" placeholder=\"Username...\">\n            </label>\n        </div>\n        <div>\n            <label>\n                密���：\n                <input type=\"password\" placeholder=\"Password...\">\n            </label>\n        </div>\n        <br>\n        <a href=\"https://www.baidu.com\">忘记密码</a>\n        <br>\n        <br>\n        <div>\n            <input type=\"submit\" value=\"登陆\">\n        </div>\n    </form>\n</body>\n```\n\n表单一般使用`form`标签将其囊括，但是现在我们还用不到表单提交，因此之后我们再来讲解表单的提交。\n\n`input`只能实现单行文本，那么如何实现多行文本呢？\n\n```html\n<label>\n    这是我们的文本框<br>\n    <textarea placeholder=\"文本内容...\" cols=\"10\" rows=\"10\"></textarea>\n</label>\n```\n\n我们还可以指定默认的行数和列数，拖动左下角可以自定义文本框的大小。\n\n我们还可以在页面中添加勾选框：\n\n```html\n<label>\n    <input type=\"checkbox\">\n    我同意本网站的隐私政策\n</label>\n```\n\n上面演示的是一个多选框，那么我们来看看单选框：\n\n```html\n<label>\n    <input type=\"radio\" name=\"role\">\n    学生\n</label>\n<label>\n    <input type=\"radio\" name=\"role\">\n    教师\n</label>\n```\n\n这里需要使用name属性进行分组，同一个组内的选项只能选择一个。\n\n我们也可以添加列表让用户进行选择，创建一个下拉列表：\n\n```html\n<label>\n    登陆身份：\n    <select>\n        <option>学生</option>\n        <option>教师</option>\n    </select>\n</label>\n```\n\n默认选取的是第一个选项，我们可以通过`selected`属性来决定默认使用的是哪个选项。\n\n当然，HTML的元素远不止我们所提到的这些，有关更多HTML元素的内容，可以自行了解。\n\n***\n\n## CSS样式\n\n之前我们编写的页面非常基础，我们只能通过一些很基本的属性来排列我们的页面元素，那么如何实现更高度的自定义呢，我们就需要用到CSS来自定义样式，首先我们创建一个名为`style.css`的文件。\n\n首先在我们HTML文件的头部添加：\n\n```html\n<link href=\"style.css\" rel=\"stylesheet\">\n```\n\n我们在CSS文件中添加以下内容：\n\n```css\nbody {\n    text-align: center;\n}\n```\n\n我们发现，网页的内容全部变为居中显示了，这正是css在生效，相当于我们现在给页面添加了自定义的样式规则。\n\n当然，我们也可以选择不使用CSS，而是直接对某个元素添加样式：\n\n```html\n<body style=\"text-align: center;\">\n  ...\n```\n\n这样的效果其实是等同于上面的css文件的，相当于我们直接把样式定义在指定元素上。\n\n也可以在头部直接定义样式，而不是使用外部文件：\n\n```html\n<style>\n    body {\n        text-align: center;\n    }\n</style>\n```\n\n使用以上三种方式都可以自定义页面的样式，我们推荐使用还是第一种，不然我们的代码会很繁杂。\n\n样式的属性是非常多的，我们不可能一个一个全部讲完，视频中用到什么再来讲解什么，如果同学们感兴趣，可以自行下去了解。\n\n### CSS选择器\n\n我们首先来了解一下选择器，那么什么是选择器呢？我们想要自定义一个元素的样式，那么我们肯定要去选择某个元素，只有先找到要自定义的元素，我们才能开始编写样式。\n\n我们上面的例子中使用的就是标签名选择器，它可以快速选择页面中所有指定的的标签，比如我们之前使用的就是`body`标签，那么就相当于页面中所有的body元素全都使用此样式，那么我们现在来试试看选择页面中所有的`input`标签：\n\n```css\ninput {\n    width: 200px;\n}\n```\n\n我们发现，页面中所有的`input`元素宽度全部被设定为了200个像素（`px`是单位大小，代表像素，除了`px`还有`em`和`rem`，他们是根据当前元素字体大小决定的相对大小，一般用于适配各种大小的浏览器窗口，这里暂时不用）\n\n样式编写完成后，如果只有一个属性，可以不带`;`若多个属性则每个属性后面都需要添加一个`;`\n\n因此，一个标签选择器的格式为：\n\n```css\n标签名称 {\n  属性名称: 属性值\n}\n```\n\n我们还可以设定输入框的字体大小、行高等：\n\n```css\ninput {\n    width: 200px;\n    font-size: 20px;\n    line-height: 40px;\n}\n```\n\n我们现在可以通过选择器快速地去设置某个元素样式了，那么如何实现只设置某个元素的样式呢，现在我们来看看，id选择器，我们之前已经讲解过了，每个元素都可以有一个id属性，我们可以将其当做一个跳转的锚点使用，而现在，我们可以使用css来进行定位：\n\n我们先为元素添加id属性：\n\n```html\n<h1 id=\"title\">登陆我们的网站</h1>\n```\n\n现在使用CSS选择我们的元素，并设定一个属性，选择某个id需要在前面加上一个`#`：\n\n```css\n#title {\n    color: red;\n}\n```\n\n虽然id选择器已经可以很方便的指定某个元素，但是如果我们希望n个但不是元素都被选择，id选择器就无法实现了，因为每个元素的id是唯一的，不允许出现重复id的元素，因此接着我们来讲解一下类选择器。\n\n每个元素都可以有一个`class`属性，表示当前元素属于某个类（注意这里的类和我们Java中的类概念完全不同）一个元素可以属于很多个类，一个类也可以被很多个元素使用：\n\n```html\n<form>\n    <div >\n        <label class=\"test\">\n            账号：\n            <input type=\"text\" placeholder=\"Username...\">\n        </label>\n    </div>\n    <div>\n        <label class=\"test\">\n            密码：\n            <input type=\"password\" placeholder=\"Password...\">\n        </label>\n    </div>\n</form>\n```\n\n上面的例子中，两个`label`元素都使用了`test`类（类名称是我们自定义的），现在我们在css文件中编写以下内容来以类进行选择：\n\n``` css\n.test{\n    color: blue;\n}\n```\n\n我们发现，两个标签的文本内容都变为了蓝色，因此使用类选择器，能够对所有为此类的元素添加样式。注意在进行类选择时，我们需要在类名前面加上`.`来表示。\n\n### 组合选择器和优先级问题\n\n我们也可以让多个选择器，共用一个css样式：\n\n```css\n.test, #title {\n    color: red;\n}\n```\n\n只需要并排写即可，注意中间需要添加一个英文的逗号用于分割，我们也可以使用`*`来一次性选择所有的元素：\n\n```css\n* {\n    color: red;\n}\n```\n\n我们还可以选择位于某个元素内的某个元素：\n\n```css\ndiv label {\n    color: red;\n}\n```\n\n这样的话，就会选择所有位于div元素中的label元素。\n\n当然，我们这里只介绍了一些常用的选择器，有关详细的CSS选择器可以查阅：<https://www.runoob.com/cssref/css-selectors.html>\n\n我们接着来看一下选择器的优先级：\n\n![img](https://img2020.cnblogs.com/blog/1864877/202004/1864877-20200408234042787-674324294.png)\n\n我们根据上面的信息，来测试一下，首先编写一下HTML文件：\n\n```html\n<body>\n    <div class=\"test\" id=\"simple\" style=\"color: blue\">我是测试文本内容</div>\n</body>\n```\n\n现在我们来编写一下css文件：\n\n```css\n.test {\n    color: yellow;\n}\n\n#simple {\n    color: red;\n}\n\n* {\n    color: palegreen;\n}\n```\n\n那么现在我们可以看到，实际上生效的是我们直接编写在标签内部的内联属性，那么现在我们依次进行移除，来看看它们的优先级。\n\n那么如果我们希望某个属性无视任何的优先级，我们可以在属性后面添加`!important`标记，表示此属性是一个重要属性，它的优先级会被置为最高。\n\n\\*\\*思考：\\*\\*那要是我每个选择器的这个属性后面都加一个`!important`会怎么样？\n\n### 自定义边距\n\n我们来看看，如何使用css控制一个div板块的样式，首先编写以下代码，相当于一个div嵌套了一个div元素：\n\n```html\n<div id=\"outer\">\n    <div id=\"inner\">\n        \n    </div>\n</div>\n```\n\n现在编写一下自定义的css样式，我们将div设定为固定大小，并且背景颜色添加为绿色：\n\n```css\n#outer {\n    background: palegreen;\n    width: 300px;\n    height: 300px;\n}\n```\n\n我们发现左侧快速预览页面存在空隙，这是因为浏览器给我们添加了一个边距属性，我们只需要覆盖此属性并将其设定为0即可：\n\n```css\nbody {\n    margin: 0;\n}\n```\n\n现在我们给内部嵌套的div也设定一个大小，并将颜色设定为橙色：\n\n```css\n#inner {\n    background: darkorange;\n    width: 100px;\n    height: 100px;\n}\n```\n\n现在我们发现内部的div元素位于右上角，我们还可以以百分比的形式来指定大小：\n\n```css\n#inner {\n    background: darkorange;\n    width: 100%;\n    height: 100%;\n}\n```\n\n百分比会依照当前可用大小来进行分配，比如当前位于一个div内部，并且外部div元素是固定大小300px，因此100%就相当于使用了外部的全部大小，也是300px，现在内部元素完全将外部元素覆盖了，整个元素现在呈现为橙色。\n\n我们可以为一个元素设定边距，边距分为外边距和内边距，外部元素内边距决定了内部元素与外部元素之间的间隔，我们来修改一下css样式：\n\n```css\n#outer {\n    background: palegreen;\n    width: 300px;\n    height: 300px;\n    padding: 10px;\n}\n```\n\n我们发现，内部的div元素小了一圈，这是因为外部div元素设定了内边距，上下左右都被设定为10px大小。\n\n而我们发现，实际上我们在一开始也是将body的外边距设定为了0，整个页面跟浏览器窗口直接间隔0px的宽度。\n\n### 编写一个漂亮的登陆界面\n\n现在我们就来尝试编写一个漂亮的登陆界面吧！\n\n***\n\n## JavaScript语言\n\n也称为js，是我们整个前端基础的重点内容，只有了解了JavaScript语言，我们才能了解前端如何与后端交互。\n\nJavaScript与Java没有毛关系，仅仅只是名字中包含了Java而已，跟Java比起来，它更像Python，它是一门解释型语言，不需要进行编译，它甚至可以直接在浏览器的命令窗口中运行。\n\n它相当于是前端静态页面的一个补充，它可以让一个普通的页面在后台执行一些程序，比如我们点击一个按钮，我们可能希望执行某些操作，比如下载文件、页面跳转、页面弹窗、进行登陆等，都可以使用JavaScript来帮助我们实现。\n\n我们来看看一个简单的JavaScript程序：\n\n```js\nconst arr = [0, 2, 1, 5, 9, 3, 4, 6, 7, 8]\n\nfor (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length - 1; j++) {\n        if(arr[j] > arr[j+1]){\n            const tmp = arr[j]\n            arr[j] = arr[j+1]\n            arr[j+1] = tmp\n        }\n    }\n}\n\nwindow.alert(arr)\n```\n\n这段代码实际上就是实现了一个冒泡排序算法，我们可以直接在页面的头部中引用此js文件，浏览器会在加载时自动执行js文件中编写的内容：\n\n```html\n<script src=\"test.js\"></script>\n```\n\n我们发现JS的语法和Java非常相似，但是它还是和Java存在一些不同之处，而且存在很多阴间语法，那么我们来看看JS的语法。\n\n### JavaScript基本语法\n\n在js中，定义变量和Java中有一些不同，定义一个变量可以使用`let`关键字或是`var`关键字，IDEA推荐我们使用`let`关键字，因为`var`存在一定的设计缺陷（这里就不做讲解了，之后一律使用let关键字进行变量声明）：\n\n```js\nlet a = 10;\na++;\nwindow.alert(a)\n```\n\n上面的结果中，我们得到了a的结果是11，也就是说自增和自减运算在JS中也是支持的，并且JS每一句结尾可以不用加分号。\n\njs并不是Java那样的强类型语言（任意变量的类型一定是明确的），它是一门弱类型语言，变量的类型并不会在一开始确定，因此我们在定义变量时无需指定变量的确切类型，而是在运行时动态解析类型：\n\n```js\nlet a = 10;\na = \"HelloWorld！\"\nconsole.info(a)\n```\n\n我们发现，变量a已经被赋值为数字类型，但是我们依然在后续能将其赋值一个字符串，它的类型是随时可变的。\n\n很多人说，这种变态的类型机制是JS的一大缺陷。\n\n世界上只有两种语言：一种是很多人骂的，一种是没人用的。\n\n我们接着来看看，JS中存在的基本数据类型：\n\n*   Number：数字类型（包括小数和整数）\n*   String：字符串类型（可以使用单引号或是双引号）\n*   Boolean：布尔类型（与Java一致）\n\n还包括一些特殊值：\n\n*   undefined：未定义 - 变量声明但不赋值默认为undefined\n\n*   null：空值 - 等同于Java中的null\n\n*   NaN：非数字 - 值不是合法数字，比如：\n\n    ```js\n    window.alert(100/'xx')\n    ```\n\n我们可以使用`typeof`关键字来查看当前变量值的类型：\n\n```js\nlet a = 10;\nconsole.info(typeof a)\na = 'Hello World'\nconsole.info(typeof a)\n```\n\n### JavaScript逻辑运算和流程控制\n\n我们接着来看看js中的关系运算符，包括如下8个关系运算符：大于（>）,小于（<）,小于等于（<=）,大于等于（>=）,相等（==），不等（!=），全等（===），不全等（!==）\n\n其实关系运算符大致和Java中的使用方法一致，不过它还可以进行字符串比较，有点像C++的语法：\n\n```js\nconsole.info(666 > 777)\nconsole.info('aa' > 'ab')\n```\n\n那么，相等和全等有什么区别呢？\n\n```java\nconsole.info('10' == 10)\nconsole.info('10' === 10)\n```\n\n我们发现，在Java中，若运算符两边是不同的基本数据类型，会直接得到false，而JS中却不像这样，我们发现字符串的10居然等于数字10，而使用全等判断才是我们希望的结果。\n\n`==`的比较规则是：当操作数类型一样时，比较的规则和恒等运算符一样，都相等才相等，如果两个操作数是字符串，则进行字符串的比较，如果里面有一个操作数不是字符串，那两个操作数通过Number()方法进行转换，转成数字进行比较。\n\n因此，我们上面进行的判断实际上是运算符两边都进行了数字转换的结果进行比较，自然也就得到了true，而全等判断才是我们在Java中认识的相等判断。\n\n我们接着来看逻辑运算，JS中包括&&、||、&、|、?:等，我们先来看看位运算符：\n\n```js\nconsole.info(4 & 7)\nconsole.info(4 | 7)\n```\n\n实际上和Java中是一样的，那么我再来看看逻辑运算：\n\n```js\nconsole.info(true || false)\n```\n\n对于boolean变量的判断，是与Java一致的，但是JS也可以使用非Boolen类型变量进行判断：\n\n```js\nconsole.info(!0)\nconsole.info(!1)\n```\n\n和C/C++语言一样，0代表false，非0代表true，那么字符串呢？\n\n```js\nconsole.info(!\"a\")\nconsole.info(!\"\")\n```\n\n我们发现，空串为false，非空串为true，我们再来看看：\n\n```js\nconsole.info(true || 7)\nconsole.info(7 || true)\n```\n\n我们发现，前者得到的结果为true，而后者得到的结果却是是7，真是滑天下之大稽，什么鬼玩意，实际上是因为，默认非0都是true，而后者又是先判断的7，因此会直接得到7而不是被转换为true\n\n那么我们再来看看几个特殊值默认代表什么：\n\n```js\nconsole.info(!undefined)\nconsole.info(!null)\nconsole.info(!NaN)\n```\n\n最后来使用一下三元运算符，实际上和Java中是一样的：\n\n```js\nlet a = true ? \"xx\" : 20\nconsole.info(a)\n```\n\n得益于JS的动态类型，emmm，三元运算符不一定需要固定的返回值类型。\n\nJS的分支结构，实际上和Java是一样的，也是使用if-else语句来进行：\n\n```js\nif(\"lbwnb\"){   //非空串为true\n    console.info(\"!!!\")\n} else {\n    console.info(\"???\")\n}\n```\n\n同理，多分支语句也能实现：\n\n```js\nif(\"\"){\n    console.info(\"!!!\")\n} else if(-666){\n    console.info(\"???\")\n} else {\n    console.info(\"O.O\")\n}\n```\n\n当然，多分支语句也可以使用switch来完成：\n\n```js\nlet a = \"a\"\nswitch (a){\n    case \"a\":\n        console.info(\"1\")\n        break\n    case \"b\":\n        console.info(\"2\")\n        break\n    case \"c\":\n        console.info(\"3\")\n        break\n    default:\n        console.info(\"4\")\n}\n```\n\n接着我们来看看循环结构，其实循环结构也和Java相差不大：\n\n```js\nlet i = 10\nwhile(i--){\n    console.info(\"100\")\n}\n```\n\n```js\nfor (let i = 0; i < 10; i++) {\n    console.info(\"??\")\n}\n```\n\n### JavaScript函数定义\n\nJS中的方法和Java中的方法定义不太一样，JS中一般称其为函数，我们来看看定义一个函数的格式是什么：\n\n```js\nfunction f() {\n    console.info(\"有一个人前来买瓜\")\n}\n```\n\n定义一个函数，需要在前面加上`function`关键字表示这是一个函数，后面跟上函数名称和`()`，其中可以包含参数，在`{}`中编写函数代码。我们只需要直接使用函数名+`()`就能调用函数：\n\n```js\nf();\n```\n\n我们接着来看一下，如何给函数添加形式参数以及返回值：\n\n```js\nfunction f(a) {\n    console.info(\"得到的实参为：\"+a)\n    return 666\n}\n\nf(\"aa\");\n```\n\n由于JS是动态类型，因此我们不必指明参数a的类型，同时也不必指明返回值的类型，一个函数可能返回不同类型的结果，因此直接编写return语句即可。同理，我们可以在调用函数时，不传参，那么默认会使用undefined：\n\n```js\nfunction f(a) {\n    console.info(\"得到的实参为：\"+a)\n    return 666\n}\n\nf();\n```\n\n那么如果我们希望不传参的时候使用我们自定义的默认值呢？\n\n```js\nfunction f(a = \"6666\") {\n    console.info(\"得到的实参为：\"+a)\n    return 666\n}\n\nf();\n```\n\n我们可以直接在形参后面指定默认值。\n\n函数本身也是一种类型，他可以被变量接收，所有函数类型的变量，也可以直接被调用：\n\n```js\nfunction f(a = \"6666\") {\n    console.info(\"得到的实参为：\"+a)\n    return 666\n}\n\nlet k = f;\nk();\n```\n\n我们也可以直接将匿名函数赋值给变量：\n\n```js\nlet f = function (str) {\n    console.info(\"实参为：\"+str)\n}\n```\n\n既然函数是一种类型，那么函数也能作为一个参数进行传递：\n\n```js\nfunction f(test) {\n    test();\n}\n\nf(function () {\n    console.info(\"这是一个匿名函数\")\n})\n```\n\n对于所有的匿名函数，可以像Java的匿名接口实现一样编写lambda表达式：\n\n```js\nfunction f(test) {\n    test();\n}\n\nf(() => {\n    console.info(\"可以，不跟你多bb\")\n})\n```\n\n```js\nfunction f(test) {\n    test(\"这个是回调参数\");\n}\n\nf(param => {\n    console.info(\"接受到回调参数：\"+param)\n})\n```\n\n### JavaScript数组和对象\n\nJS中的数组定义与Java不同，它更像是Python中的列表，数组中的每个元素并不需要时同样的类型：\n\n```js\nlet arr = [1, \"lbwnb\", false, undefined, NaN]\n```\n\n我们可以直接使用下标来访问：\n\n```js\nlet arr = [1, \"lbwnb\", false, undefined, NaN]\nconsole.info(arr[1])\n```\n\n我们一开始编写的排序算法，也是使用了数组。\n\n数组还可以动态扩容，如果我们尝试访问超出数组长度的元素，并不会出现错误，而是得到undefined，同样的，我们也可以直接往超出数组长度的地方设置元素：\n\n```js\nlet arr = [1, \"lbwnb\", false, undefined, NaN]\narr[5] = \"???\"\nconsole.info(arr)\n```\n\n也可以使用`push`和`pop`来实现栈操作：\n\n```js\nlet arr = [1, \"lbwnb\", false, undefined, NaN]\narr.push(\"bbb\")\nconsole.info(arr.pop())\nconsole.info(arr)\n```\n\n数组还包括一些其他的方法，这里就不一一列出了：\n\n```js\nlet arr = [1, \"lbwnb\", false, undefined, NaN]\narr.fill(1)\nconsole.info(arr.map(o => {\n    return 'xxx'+o\n}))\n```\n\n我们接着来看对象，JS中也能定义对象，但是这里的对象有点颠覆我们的认知：\n\n```js\nlet obj = new Object()\nlet obj = {}\n```\n\n以上两种写法都能够创建一个对象，但是更推荐使用下面的一种。\n\nJS中的对象也是非常随意的，我们可以动态为其添加属性：\n\n```js\nlet obj = {}\nobj.name = \"伞兵一号\"\nconsole.info(obj)\n```\n\n同理，我们也可以给对象动态添加一个函数：\n\n```js\nlet obj = {}\nobj.f = function (){\n    console.info(\"我是对象内部的函数\")\n}\n\nobj.f()\n```\n\n我们可以在函数内使用this关键字来指定对象内的属性：\n\n```js\nlet name = \"我是外部变量\"\nlet obj = {}\nobj.name = \"我是内部变量\"\nobj.f = function (){\n    console.info(\"name属性为：\"+this.name)\n}\n\nobj.f()\n```\n\n\\*\\*注意：\\*\\*如果使用lambda表达式，那么this并不会指向对象。\n\n除了动态添加属性，我们也可以在一开始的时候指定对象内部的成员：\n\n```js\nlet obj = {\n    name: \"我是内部的变量\",\n  \tf: function (){\n        console.info(\"name属性为：\"+this.name)\n    }\n}\n\nobj.f()\n```\n\n注意如果有多行属性，需要在属性定义后添加一个`,`进行分割！\n\n### JavaScript事件\n\n当我们点击一个页面中的按钮之后，我们希望之后能够进行登陆操作，或是执行一些JS代码来实现某些功能，那么这个时候，就需要用到事件。\n\n事件相当于一个通知，我们可以提前设定好事件发生时需要执行的内容，当事件发生时，就会执行我们预先设定好的JS代码。\n\n事件有很多种类型，其中常用的有：\n\n*   onclick：点击事件\n*   oninput：内容输入事件\n*   onsubmit：内容提交事件\n\n那么如何为事件添加一个动作呢？\n\n```html\n<input type=\"password\" oninput=\"console.info('正在输入文本')\">\n```\n\n我们可以直接为一个元素添加对应事件的属性，比如`oninput`事件，我们可以直接在事件的值中编写js代码，但是注意，只能使用单引号，因为双引号用于囊括整个值。\n\n我们也可以单独编写一个函数，当事件发生时直接调用我们的函数：\n\n```js\nfunction f() {\n    window.alert(\"你输入了一个字符\")\n}\n```\n\n```html\n<input type=\"password\" oninput=\"oninput()\">\n```\n\n仅仅了解了事件，还不足以实现高度自定义，我们接着来看DOM。\n\n### Document对象\n\n当网页被加载时，浏览器会创建页面的文档对象模型（*D*ocument *O*bject *M*odel），它将整个页面的所有元素全部映射为JS对象，这样我们就可以在JS中操纵页面中的元素。\n\n![DOM HTML 树](https://www.w3school.com.cn/i/ct_htmltree.gif)\n\n比如我现在想要读取页面中某个输入框中的内容，那么我们就需要从DOM中获取此输入框元素的对象：\n\n```js\ndocument.getElementById(\"pwd\").value\n```\n\n通过document对象就能够快速获取当前页面中对应的元素，并且我们也可以快速获取元素中的一些属性。\n\n比如现在我们可以结合事件，来进行密码长度的校验，密码长度小于6则不合法，不合法的密码，会让密码框边框变红，那么首先我们先来编写一个css样式：\n\n```css\n.illegal-pwd{\n    border: red 1px solid !important;\n    box-shadow: 0 0 5px red;\n}\n```\n\n接着我们来编写一下js代码，定义一个函数，此函数接受一个参数（元素本身的对象）检测输入的长度是否大于6，否则就将当前元素的class属性设定为css指定的class：\n\n```js\nfunction checkIllegal(e) {\n    if(e.value.length < 6) {\n        e.setAttribute(\"class\", \"illegal-pwd\")   \n    }else {\n        e.removeAttribute(\"class\")\n    }\n}\n```\n\n最后我们将此函数绑定到`oninput`事件即可，注意传入了一个this，这里的this代表的是输入框元素本身：\n\n```html\n<input id=\"pwd\" oninput=\"checkIllegal(this)\" type=\"password\">\n```\n\n现在我们在输入的时候，会自动检查密码是否合法。\n\n既然oninput本身也是一个属性，那么实际上我们可以动态进行修改：\n\n```js\ndocument.getElementById(\"pwd\").oninput = () => console.info(\"???\")\n```\n\n那么，我们前面提及的window对象又是什么东西呢？\n\n实际上Window对象范围更加广阔，它甚至直接代表了整个窗口，当然也包含我们的Document对象，我们一般通过Window对象来弹出提示框之类的东西。\n\n### 发送XHR请求\n\nJS的大致内容我们已经全部学习完成了，那么如何使用JS与后端进行交互呢？\n\n我们知道，如果我们需要提交表单，那么我们就需要将表单的信息全部发送给我们的服务器，那么，如何发送给服务器呢？\n\n通过使用XMLHttpRequest对象，来向服务器发送一个HTTP请求，下面是一个最简单的请求格式：\n\n```js\nlet xhr = new XMLHttpRequest();\nxhr.open('GET', 'https://www.baidu.com');\nxhr.send();\n```\n\n上面的例子中，我们向服务器发起了一次网络请求，但是我们请求的是百度的服务器，并且此请求的方法为GET请求。\n\n我们现在将其绑定到一个按钮上作为事件触发：\n\n```js\nfunction http() {\n    let xhr = new XMLHttpRequest();\n    xhr.open('GET', 'https://www.baidu.com');\n    xhr.send();    \n}\n```\n\n```html\n<input id=\"button\" type=\"button\" onclick=\"http()\">\n```\n\n我们可以在网络中查看我们发起的HTTP请求并且查看请求的响应结果，比如上面的请求，会返回百度这个页面的全部HTML代码。\n\n实际上，我们的浏览器在我们输入网址后，也会向对应网站的服务器发起一次HTTP的GET请求。\n\n在浏览器得到页面响应后，会加载当前页面，如果当前页面还引用了其他资源文件，那么会继续向服务器发起请求，直到页面中所有的资源文件全部加载完成后，才会停止。\n","categories":["Java","JavaWeb笔记"]},{"title":"使用Socket传输文件","url":"/2023/01/23/65909752ee164b2c877f1f77097d6358/","content":"\nserver.java\n\n```java\npackage org.example;\n\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n\n//服务器\npublic class Server {\n    public static void main(String[] args) {\n        try (ServerSocket server = new ServerSocket(8080)) {\n            Socket socket = server.accept();\n            InputStream  stream = socket.getInputStream();\n            FileOutputStream fileOutputStream = new FileOutputStream(\"net/background.png\");\n            int i;\n            byte[] bytes = new byte[1024];\n            while((i = stream.read(bytes))!=-1){\n                fileOutputStream.write(bytes, 0, i);\n            }\n            fileOutputStream.flush();\n            fileOutputStream.close();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n***\n\nCilent.java\n\n```java\npackage org.example;\n\nimport java.io.*;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\n\npublic class Cilent {\n    public static void main(String[] args) {\n        try (Socket socket = new Socket()) {\n            socket.setKeepAlive(true);\n            socket.connect(new InetSocketAddress(\"localhost\", 8080));\n            System.out.println(\"已经连接至服务器！\");\n            FileInputStream fileInputStream = new FileInputStream(\"src/main/resources/background.png\");\n            OutputStream stream = socket.getOutputStream();\n            byte[] bytes = new byte[1024];\n            int i;\n            while ((i = fileInputStream.read(bytes)) != -1) {\n                stream.write(bytes,0,i);\n            }\n            stream.flush();\n        } catch (IOException e) {\n            System.out.println(\"服务端连接失败\");\n            e.printStackTrace();\n        }\n\n\n    }\n}\n```\n","categories":["Java","JavaWeb笔记"]},{"title":"VSCode 是什么|极客教程","url":"/2023/01/22/9f99a098f001487da297656e466dcb3b/","content":"\n<https://geek-docs.com/vscode/vscode-tutorials/what-is-vscode.html>\n","categories":["网站收藏","编辑器"]},{"title":"被删的前端游乐场","url":"/2023/01/22/e18feca3c0ce43cd96468b8ad72fbc36/","content":"\n<http://www.godbasin.com/>\n","categories":["网站收藏","前端"]},{"title":"小火柴的前端小站","url":"/2023/01/22/c64a51c38c9542fe9a5c1d7e2dc93dba/","content":"\n<https://www.xiaohuochai.cc/>\n","categories":["网站收藏","前端"]},{"title":"阿里巴巴开源镜像站-OPSX镜像站-阿里云开发者社区","url":"/2023/01/22/6be31fe5f1cd44e7a52b7602603705ac/","content":"\n<https://developer.aliyun.com/mirror/?spm=a2c6h.13651102.0.0.1a951b11JuwHNo&serviceType=mirror&tag=%E7%B3%BB%E7%BB%9F>\n","categories":["网站收藏","镜像站"]},{"title":"腾讯软件源","url":"/2023/01/22/ae79cc4392384967b905c952b720f392/","content":"\n<https://mirrors.cloud.tencent.com/>\n","categories":["网站收藏","镜像站"]},{"title":"DFS算法","url":"/2023/01/21/b74bc4b803df4e7b99cf906cd5177da6/","content":"\nacwing-842排列数字\n\n```java\npackage algorithm.dfs;/*\n给定一个整数 n\n，将数字 1∼n\n 排成一排，将会有很多种排列方法。\n\n现在，请你按照字典序将所有的排列方法输出。\n\n输入格式\n共一行，包含一个整数 n\n\n输出格式\n按字典序输出所有排列方案，每个方案占一行。\n\n数据范围\n1≤n≤7\n输入样例：\n3\n输出样例：\n1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1\n */\n\nimport java.util.Scanner;\n\npublic class 排列数字_842 {\n    static final int N = 10;\n    static int n;\n    static int[] path = new int[N];\n    static boolean status[] = new boolean[N];\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        n = sc.nextInt(); //输入整数n\n        dfs(1);\n    }\n\n    public static void dfs(int u) {\n        if (u > n) { //数字填完输出\n            for (int i = 1; i <= n; i++) {\n                System.out.printf(\"%d \", path[i]);\n            }\n            System.out.println();\n            return;\n        } else {\n            for (int i = 1; i <= n; i++) {\n                if (!status[i]) {\n                    path[u] = i; //把数字放入空位\n                    status[i] = true; //标注这个空位已经被占用\n                    dfs(u + 1); //填下一位\n                    path[u] = 0; //回溯,恢复之前的状态,\n                    status[i] = false;\n                }\n            }\n        }\n    }\n}\n```\n","categories":["算法","搜索与图论"]},{"title":"Linux SCP指令","url":"/2023/01/20/85a4024620e141f4b16389b65a2ce85e/","content":"\n```bash\nscp -P 2222 \"C:\\Users\\meowrain\\.config\\clash\\profiles\\1674129914990.yml\" root@meowrain.cn:/root\n```\n\n复制本地文件到远程服务器的root目录\n","tags":["linux"],"categories":["Linux"]},{"title":"Docker容器技术","url":"/2023/01/20/b4a4813646324eab97b039cacf031705/","content":"\n![image-20220629215534772](https://s2.loli.net/2022/06/29/bnXgrjtzkx7YaLo.png)\n\n# Docker容器技术\n\nDocker是一门平台级别的技术，涉及的范围很广，所以，在开始之前，请确保你完成：**Java SpringBoot 篇**（推荐完成SpringCloud篇再来）视频教程及之前全部路线，否则学习会非常吃力，另外推荐额外掌握：《计算机网络》、《操作系统》相关知识。学一样东西不能完全靠记忆来完成，而是需要结合自己所学的基础知识加以理解，一般来说，单凭记忆能够掌握的东西往往是最廉价的。\n\n\\*\\*Docker官网：\\*\\*<https://www.docker.com>\n\n\\*\\*课前准备：\\*\\*配置2C2G以上Linux服务器一台，云服务器、虚拟机均可。\n\n## 容器技术入门\n\n随着时代的发展，Docker也逐渐走上了历史舞台，曾经我们想要安装一套环境，需要花费一下午甚至一整天来配置和安装各个部分（比如运行我们自己的SpringBoot应用程序，可能需要安装数据库、安装Redis、安装MQ等，各种各样的环境光是安装就要花费很多时间，真的是搞得心态爆炸），而有了Docker之后，我们的程序和环境部署就变得非常简单了，我们只需要将这些环境一起打包成一个镜像。而到服务器上部署时，可以直接下载镜像实现一键部署，是不是很方便？\n\n包括我们在学习SpringCloud需要配置的各种组件，可能在自己电脑的环境中运行会遇到各种各样的问题（可能由于电脑上各种环境没配置，导致无法运行），而现在只需要下载镜像就能直接运行，所有的环境全部在镜像中配置完成，开箱即用。\n\n真的有这么神奇吗？我们来试试看。\n\n### 环境安装和部署\n\n首先我们还是先将Docker环境搭建好（建议和我同一个环境，不然出了问题只能自己想办法了），这里我们使用：\n\n*   Ubuntu 22.04 操作系统\n\nDocker分为免费的CE（Community Edition）社区版本和EE（Enterprise Edition）企业级付费版本，所以我们这里选择docker-ce进行安装。官方安装文档：<https://docs.docker.com/engine/install/ubuntu/>\n\n首先安装一些工具：\n\n```sh\nsudo apt-get install ca-certificates curl gnupg lsb-release\n```\n\n不过在Ubuntu22.04已经默认安装好了。接着安装官方的GPG key：\n\n```sh\nsudo mkdir -p /etc/apt/keyrings\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n```\n\n最后将Docker的库添加到apt资源列表中：\n\n```sh\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n```\n\n接着我们更新一次apt：\n\n```sh\n sudo apt update\n```\n\n最后安装Docker CE版本：\n\n```sh\n sudo apt install docker-ce\n```\n\n等待安装完成就可以了：\n\n![image-20220630161240162](https://s2.loli.net/2022/06/30/D1GXAQdUsgmTawq.png)\n\n![image-20220630161341541](https://s2.loli.net/2022/06/30/oI26yQiqhABN3UP.png)\n\n可以看到安装成功后版本是20.10.17，当然可能你们安装的时候就是更新的版本了。最后我们将当前用户添加到docker用户组中，不然每次使用docker命令都需要sudo执行，很麻烦：\n\n```sh\nsudo usermod -aG docker <用户名>\n```\n\n配置好后，我们先退出SSH终端，然后重新连接就可以生效了。\n\n这样我们Docker 的学习环境就配置好了，现在我们就尝试通过Docker来部署一个Nginx服务器试试看，使用很简单，只需要一个命令就可以了（当然现在看不懂没关系，我们后面会细嗦）：\n\n```sh\nsudo docker run -d -p 80:80 nginx\n```\n\n![image-20220630165259663](https://s2.loli.net/2022/06/30/sPVpLI9bXlzdKeO.png)\n\n首选它会从镜像仓库中下载对应的镜像，国内访问速度还行，不需要单独配置镜像源。接着下载完成后，就会在后台运行了，我们可以使用浏览器访问试试看：\n\n![image-20220630165430159](https://s2.loli.net/2022/06/30/fP5TsQnqUbmXoaA.png)\n\n![image-20220630165440751](https://s2.loli.net/2022/06/30/lPZYrUn2D1gNjx8.png)\n\n可以看到，Nginx服务器已经成功部署了，但是实际上我们并没有在Ubuntu中安装Nginx，而是通过Docker运行的镜像来进行服务器搭建的，是不是感觉玩法挺新奇的。除了Nginx这种简单的应用之外，我们还可以通过Docker来部署复杂应用，之后我们都会一一进行讲解的。\n\n### 从虚拟机到容器\n\n前面我们成功安装了Docker学习环境，以及浅尝了一下Docker为我们带来的应用快速部署。在正式进入学习之前，我们就先从Docker的发展开始说起。\n\n在Docker出现之前，虚拟化技术可以说是占据了主导地位。首先我们来谈谈为什么会出现虚拟化技术，我们知道在企业中服务器可以说是必不可少的一种硬件设施了，服务器也是电脑，但是不像我们的家用电脑，服务器的配置是非常高的，我们家用电脑的CPU可能最高配也就20核了，内存很少有超过128G的电脑，64G内存的家用电脑可以算奢侈了。而服务器不一样，服务器级别的CPU动辄12核，甚至服务器还能同时安装多块CPU，能直接堆到好几十核：\n\n![image-20220630171220207](https://s2.loli.net/2022/06/30/DPxA9MsZ3WGl62X.png)\n\n我们家用级CPU一般是AMD的锐龙系列和Intel的酷睿系列（比如i3 i5 i7 i9），而服务器CPU一般是Intel的志强（Xeno）系列，这种CPU的特点就是核心数非常多：\n\n![image-20220630172135408](https://s2.loli.net/2022/06/30/cKlhRZ9Sw1Q4uEX.png)\n\n并且服务器CPU相比家用CPU的功耗也会更大，因此服务器CPU的发热量非常高，如果你有幸去过机房，你会听见散热风扇猛烈转动的声音（但是服务器CPU的频率没有家用级CPU高，一般大型游戏要求的是高频率而不是核心数，而且功耗也比较大，所以并不适合做家用电脑，所以以后在网上买台式机，看到什么“i9级”CPU千万别买，是这些黑心商家把国外服务器上淘汰下来的服务器CPU（洋垃圾）装成电脑卖给你，所以会很便宜，同时核心数又能媲美i9，所以还是一分钱一分货实在）\n\n服务器无论是CPU资源还是内存资源都远超家用电脑，而我们编写的Java后端项目，最后都会运行在这些服务器上，不过有一个问题，服务器既然有这么丰富的硬件资源，就跑咱们这一个小Java后端，是不是有点核弹炸蚊子的感觉了？可能顶多就用了服务器5%的硬件资源，服务器这么牛就运行个这也太浪费了吧。\n\n所以，为了解决这种资源利用率只有5%-15%的情况，咱们能不能想个办法，把这一台服务器分成多个小服务器使用，每个小服务器只分配一部分的资源，比如分一个小服务器出去，只给2个CPU核心和4G内存。但是由于设计上的问题，我们的电脑只能同时运行一个操作系统，那么怎么办呢？此时虚拟化技术就开始兴起了。\n\n虚拟化使用软件来模拟硬件并创建虚拟计算机系统。这样一来，企业便可以在单台服务器上运行多个虚拟系统，也就是运行多个操作系统和应用，而这可以实现规模经济以及提高效益。比如我们电脑上经常使用的VMware就是一种民用级虚拟化软件：\n\n![image-20220630173915254](https://s2.loli.net/2022/06/30/St3hfELQHNdRZmA.png)\n\n我们可以使用VMware来创建虚拟机，这些虚拟机实际上都是基于我们当前系统上的VMware软件来运行的，当然VMware也有服务器专用的虚拟化软件，有了虚拟化之后，我们的服务器就像这样：\n\n![image-20220630174945749](https://s2.loli.net/2022/06/30/BmnC1xETQM4uRHO.png)\n\n相当于通过虚拟机模拟了很多来电脑出来，这样我们就可以在划分出来的多台虚拟机上分别安装系统和部署我们的应用程序了，并且我们可以自由分配硬件资源，合理地使用。一般在企业中，不同的应用程序可能会被分别部署到各个服务器上，隔离开来，此时使用虚拟机就非常适合。\n\n实际上我们在什么腾讯云、阿里云租的云服务器，都是经过虚拟化技术划分出来的虚拟机而已。\n\n那么，既然虚拟机都这么方便了，容器又是怎么杀出一条血路的呢？我们先来看看什么是容器。\n\n容器和虚拟机比较类似，都可以为应用提供封装和隔离，都是软件，但是容器中的应用运行是寄托于宿主操作系统的，实际上依然是在直接使用操作系统的资源，当然应用程序之间环境依然是隔离的，而虚拟机则是完全模拟一台真正的电脑出来，直接就是两台不同的电脑。\n\n![image-20220630181037698](https://s2.loli.net/2022/06/30/31GZSh5DE9Vilet.png)\n\n因此容器相比虚拟机就简单多了，并且启动速度也会快很多，开销小了不少。\n\n不过容器火的根本原因还是它的集装箱思想，我们知道，如果我们要写一个比如论坛、电商这类的Java项目，那么数据库、消息队列、缓存这类中间件是必不可少的，因此我们如果想要将一个服务部署到服务器，那么实际上还要提前准备好各种各样的环境，先安装好MySQL、Redis、RabbitMQ等应用，配置好了环境，再将我们的Java应用程序启动，整个流程下来，光是配置环境就要浪费大量的时间，如果是大型的分布式项目，可能要部署很多台机器，那岂不是我们得一个一个来？项目上个线就要花几天时间，显然是很荒唐的。\n\n而容器可以打包整个环境，比较MySQL、Redis等以及我们的Java应用程序，可以被一起打包为一个镜像，当我们需要部署服务时，只需要像我们之前那样，直接下载镜像运行即可，不需要再进行额外的配置了，整个镜像中环境是已经配置好的状态，开箱即用。\n\n![image-20220630182136717](https://s2.loli.net/2022/06/30/NTnU8iSj51CspFw.png)\n\n而我们要重点介绍的就是Docker了，可以看到它的图标就是一只鲸鱼，鲸鱼的上面是很多个集装箱，每个集装箱就是我们的整个环境+应用程序，Docker可以将任何应用及其依赖打包为一个轻量级，可移植，自包含的容器，容器可以运行在几乎所有的操作系统上。\n\n### 容器工作机制简述\n\n我们先来看看Docker的整体架构：\n\n![image-20220630184857540](https://s2.loli.net/2022/06/30/PeaxwNQXkiYSlUv.png)\n\n实际上分为三个部分：\n\n*   Docker 客户端：也就是我们之前使用的docker命令，都是在客户端上执行的，操作会发送到服务端上处理。\n*   Docker 服务端：服务端就是启动容器的主体了，一般是作为服务在后台运行，支持远程连接。\n*   Registry：是存放Docker镜像的仓库，跟Maven一样，也可以分公有和私有仓库，镜像可以从仓库下载到本地存放。\n\n当我们需要在服务器上部署一个已经打包好的应用和环境，我们只需要下载打包好的镜像就可以了，我们前面执行了：\n\n```sh\nsudo docker run -d -p 80:80 nginx\n```\n\n实际上这个命令输入之后：\n\n1.  Docker客户端将操作发送给服务端，告诉服务端我们要运行nginx这个镜像。\n2.  Docker服务端先看看本地有没有这个镜像，发现没有。\n3.  接着只能从公共仓库Docker Hub去查找下载镜像了。\n4.  下载完成，镜像成功保存到本地。\n5.  Docker服务端加载Nginx镜像，启动容器开始正常运行（注意容器和其他容器之间，和外部之间，都是隔离的，互不影响）\n\n所以，整个流程中，Docker就像是一搜运输船，镜像就像是集装箱，通过运输船将世界各地的货物送往我们的港口，货物到达港口后，Docker并不关心集装箱里面的是什么，只需要创建容器开箱即用就可以了。相比我们传统的手动安装配置环境，不知道方便了几个层次。\n\n不过容器依然是寄托于宿主主机的运行的，所以一般在生产环境下，都是通过虚拟化先创建多台主机，然后再到各个虚拟机中部署Docker，这样的话，运维效率就大大提升了。\n\n从下一章开始，我们就正式地来学习一下Docker的各种操作。\n\n***\n\n## 容器与镜像\n\n要启动容器最关键的就是镜像，我们来看看镜像相关的介绍。\n\n### 初识容器镜像\n\n首先我们来了解一下镜像的相关操作，比如现在我们希望把某个镜像从仓库下载到本地，这里使用官方的hello-world镜像：\n\n```sh\ndocker pull hello-world\n```\n\n只需要输入`pull`命令，就可以直接下载到指定的镜像了：\n\n![image-20220701111043417](https://s2.loli.net/2022/07/01/tZ4S2HYvNKr7qiD.png)\n\n可以看到对上面一行有一句Using default tag，实际上一个镜像的名称是由两部分组成的，一个是`repository`，还有一个是`tag`，一般情况下约定`repository`就是镜像名称，`tag`作为版本，默认为latest，表示最新版本。所以指定版本运行的话：\n\n```sh\ndocker pull 名称:版本\n```\n\n之后为了教学方便，我们就直接使用默认的tag，不去指定版本了。\n\n镜像下载之后会存放在本地，要启动这个镜像的容器，实际上就像我们之前那样，输入`run`命令就可以了：\n\n```sh\ndocker run hello-world\n```\n\n当然如果仅仅是只想创建而不想马上运行的话，可以使用`create`命令：\n\n```sh\ndocker create hello-world\n```\n\n可以看到成功启动了：\n\n![image-20220701111314331](https://s2.loli.net/2022/07/01/Brl4cnK8WsjP7LV.png)\n\n启动之后，会使用当前镜像自动创建一个容器，我们可以输入`ps`命令来查看当前容器的容器列表：\n\n    docker ps -a\n\n注意后面要加一个`-a`表示查看所有容器（其他选项可以使用-h查看），如果不加的话，只会显示当前正在运行的容器，而HelloWorld是一次性的不是Nginx那样的常驻程序，所以容器启动打印了上面的内容之后，容器就停止运行了：\n\n![image-20220701111840091](https://s2.loli.net/2022/07/01/zMN3TPR7aHu5YGb.png)\n\n可以看到容器列表中有我们刚刚创建的hello-world以及我们之前创建的nginx（注意同一个镜像可以创建多个容器），每个容器都有一个随机生成的容器ID写在最前面，后面是容器的创建时间以及当前的运行状态，最后一列是容器的名称，在创建容器时，名称可以由我们指定也可以自动生成，这里就是自动生成的。\n\n我们可以手动指定名称启动，在使用`run`命令时，添加`--name`参数即可：\n\n```sh\ndocker run --name=lbwnb hello-world\n```\n\n![image-20220701125951980](https://s2.loli.net/2022/07/01/qOblnhr5CJiIBG6.png)\n\n我们可以手动开启处于停止状态的容器：\n\n```sh\n docker start <容器名称/容器ID>\n```\n\n注意启动的对象我们要填写容器的ID或是容器的名称才可以，容器ID比较长，可以不写全只写一半，但是你要保证你输入的不完全容器ID是唯一的。\n\n![image-20220701124845982](https://s2.loli.net/2022/07/01/XfFORtqhK9lcBi7.png)\n\n如果想要停止容器直接输入`stop`命令就可以了：\n\n```sh\n docker stop <容器名称/容器ID>\n```\n\n或是重启：\n\n```sh\n docker restart <容器名称/容器ID>\n```\n\n![image-20220701125025173](https://s2.loli.net/2022/07/01/Q2tor6KRIeUEhO4.png)\n\n如果我们不需要使用容器了，那么可以将容器删除，但是注意只有容器处于非运行状态时才可以删除：\n\n```sh\ndocker rm <容器名称/容器ID>\n```\n\n当然如果我们希望容器在停止后自动删除，我们可以在运行时添加`--rm`参数：\n\n```sh\ndocker run --rm 镜像名称\n```\n\n![image-20220701125108834](https://s2.loli.net/2022/07/01/3MlPUpjoV1Qg8DX.png)\n\n删除后，容器将不复存在，当没有任何关于nginx的容器之后，我们可以删除nginx的本地镜像：\n\n![image-20220701125204728](https://s2.loli.net/2022/07/01/bmHqND36yCUBPVj.png)\n\n我们可以使用`images`命令来检查一下当前本地有那些镜像：\n\n```sh\ndocker images\n```\n\n![image-20220701125514145](https://s2.loli.net/2022/07/01/fEscbGJXw4e7YFK.png)\n\n至此，我们已经了解了Docker的简单使用，在后面的学习中，我们还会继续认识更多的玩法。\n\n### 镜像结构介绍\n\n前面我们了解了Docker的相关基本操作，实际上容器的基石就是镜像，有了镜像才能创建对应的容器实例，那么我们就先从镜像的基本结构开始说起，我们来看看镜像到底是个什么样的存在。\n\n我们在打包项目时，实际上往往需要一个基本的操作系统环境，这样我们才可以在这个操作系统上安装各种依赖软件，比如数据库、缓存等，像这种基本的系统镜像，我们称为base镜像，我们的项目之后都会基于base镜像进行打包，当然也可以不需要base镜像，仅仅是基于当前操作系统去执行简单的命令，比如我们之前使用的hello-world就是。\n\n一般base镜像就是各个Linux操作系统的发行版，比如我们正在使用的Ubuntu，还有CentOS、Kali等等。这里我们就下载一下CentOS的base镜像：\n\n```sh\ndocker pull centos\n```\n\n![image-20220701132622893](https://s2.loli.net/2022/07/01/oFKxiMzA3fs2aIl.png)\n\n可以看到，CentOS的base镜像就已经下载完成，不像我们使用完整系统一样，base镜像的CentOS省去了内核，所以大小只有272M，这里需要解释一下base镜像的机制：\n\n![image-20220701133111829](https://s2.loli.net/2022/07/01/dvmqAjKHkucbLFh.png)\n\nLinux操作体系由内核空间和用户空间组成，其中内核空间就是整个Linux系统的核心，Linux启动后首先会加`bootfs`文件系统，加载完成后会自动卸载掉，之后会加载用户空间的文件系统，这一层是我们自己可以进行操作的部分：\n\n*   bootfs包含了BootLoader和Linux内核，用户是不能对这层作任何修改的，在内核启动之后，bootfs会自动卸载。\n*   rootfs则包含了系统上的常见的目录结构，包括`/dev`、` /proc`、 `/bin`等等以及一些基本的文件和命令，也就是我们进入系统之后能够操作的整个文件系统，包括我们在Ubuntu下使用的apt和CentOS下使用的yum，都是用户空间上的。\n\nbase镜像底层会直接使用宿主主机的内核，也就是说你的Ubuntu内核版本是多少，那么base镜像中的CentOS内核版本就是多少，而rootfs则可以在不同的容器中运行多种不同的版本。所以，base镜像实际上只有CentOS的rootfs，因此只有300M大小左右，当然，CentOS里面包含多种基础的软件，还是比较臃肿的，而某些操作系统的base镜像甚至都不到10M。\n\n使用`uname`命令可以查看当前内核版本：\n\n![image-20220701135056123](https://s2.loli.net/2022/07/01/mZjupCUktL7Ab2R.png)\n\n因此，Docker能够同时模拟多种Linux操作系统环境，就不足为奇了，我们可以尝试启动一下刚刚下载的base镜像：\n\n```sh\ndocker run -it centos\n```\n\n注意这里需要添加`-it`参数进行启动，其中`-i`表示在容器上打开一个标准的输入接口，`-t`表示分配一个伪tty设备，可以支持终端登录，一般这两个是一起使用，否则base容器启动后就自动停止了。\n\n![image-20220701135834325](https://s2.loli.net/2022/07/01/13BYcCWHsDMrwvq.png)\n\n可以看到使用ls命令能够查看所有根目录下的文件，不过很多命令都没有，连clear都没有，我们来看看内核版本：\n\n![image-20220701140018095](https://s2.loli.net/2022/07/01/PtGwRWfXlTh67qm.png)\n\n可以看到内核版本是一样的（这也是缺点所在，如果软件对内核版本有要求的话，那么此时使用Docker就直接寄了），我们输入`exit`就可以退出容器终端了，可以看到退出后容器也停止了：\n\n![image-20220701140225415](https://s2.loli.net/2022/07/01/u5MQnWVihlbkyx1.png)\n\n当然我们也可以再次启动，注意启动的时候要加上`-i`才能进入到容器进行交互，否则会在后台运行：\n\n![image-20220701140706977](https://s2.loli.net/2022/07/01/QCsY5EyGSja6Khl.png)\n\n基于base镜像，我们就可以在这基础上安装各种各样的软件的了，几乎所有的镜像都是通过在base镜像的基础上安装和配置需要的软件构建出来的：\n\n![image-20220701143105247](https://s2.loli.net/2022/07/01/SDwEqz2b7lA9nJa.png)\n\n每安装一个软件，就在base镜像上一层层叠加上去，采用的是一种分层的结构，这样多个容器都可以将这些不同的层次自由拼装，比如现在好几个容器都需要使用CentOS的base镜像，而上面运行的软件不同，此时分层结构就很爽了，我们只需要在本地保存一份base镜像，就可以给多个不同的容器拼装使用，是不是感觉很灵活？\n\n我们看到除了这些软件之外，最上层还有一个可写容器层，这个是干嘛的呢，为什么要放在最上面？\n\n我们知道，所有的镜像会叠起来组成一个统一的文件系统，如果不同层中存在相同位置的文件，那么上层的会覆盖掉下层的文件，最终我们看到的是一个叠加之后的文件系统。当我们需要修改容器中的文件时，实际上并不会对镜像进行直接修改，而是在最顶上的容器层（最上面一般称为容器层，下面都是镜像层）进行修改，不会影响到下面的镜像，否则镜像就很难实现多个容器共享了。所以各个操作如下：\n\n*   文件读取：要读取一个文件，Docker会最上层往下依次寻找，找到后则打开文件。\n*   文件创建和修改：创建新文件会直接添加到容器层中，修改文件会从上往下依次寻找各个镜像中的文件，如果找到，则将其复制到容器层，再进行修改。\n*   删除文件：删除文件也会从上往下依次寻找各个镜像中的文件，一旦找到，并不会直接删除镜像中的文件，而是在容器层标记这个删除操作。\n\n也就是说，我们对整个容器内的文件进行的操作，几乎都是在最上面的容器层进行的，我们是无法干涉到下面所有的镜像层文件的，这样就很好地保护了镜像的完整性，才能实现多个容器共享使用。\n\n### 构建镜像\n\n前面我们已经了解了Docker镜像的结构，实际上所有常用的应用程序都有对应的镜像，我们只需要下载这些镜像然后就可以使用了，而不需要自己去手动安装，顶多需要进行一些特别的配置。当然要是遇到某些冷门的应用，可能没有提供镜像，这时就要我们手动去安装，接着我们就来看看如何构建我们自己的Docker镜像。构建镜像有两种方式，一种是使用`commit`命令来完成，还有一种是使用Dockerfile来完成，我们先来看第一种。\n\n这里我们就做一个简单的例子，比如我们现在想要在Ubuntu的base镜像中安装Java环境，并将其打包为新的镜像（这个新的镜像就是一个包含Java环境的Ubuntu系统镜像）\n\n咱们先启动Ubuntu镜像，然后使用`yum`命令（跟apt比较类似）来安装Java环境，首先是`run`命令：\n\n```sh\ndocker pull ubuntu\n```\n\n![image-20220701151405640](https://s2.loli.net/2022/07/01/tP5rhQuqfpxcRHL.png)\n\n接着启动：\n\n![image-20220701151433520](https://s2.loli.net/2022/07/01/l86G4dK71UwcZPi.png)\n\n直接使用apt命令来安装Java环境，在这之前先更新一下，因为是最小安装所以本地没有任何软件包：\n\n![image-20220701151600847](https://s2.loli.net/2022/07/01/RAzQr7P8C9aJwxK.png)\n\n接着输入：\n\n```sh\napt install openjdk-8-jdk\n```\n\n等待安装完成：\n\n![image-20220701152018041](https://s2.loli.net/2022/07/01/Fezitl7PDb19BL4.png)\n\n这样，我们就完成了对Java环境的安装了，接着我们就可以退出这个镜像然后将其构建为新的镜像：\n\n![image-20220701152130041](https://s2.loli.net/2022/07/01/LAIx5GYCJhsbmSo.png)\n\n使用`commit`命令可以将容器保存为新的镜像：\n\n```sh\ndocker commit 容器名称/ID 新的镜像名称\n```\n\n![image-20220701152302171](https://s2.loli.net/2022/07/01/sbWLlEoMj2ZPcUV.png)\n\n![image-20220701152418060](https://s2.loli.net/2022/07/01/3q4juA8vOJew9W6.png)\n\n可以看到安装了软件之后的镜像大小比我们原有的大小大得多，这样我们就可以通过这个镜像来直接启动一个带Java环境的Ubuntu操作系统容器了。不过这种方式虽然自定义度很高，但是Docker官方并不推荐，这样的话使用者并不知道镜像是如何构建出来的，是否里面带了后门都不知道，并且这样去构建效率太低了，如果要同时构建多种操作系统的镜像岂不是要一个一个去敲？我们作为普通用户实际上采用Dokcerfile的方式会更好一些。\n\n我们来看看如何使用Dockerfile的形式创建一个带Java环境的Ubuntu系统镜像。首先直接新建一个名为`Dockerfile`的文件：\n\n```sh\ntouch Dockerfile\n```\n\n接着我们来进行编辑，`Dockerfile`内部需要我们编写多种指令来告诉Docker我们的镜像的相关信息：\n\n```dockerfile\nFROM <基础镜像>\n```\n\n首先我们需要使用FROM指令来选择当前镜像的基础镜像（必须以这个指令开始），这里我们直接使用`ubuntu`作为基础镜像即可，当然如果不需要任何基础镜像的话，直接使用`scratch`表示从零开始构建，这里就不演示了。\n\n基础镜像设定完成之后，我们就需要在容器中运行命令来安装Java环境了，这里需要使用`RUN`指令：\n\n```dockerfile\nRUN apt update\nRUN apt install -y openjdk-8-jdk\n```\n\n每条指令执行之后，都会生成一个新的镜像层。\n\nOK，现在我们的Dockerfile就编写完成了，只需要完成一次构建即可：\n\n```sh\ndocker build -t <镜像名称> <构建目录>\n```\n\n执行后，Docker会在构建目录中寻找Dockerfile文件，然后开始依次执行Dockerfile中的指令：\n\n![image-20220701155443170](https://s2.loli.net/2022/07/01/g6RFwA5t4EsdvnY.png)\n\n构建过程的每一步都非常清晰地列出来了，一共三条指令对应三步依次进行，我们稍微等待一段时间进行安装，安装过程中所以的日志信息会直接打印到控制台（注意Docker镜像构建有缓存机制，就算你现在中途退出了，然后重新进行构建，也会直接将之前已经构建好的每一层镜像，直接拿来用，除非修改了Dockerfile文件重新构建，只要某一层发生变化其上层的构建缓存都会失效，当然包括`pull`时也会有类似的机制）\n\n![image-20220701155812315](https://s2.loli.net/2022/07/01/foLHIZScQ1KVbvC.png)\n\n最后成功安装，会出现在本地：\n\n![image-20220701155847721](https://s2.loli.net/2022/07/01/95ueUgyaTcrz6Mi.png)\n\n可以看到安装出来的大小跟我们之前的是一样的，因为做的事情是一模一样的。我们可以使用`history`命令来查看构建历史：\n\n![image-20220701160128689](https://s2.loli.net/2022/07/01/GYyHFcjSKJwvWi6.png)\n\n可以看到最上面两层是我们通过使用apt命令生成的内容，就直接作为当前镜像中的两层镜像，每层镜像都有一个自己的ID，不同的镜像大小也不一样。而我们手动通过`commit`命令来生成的镜像没有这个记录：\n\n![image-20220701160406891](https://s2.loli.net/2022/07/01/qWUeSF3aKrvwJ8p.png)\n\n如果遇到镜像ID为missing的一般是从Docker Hub中下载的镜像会有这个问题，但是问题不大。用我们自己构建的镜像来创建容器就可以直接体验带Java环境的容器了：\n\n![image-20220701161546279](https://s2.loli.net/2022/07/01/STmdFvBIbN4VAl1.png)\n\n有关Dockerfile的其他命令，我们还会在后续的学习中逐步认识。\n\n### 发布镜像到远程仓库\n\n前面我们学习了如何构建一个Docker镜像，我们可以将自己的镜像发布到Docker Hub中，就像Git远程仓库一样，我们可以将自己的镜像上传到这里：<https://hub.docker.com/repositories，没有账号的先去进行注册。>\n\n![image-20220701164609666](https://s2.loli.net/2022/07/01/3T8xJLgER4cWuQq.png)\n\n点击右上角的创建仓库，然后填写信息：\n\n![image-20220701164939268](https://s2.loli.net/2022/07/01/SkCKJmU6Rw2lfzP.png)\n\n创建完成后，我们就有了一个公共的镜像仓库，我们可以将本地的镜像上传了，上传之前我们需要将镜像名称修改得规范一点，这里使用`tag`命令来重新打标签：\n\n```sh\ndocker tag ubuntu-java-file:latest 用户名/仓库名称:版本\n```\n\n这里我们将版本改成1.0版本吧，不用默认的latest了。\n\n![image-20220701165231001](https://s2.loli.net/2022/07/01/chAPS2DFW5q7GkE.png)\n\n修改完成后，会创建一个新的本地镜像，名称就是我们自己定义的了。接着我们需在本地登录一下：\n\n![image-20220701165446859](https://s2.loli.net/2022/07/01/T3YC4pfaLEo85Oz.png)\n\n登录成功后我们就可以上传了：\n\n```sh\ndocker push nagocoler/ubuntu-java:1.0\n```\n\n![image-20220701165744647](https://s2.loli.net/2022/07/01/CXoBhpZUl79aDRQ.png)\n\n哈哈，500M的东西传上去，还是有点压力的，如果实在太慢各位可以重新做一个简单点的镜像。上传完成后，打开仓库，可以看到已经有一个1.0版本了：\n\n![image-20220701165920060](https://s2.loli.net/2022/07/01/3UD9y8frEIX1JY6.png)\n\n![image-20220701170053250](https://s2.loli.net/2022/07/01/9sVSjcGCo5mTu61.png)\n\n注意公共仓库是可以被搜索和下载的，所以我们这里把本地的镜像全部删掉，去下载我们刚刚上传好的镜像。这里我们先搜索一下，搜索使用`search`命令即可：\n\n```sh\ndocker search nagocoler/ubuntu-java\n```\n\n![image-20220701170253126](https://s2.loli.net/2022/07/01/SIUpBOzN5vsiydn.png)\n\n我们可以使用pull命令将其下载下来：\n\n```sh\ndocker pull nagocoler/ubuntu-java:1.0\n```\n\n![image-20220701171148334](https://s2.loli.net/2022/07/01/uXBk3WPsDM4aZKo.png)\n\n上传之后的镜像是被压缩过的，所以下载的内容就比较少一些。运行试试看：\n\n![image-20220701171253440](https://s2.loli.net/2022/07/01/RJVdstMnxjSYFoW.png)\n\n当然各位也可以让自己的同学或是在其他机器上尝试下载自己的镜像，看看是不是都可以正常运行。\n\nDocker Hub也可以自行搭建私服，但是这里就不多做介绍了，至此，有关容器和镜像的一些基本操作就讲解得差不多了。\n\n### 实战：使用IDEA构建SpringBoot程序镜像\n\n这里我们创建一个新的SpringBoot项目，现在我们希望能够使用Docker快速地将我们的SpringBoot项目部署到安装了Docker的服务器上，我们就可以将其打包为一个Docker镜像。\n\n![image-20220701173902376](https://s2.loli.net/2022/07/01/QObHMsxAtej6lPq.png)\n\n先创建好一个项目让它跑起来，可以正常运行就没问题了，接着我们需要将其打包为Docker镜像，这里创建一个新的Dockerfile：\n\n```dockerfile\nFROM ubuntu\nRUN apt update && apt install -y openjdk-8-jdk\n```\n\n首先还是基于ubuntu构建一个带Java环境的系统镜像，接着我们先将其连接到我们的Docker服务器进行构建，由于IDEA自带了Docker插件，所以我们直接点击左上角的运行按钮，选择第二项 **“为Dockerfile构建镜像”**：\n\n![image-20220701203741495](https://s2.loli.net/2022/07/01/xB5vEw1QHojWZ8p.png)\n\n![image-20220701202537650](https://s2.loli.net/2022/07/01/FAcME5yxZPD1aoz.png)\n\n这里需要配置Docker的服务器，也就是我们在Ubuntu服务器安装的Docker，这里我们填写服务器相关信息，我们首选需要去修改一下Docker的一些配置，开启远程客户端访问：\n\n```sh\nsudo vim /etc/systemd/system/multi-user.target.wants/docker.service \n```\n\n打开后，添加高亮部分：\n\n![image-20220701202846707](https://s2.loli.net/2022/07/01/OVMDGqiYWU9E7fA.png)\n\n修改完成后，重启Docker服务，如果是云服务器，记得开启2375 TCP连接端口：\n\n```sh\nsudo systemctl daemon-reload\nsudo systemctl restart docker.service \n```\n\n现在接着在IDEA中进行配置：\n\n![image-20220701203318098](https://s2.loli.net/2022/07/01/bDn3vHFw1XYdusU.png)\n\n在引擎API URL处填写我们Docker服务器的IP地址：\n\n    tcp://IP:2375\n\n显示连接成功后，表示配置正确，点击保存即可，接着就开始在我们的Docker服务器上进行构建了：\n\n![image-20220701203518930](https://s2.loli.net/2022/07/01/nPFSa4Wcep31jXG.png)\n\n最后成功构建：\n\n![image-20220701204815069](https://s2.loli.net/2022/07/01/1qtCFZKbg6fJsok.png)\n\n可以看到，Docker服务器上已经有了我们刚刚构建好的镜像：\n\n![image-20220701204900943](https://s2.loli.net/2022/07/01/a6J43UW5biwTyVo.png)\n\n不过名称没有指定，这里我们重新配置一下：\n\n![image-20220701204955570](https://s2.loli.net/2022/07/01/edPVg4oyrDiqmk6.png)\n\n![image-20220701205053642](https://s2.loli.net/2022/07/01/1QrHVB4zC9iFTG7.png)\n\n重新进行构建，就是我们自定义的名称了：\n\n![image-20220701205402607](https://s2.loli.net/2022/07/01/qrWDZEKHklSU8OT.png)\n\n![image-20220701205350004](https://s2.loli.net/2022/07/01/6JKXLHEz25QGvMk.png)\n\n我们来创建一个容器试试看：\n\n![image-20220701205500494](https://s2.loli.net/2022/07/01/8xPUg7qmVzXF9nN.png)\n\n好了，现在基本环境搭建好了，我们接着就需要将我们的SpringBoot项目打包然后再容器启动时运行了，打开Maven执行打包命令：\n\n![image-20220701205630885](https://s2.loli.net/2022/07/01/CRLi2uJcXhzqPHF.png)\n\n接着我们需要编辑Dockerfile，将我们构建好的jar包放进去：\n\n```dockerfile\nCOPY target/DockerTest-0.0.1-SNAPSHOT.jar app.jar\n```\n\n这里需要使用COPY命令来将文件拷贝到镜像中，第一个参数是我们要拷贝的本地文件，第二个参数是存放在Docker镜像中的文件位置，由于还没有学习存储管理，这里我们直接输入`app.jar`直接保存在默认路径即可。\n\n接着我们就需要指定在启动时运行我们的Java程序，这里使用CMD命令来完成：\n\n```dockerfile\nFROM ubuntu\nRUN apt update && apt install -y openjdk-8-jdk\nCOPY target/DockerTest-0.0.1-SNAPSHOT.jar app.jar\nCMD java -jar app.jar\n# EXPOSE 8080\n```\n\nCMD命令可以设定容器启动后执行的命令，EXPOSE可以指定容器需要暴露的端口，但是现在我们还没有学习网络相关的知识，所以暂时不使用，这里指定为我们启动Java项目的命令。配置完成后，重新构建：\n\n![image-20220701210438145](https://s2.loli.net/2022/07/01/NgCLJbRQc1lMqna.png)\n\n可以看到历史中已经出现新的步骤了：\n\n![image-20220701213513862](https://s2.loli.net/2022/07/01/gpfn4EqjMbZh1Nd.png)\n\n接着启动我们的镜像，我们可以直接在IDEA中进行操作，不用再去敲命令了，有点累：\n\n![image-20220701210845768](https://s2.loli.net/2022/07/01/t2MV3Tu6IcrK8Dl.png)\n\n![image-20220701210908997](https://s2.loli.net/2022/07/01/JqajY8EdVbGNhiF.png)\n\n启动后可以在右侧看到容器启动的日志信息：\n\n![image-20220701210946261](https://s2.loli.net/2022/07/01/jreyMHzcX8LTh3k.png)\n\n![image-20220701211029119](https://s2.loli.net/2022/07/01/OGAj3Rr59iVLqfe.png)\n\n但是我们发现启动之后并不能直接访问，这是为什么呢？这是因为容器内部的网络和外部网络是隔离的，我们如果想要访问容器内的服务器，需要将对应端口绑定到宿主机上，让宿主主机也开启这个端口，这样才能连接到容器内：\n\n```sh\ndocker run -p 8080:8080 -d springboot-test:1.0\n```\n\n这里`-p`表示端口绑定，将Docker容器内的端口绑定到宿主机的端口上，这样就可以通过宿主的8080端口访问到容器的8080端口了（有关容器网络管理我们还会在后面进行详细介绍），`-d`参数表示后台运行，当然直接在IDEA中配置也是可以的：\n\n![image-20220701211536598](https://s2.loli.net/2022/07/01/dXQlEBIDzU6YTLG.png)\n\n配置好后，点击重新创建容器：\n\n![image-20220701211701640](https://s2.loli.net/2022/07/01/6G7hbmW81uBsKFc.png)\n\n重新运行后，我们就可以成功访问到容器中运行的SpringBoot项目了：\n\n![image-20220701211753962](https://s2.loli.net/2022/07/01/7xNrfWcvC58hQ4q.png)\n\n当然，为了以后方便使用，我们可以直接将其推送到Docker Hub中，这里我们还是创建一个新的公开仓库：\n\n![image-20220701212330425](https://s2.loli.net/2022/07/01/oTXBtlPV7j3C6a9.png)\n\n这次我们就使用IDEA来演示直接进行镜像的上传，直接点击：\n\n![image-20220701212458851](https://s2.loli.net/2022/07/01/91tKnXDWaeFqcrx.png)\n\n接着我们需要配置一下我们的Docker Hub相关信息：\n\n![image-20220701212637581](https://s2.loli.net/2022/07/01/tMcD2kzNwW9J7d3.png)\n\n![image-20220701212731276](https://s2.loli.net/2022/07/01/kgTlz3m61ZrHx5s.png)\n\nOK，远程镜像仓库配置完成，直接推送即可，等待推送完成。\n\n![image-20220701212902977](https://s2.loli.net/2022/07/01/H5UfWXC2nKVeray.png)\n\n可以看到远程仓库中已经出现了我们的镜像，然后IDEA中也可以同步看到：\n\n![image-20220701213026214](https://s2.loli.net/2022/07/01/mgRKV2SWb9YxBGr.png)\n\n这样，我们就完成了使用IDEA将SpringBoot项目打包为Docker镜像。\n\n***\n\n## 容器网络管理\n\n\\*\\*注意：\\*\\*本小节学习需要掌握部分《计算机网络》课程中的知识。\n\n前面我们学习了容器和镜像的一些基本操作，了解了如何通过镜像创建容器、然后自己构建容器，以及远程仓库推送等，这一部分我们接着来讨论容器的网络管理。\n\n### 容器网络类型\n\nDocker在安装后，会在我们的主机上创建三个网络，使用`network ls`命令来查看：\n\n```sh\ndocker network ls\n```\n\n![image-20220702161742741](https://s2.loli.net/2022/07/02/7KEumyqriRY2QU5.png)\n\n可以看到默认情况下有`bridge`、`host`、`none`这三种网络类型（其实有点像虚拟机的网络配置，也是分桥接、共享网络之类的），我们先来依次介绍一下，在开始之前我们先构建一个镜像，默认的ubuntu镜像由于啥软件都没有，所以我们把一会网络要用到的先提前装好：\n\n```sh\ndocker run -it ubuntu\n```\n\n```sh\napt update\napt install net-tools iputils-ping curl\n```\n\n这样就安装好了，我们直接退出然后将其构建为新的镜像：\n\n```sh\ndocker commit lucid_sammet ubuntu-net\n```\n\n![image-20220702170441267](https://s2.loli.net/2022/07/02/NIGfx25Un83EV7Q.png)\n\nOK，一会我们就可以使用了。\n\n*   \\*\\*none网络：\\*\\*这个网络除了有一个本地环回网络之外，就没有其他的网络了，我们可以在创建容器时指定这个网络。\n\n    这里使用`--network`参数来指定网络：\n\n    ```sh\n    docker run -it --network=none ubuntu-net\n    ```\n\n    进入之后，我们可以直接查看一下当前的网络：\n\n    ```sh\n    ifconfig\n    ```\n\n    可以看到只有一个本地环回`lo`网络设备：\n\n    ![image-20220702170000617](https://s2.loli.net/2022/07/02/qL1oAkOCcIYRwZj.png)\n\n    所以这个容器是无法连接到互联网的：\n\n    ![image-20220702170531312](https://s2.loli.net/2022/07/02/xzSp4hTBkeFqCd3.png)\n\n    “真”单机运行，可以说是绝对的安全，没人能访问进去，存点密码这些还是不错的。\n\n*   \\*\\*bridge网络：\\*\\*容器默认使用的网络类型，这是桥接网络，也是应用最广泛的网络类型：\n\n    实际上我们在宿主主机上查看网络信息，会发现有一个名为docker0的网络设备：\n\n    ![image-20220702172102410](https://s2.loli.net/2022/07/02/jDKSIriXec96uhy.png)\n\n    这个网络设备是Docker安装时自动创建的虚拟设备，它有什么用呢？我们可以来看一下默认创建的容器内部的情况：\n\n    ```sh\n    docker run -it ubuntu-net\n    ```\n\n    ![image-20220702172532004](https://s2.loli.net/2022/07/02/5JdimQWMaCx7hy2.png)\n\n    可以看到容器的网络接口地址为172.17.0.2，实际上这是Docker创建的虚拟网络，就像容器单独插了一根虚拟的网线，连接到Docker创建的虚拟网络上，而docker0网络实际上作为一个桥接的角色，一头是自己的虚拟子网，另一头是宿主主机的网络。\n\n    网络拓扑类似于下面这样：\n\n    ![image-20220702173005750](https://s2.loli.net/2022/07/02/xCKMIBwjq7gWOko.png)\n\n    通过添加这样的网桥，我们就可以对容器的网络进行管理和控制，我们可以使用`network inspect`命令来查看docker0网桥的配置信息：\n\n    ```sh\n    docker network inspect bridge\n    ```\n\n    ![image-20220702173431530](https://s2.loli.net/2022/07/02/86XdZUejEuk1P3i.png)\n\n    这里的配置的子网是172.17.0.0，子网掩码是255.255.0.0，网关是172.17.0.1，也就是docker0这个虚拟网络设备，所以我们上面创建的容器就是这个子网内分配的地址172.17.0.2了。\n\n    之后我们还会讲解如何管理和控制容器网络。\n\n*   \\*\\*host网络：\\*\\*当容器连接到此网络后，会共享宿主主机的网络，网络配置也是完全一样的：\n\n    ```sh\n    docker run -it --network=host ubuntu-net\n    ```\n\n    可以看到网络列表和宿主主机的列表是一样的，不知道各位有没有注意到，连hostname都是和外面一模一样的：\n\n    ![image-20220702170754656](https://s2.loli.net/2022/07/02/cRAQtIxV4D9byCu.png)\n\n    只要宿主主机能连接到互联网，容器内部也是可以直接使用的：\n\n    ![image-20220702171041631](https://s2.loli.net/2022/07/02/lVsc1mpihq54Pue.png)\n\n    这样的话，直接使用宿主的网络，传输性能基本没有什么折损，而且我们可以直接开放端口等，不需要进行任何的桥接：\n\n    ```sh\n     apt install -y systemctl nginx\n     systemctl start nginx\n    ```\n\n    安装Nginx之后直接就可以访问了，不需要开放什么端口：\n\n    ![image-20220702171550979](https://s2.loli.net/2022/07/02/1JnY6KyVpXOwbtl.png)\n\n    相比桥接网络就方便得多了。\n\n我们可以根据实际情况，来合理地选择这三种网络使用。\n\n### 用户自定义网络\n\n除了前面我们介绍的三种网络之外，我们也可以自定义自己的网络，让容器连接到这个网络。\n\nDocker默认提供三种网络驱动：`bridge`、`overlay`、`macvlan`，不同的驱动对应着不同的网络设备驱动，实现的功能也不一样，比如bridge类型的，其实就和我们前面介绍的桥接网络是一样的。\n\n我们可以使用`network create`来试试看：\n\n```sh\ndocker network create --driver bridge test\n```\n\n这里我们创建了一个桥接网络，名称为test：\n\n![image-20220702180837819](https://s2.loli.net/2022/07/02/piCtK8kdRALHSIu.png)\n\n可以看到新增了一个网络设备，这个就是一会负责我们容器网络的网关了，和之前的docker0是一样的：\n\n```sh\ndocker network inspect test\n```\n\n![image-20220702181150667](https://s2.loli.net/2022/07/02/uLwAD4YC3UFXQt7.png)\n\n这里我们创建一个新的容器，使用此网络：\n\n```sh\n docker run -it --network=test ubuntu-net\n```\n\n![image-20220702181252137](https://s2.loli.net/2022/07/02/Iy2BwDoZsLMO8gJ.png)\n\n成功得到分配的IP地址，是在这个网络内的，注意不同的网络之间是隔离的，我们可以再创建一个容器试试看：\n\n![image-20220702181808792](https://s2.loli.net/2022/07/02/b14dflKGMunULQI.png)\n\n可以看到不同的网络是相互隔离的，无法进行通信，当然我们也为此容器连接到另一个容器所属的网络下：\n\n```sh\ndocker network connect test 容器ID/名称\n```\n\n![image-20220702182050204](https://s2.loli.net/2022/07/02/WzvhI63ydfeJStA.png)\n\n这样就连接了一个新的网络：\n\n![image-20220702182146049](https://s2.loli.net/2022/07/02/lxqrz36sVUjNdI4.png)\n\n可以看到容器中新增了一个网络设备连接到我们自己定义的网络中，现在这两个容器在同一个网络下，就可以相互ping了：\n![image-20220702182310008](https://s2.loli.net/2022/07/02/WBlC9PheETO64xq.png)\n\n这里就不介绍另外两种类型的网络了，他们是用于多主机通信的，目前我们只学习单机使用。\n\n### 容器间网络\n\n我们首先来看看容器和容器之间的网络通信，实际上我们之前已经演示过ping的情况了，现在我们创建两个ubuntu容器：\n\n```sh\ndocker run -it ubuntu-net\n```\n\n先获取其中一个容器的网络信息：\n\n![image-20220702175353454](https://s2.loli.net/2022/07/02/yTEcg4l2kASBnQu.png)\n\n我们可以直接在另一个容器中ping这个容器：\n\n!\\[image-20220702175444713]\\(/Users/nagocoler/Library/Application Support/typora-user-images/image-20220702175444713.png)\n\n可以看到能够直接ping通，因为这两个容器都是使用的bridge网络，在同一个子网中，所以可以互相访问。\n\n我们可以直接通过容器的IP地址在容器间进行通信，只要保证两个容器处于同一个网络下即可，虽然这样比较方便，但是大部分情况下，容器部署之后的IP地址是自动分配的（当然也可以使用`--ip`来手动指定，但是还是不方便），我们无法提前得知IP地址，那么有没有一直方法能够更灵活一些呢？\n\n我们可以借助Docker提供的DNS服务器，它就像是一个真的DNS服务器一样，能够对域名进行解析，使用很简单，我们只需要在容器启动时给个名字就行了，我们可以直接访问这个名称，最后会被解析为对应容器的IP地址，但是注意只会在我们用户自定义的网络下生效，默认的网络是不行的：\n\n```sh\ndocker run -it --name=test01 --network=test ubuntu-net\ndocker run -it --name=test02 --network=test ubuntu-net\n```\n\n接着直接ping对方的名字就可以了：\n\n![image-20220702192457354](https://s2.loli.net/2022/07/02/lKCFY6ec17N4b5y.png)\n\n可以看到名称会自动解析为对应的IP地址，这样的话就不用担心IP不确定的问题了。\n\n当然我们也可以让两个容器同时共享同一个网络，注意这里的共享是直接共享同一个网络设备，两个容器共同使用一个IP地址，只需要在创建时指定：\n\n```sh\ndocker run -it --name=test01 --network=container:test02 ubuntu-net\n```\n\n这里将网络指定为一个容器的网络，这样两个容器使用的就是同一个网络了：\n\n![image-20220702200711351](https://s2.loli.net/2022/07/02/Wb6jODxFP3r1mE7.png)\n\n可以看到两个容器的IP地址和网卡的Mac地址是完全一样的，它们的网络现在是共享状态，此时在容器中访问，localhost，既是自己也是别人。\n\n我们可以在容器1中，安装Nginx，然后再容器2中访问：\n\n```sh\n apt install -y systemctl nginx\n systemctl start nginx\n```\n\n![image-20220702201348722](https://s2.loli.net/2022/07/02/WTn9OMYmLZJXtBz.png)\n\n成功访问到另一个容器中的Nginx服务器。\n\n### 容器外部网络\n\n前面我们介绍了容器之间的网络通信，我们接着来看容器与外部网络的通信。\n\n首先我们来看容器是如何访问到互联网的，在默认的三种的网络下，只有共享模式和桥接模式可以连接到外网，共享模式实际上就是直接使用宿主主机的网络设备连接到互联网，这里我们主要来看一下桥接模式。\n\n通过前面的学习，我们了解到桥接模式实际上就是创建一个单独的虚拟网络，让容器在这个虚拟网络中，然后通过桥接器来与外界相连，那么数据包是如何从容器内部的网络到达宿主主机再发送到互联网的呢？实际上整个过程中最关键的就是依靠NAT（Network Address Translation）将地址进行转换，再利用宿主主机的IP地址发送数据包出去。\n\n这里我们就来补充一下《计算机网络》课程中学习的NAT：\n\n实际上NAT在我们生活中也是经常见到的，比如我们要访问互联网上的某个资源，要和服务器进行通信，那么就需要将数据包发送出去，同时服务器也要将数据包发送回来，我们可以知道服务器的IP地址，也可以直接去连接，因为服务器的IP地址是暴露在互联网上的，但是我们的局域网就不一样了，它仅仅局限在我们的家里，比如我们连接了家里的路由器，可以得到一个IP地址，但是你会发现，这个IP公网是无法直接访问到我们的，因为这个IP地址仅仅是一个局域网的IP地址，俗称内网IP，既然公网无法访问到我们，那服务器是如何将数据包发送给我们的呢？\n\n![image-20220702230700124](https://s2.loli.net/2022/07/02/LxtQ68HzEVYKdjW.png)\n\n实际上这里就借助了NAT在帮助我们与互联网上的服务器进行通信，通过NAT，可以实现将局域网的IP地址，映射为对应的公网IP地址，而NAT设备一端连接外网，另一端连接内网的所有设备，当我们想要与外网进行通信时，就可以将数据包发送给NAT设备，由它来将数据包的源地址映射为它在外网上的地址，这样服务器就能够发现它了，能够直接与它建立通信。当服务器发送数据回来时，也是直接交给NAT设备，然后再根据地址映射，转发给对应的内网设备（当然由于公网IP地址有限，所以一般采用IP+端口结合使用的形式ANPT）\n\n所以你打开百度直接搜IP，会发现这个IP地址并不是你本地的，而是NAT设备的公网地址：\n\n![image-20220702231458928](https://s2.loli.net/2022/07/02/uAW9GH1b6xkDB3T.png)\n\n实际上我们家里的路由器一般都带有NAT功能，默认开启NAT模式，包括我们的小区也是有一个NAT设备在进行转换的，这样你的电脑才能在互联网的世界中遨游。当然NAT也可以保护内网的设备不会直接暴露在公网，这样也会更加的安全，只有当我们主动发起连接时，别人才能知道我们。\n\n当然，我们的Docker也是这样的，实际上内网的数据包想要发送到互联网上去，那么就需要经过这样的一套流程：\n\n![image-20220702232449520](https://s2.loli.net/2022/07/02/ktEA5O9BrmxXbPz.png)\n\n这样，Docker容器使用的内网就可以和外网进行通信了。\n\n但是这样有一个问题，单纯依靠NAT的话，只有我们主动与外界联系时，外界才能知道我们，但是现在我们的容器中可能会部署一些服务，需要外界来主动连接我们，此时该怎么办呢？\n\n我们可以直接在容器时配置端口映射，还记得我们在第一节课部署Nginx服务器吗？\n\n```sh\ndocker run -d -p 80:80 nginx\n```\n\n这里的`-p`参数实际上是进行端口映射配置，端口映射可以将容器需要对外提供服务的端口映射到宿主主机的端口上，这样，当外部访问到宿主主机的对应端口时，就会直接转发给容器内映射的端口了。规则为`宿主端口:容器端口`，这里配置的是将容器的80端口映射到宿主主机的80端口上。\n\n![image-20220702233420287](https://s2.loli.net/2022/07/02/WQzEVTwePNaHYgG.png)\n\n一旦监听到宿主主机的80端口收到了数据包，那么会直接转发给对应的容器。所以配置了端口映射之后，我们才可以从外部正常访问到容器内的服务：\n\n![image-20220630165440751](https://s2.loli.net/2022/07/02/VY5imqeG9jlAz8d.png)\n\n我们也可以直接输入`docker ps`查看端口映射情况：\n\n![image-20220702233831651](https://s2.loli.net/2022/07/02/dyDhNRvQ7Bzixka.png)\n\n至此，有关容器的网络部分，就到此为止，当然这仅仅是单机下的容器网络操作，在以后的课程中，我们还会进一步学习多主机下的网络配置。\n\n***\n\n## 容器存储管理\n\n前面我们介绍了容器的网络管理，我们现在已经了解了如何配置容器的网络，以及相关的一些原理。还有一个比较重要的部分就是容器的存储，在这一小节我们将深入了解容器的存储管理。\n\n### 容器持久化存储\n\n我们知道，容器在创建之后，实际上我们在容器中创建和修改的文件，实际上是被容器的分层机制保存在最顶层的容器层进行操作的，为了保护下面每一层的镜像不被修改，所以才有了这样的CopyOnWrite特性。但是这样也会导致容器在销毁时数据的丢失，当我们销毁容器重新创建一个新的容器时，所有的数据全部丢失，直接回到梦开始的地方。\n\n在某些情况下，我们可能希望对容器内的某些文件进行持久化存储，而不是一次性的，这里就要用到数据卷（Data Volume）了。\n\n在开始之前我们先准备一下实验要用到的镜像：\n\n```sh\ndocker run -it ubuntu\napt update && apt install -y vim\n```\n\n然后打包为我们一会要使用的镜像：\n\n    docker commit \n\n我们可以让容器将文件保存到宿主主机上，这样就算容器销毁，文件也会在宿主主机上保留，下次创建容器时，依然可以从宿主主机上读取到对应的文件。如何做到呢？只需要在容器启动时指定即可：\n\n```sh\nmkdir test\n```\n\n我们现在用户目录下创建一个新的`test`目录，然后在里面随便创建一个文件，再写点内容：\n\n```sh\nvim test/hello.txt\n```\n\n接着我们就可以将宿主主机上的目录或文件挂载到容器的某个目录上：\n\n```sh\ndocker run -it -v ~/test:/root/test ubuntu-volume\n```\n\n这里用到了一个新的参数`-v`，用于指定文件挂载，这里是将我们刚刚创建好的test目录挂在到容器的/root/test路径上。\n\n![image-20220703105256049](https://s2.loli.net/2022/07/03/ztEJDC4PTVAyZF2.png)\n\n这样我们就可以直接在容器中访问宿主主机上的文件了，当然如果我们对挂载目录中的文件进行编辑，那么相当于编辑的是宿主主机的数据：\n\n```sh\nvim /root/test/test.txt  \n```\n\n![image-20220703105626105](https://s2.loli.net/2022/07/03/YqUHkJiTG3Q9pAM.png)\n\n在宿主主机的对应目录下，可以直接访问到我们刚刚创建好的文件。\n\n接着我们来将容器销毁，看看当容器不复存在时，挂载的数据时候还能保留：\n\n![image-20220703105847329](https://s2.loli.net/2022/07/03/B5M6Wy8AxIoqJtC.png)\n\n可以看到，即使我们销毁了容器，在宿主主机上的文件依然存在，并不会受到影响，这样的话，当我们下次创建新的镜像时，依然可以使用这些保存在外面的文件。\n\n比如我们现在想要部署一个Nginx服务器来代理我们的前端，就可以直接将前端页面保存到宿主主机上，然后通过挂载的形式让容器中的Nginx访问，这样就算之后Nginx镜像有升级，需要重新创建，也不会影响到我们的前端页面。这里我们来测试一下，我们先将前端模板上传到服务器：\n\n```sh\nscp Downloads/moban5676.zip 192.168.10.10:~/\n```\n\n然后在服务器上解压一下：\n\n```sh\nunzip moban5676.zip\n```\n\n接着我们就可以启动容器了：\n\n```sh\ndocker run -it -v ~/moban5676:/usr/share/nginx/html/ -p 80:80 -d nginx\n```\n\n这里我们将解压出来的目录，挂载到容器中Nginx的默认站点目录`/usr/share/nginx/html/`（由于挂在后位于顶层，会替代镜像层原有的文件），这样Nginx就直接代理了我们存放在宿主主机上的前端页面，当然别忘了把端口映射到宿主主机上，这里我们使用的镜像是官方的nginx镜像。\n\n现在我们进入容器将Nginx服务启动：\n\n```sh\nsystemctl start nginx\n```\n\n然后通过浏览器访问看看是否代理成功：\n\n![image-20220703111937254](https://s2.loli.net/2022/07/03/YtgXWizh765qFxr.png)\n\n可以看到我们的前端页面直接被代理了，当然如果我们要编写自定义的配置，也是使用同样的方法操作即可。\n\n注意如果我们在使用`-v`参数时不指定宿主主机上的目录进行挂载的话，那么就由Docker来自动创建一个目录，并且会将容器中对应路径下的内容拷贝到这个自动创建的目录中，最后挂在到容器中，这种就是由Docker管理的数据卷了（docker managed volume）我们来试试看：\n\n```sh\ndocker run -it -v /root/abc ubuntu-volume\n```\n\n注意这里我们仅仅指定了挂载路径，没有指定宿主主机的对应目录，继续创建：\n\n![image-20220703112702067](https://s2.loli.net/2022/07/03/fXCl7IRqKBvYwxj.png)\n\n创建后可以看到`root`目录下有一个新的`abc`目录，那么它具体是在宿主主机的哪个位置呢？这里我们依然可以使用`inspect`命令：\n\n```sh\ndocker inspect bold_banzai \n```\n\n![image-20220703113507320](https://s2.loli.net/2022/07/03/zFotAfeBpcRjKWN.png)\n\n可以看到Sorce指向的是`/var/lib`中的某个目录，我们可以进入这个目录来创建一个新的文件，进入之前记得提升一下权限，权限低了还进不去：\n\n![image-20220703114333446](https://s2.loli.net/2022/07/03/2bfokiMTmdGZcUE.png)\n\n我们来创一个新的文本文档：\n\n![image-20220703114429831](https://s2.loli.net/2022/07/03/yi1hSPC3bAndMXm.png)\n\n实际上和我们之前是一样的，也是可以在容器中看到的，当然删除容器之后，数据依然是保留的。当我们不需要使用数据卷时，可以进行删除：\n\n![image-20220703145011638](https://s2.loli.net/2022/07/03/f8NPDWmhLtvw3SV.png)\n\n当然有时候为了方便，可能并不需要直接挂载一个目录上去，仅仅是从宿主主机传递一些文件到容器中，这里我们可以使用`cp`命令来完成：\n\n![image-20220703115648195](https://s2.loli.net/2022/07/03/uw7S5PobAUWBtCI.png)\n\n这个命令支持从宿主主机复制文件到容器，或是从容器复制文件到宿主主机，使用方式类似于Linux自带的`cp`命令。\n\n### 容器数据共享\n\n前面我们通过挂载的形式，将宿主主机上的文件直接挂载到容器中，这样容器就可以直接访问到宿主主机上的文件了，并且在容器删除时也不会清理宿主主机上的文件。\n\n我们接着来看看如何实现容器与容器之间的数据共享，实际上按照我们之前的思路，我们可以在宿主主机创建一个公共的目录，让这些需要实现共享的容器，都挂载这个公共目录：\n\n```sh\ndocker run -it -v ~/test:/root/test ubuntu-volume\n```\n\n![image-20220703141840532](https://s2.loli.net/2022/07/03/soxdKyY4MIXBOin.png)\n\n由于挂载的是宿主主机上的同一块区域，所以内容可以直接在两个容器中都能访问。当然我们也可以将另一个容器挂载的目录，直接在启动容器时指定使用此容器挂载的目录：\n\n```sh\ndocker run -it -v ~/test:/root/test --name=data_test ubuntu-volume\ndocker run -it --volumes-from data_test ubuntu-volume\n```\n\n这里使用`--volumes-from`指定另一个容器（这种用于给其他容器提供数据卷的容器，我们一般称为数据卷容器）\n\n![image-20220703142849845](https://s2.loli.net/2022/07/03/Uu4CjSZifv1Oyr7.png)\n\n可以看到，数据卷容器中挂载的内容，在当前容器中也是存在的，当然就算此时数据卷容器被删除，那么也不会影响到这边，因为这边相当于是继承了数据卷容器提供的数据卷，所以本质上还是让两个容器挂载了同样的目录实现数据共享。\n\n虽然通过上面的方式，可以在容器之间实现数据传递，但是这样并不方便，可能某些时候我们仅仅是希望容器之间共享，而不希望有宿主主机这个角色直接参与到共享之中，此时我们就需要寻找一种更好的办法了。其实我们可以将数据完全放入到容器中，通过构建一个容器，来直接将容器中打包好的数据分享给其他容器，当然本质上依然是一个Docker管理的数据卷，虽然还是没有完全脱离主机，但是移植性就高得多了。\n\n我们来编写一个Dockerfile：\n\n```dockerfile\nFROM ubuntu\nADD moban5676.tar.gz /usr/share/nginx/html/\nVOLUME /usr/share/nginx/html/\n```\n\n这里我们使用了一个新的指令ADD，它跟COPY命令类似，也可以复制文件到容器中，但是它可以自动对压缩文件进行解压，这里只需要将压缩好的文件填入即可，后面的VOLUME指令就像我们使用`-v`参数一样，会创建一个挂载点在容器中：\n\n```sh\ncd test\ntar -zcvf moban5676.tar.gz *\nmv moban5676.tar.gz ..\ncd ..\n```\n\n接着我们直接构建：\n\n```sh\ndocker build -t data .\n```\n\n![image-20220703153109650](https://s2.loli.net/2022/07/03/M7jxBUsApKtgzku.png)\n\n现在我们运行一个容器看看：\n\n![image-20220703153343461](https://s2.loli.net/2022/07/03/SUg32jlwMcY7Btp.png)\n\n可以看到所有的文件都自动解压出来了（除了中文文件名称乱码了之外，不过无关紧要）我们退出容器，可以看到数据卷列表中新增了我们这个容器需要使用的：\n\n![image-20220703153514730](https://s2.loli.net/2022/07/03/m6VCIbXyMxt3ilT.png)\n\n![image-20220703153542739](https://s2.loli.net/2022/07/03/KyLUic5r6oW4HDx.png)\n\n这个位置实际上就是数据存放在当前主机上的位置了，不过是由Docker进行管理而不是我们自定义的。现在我们就可以创建一个新的容器直接继承了：\n\n```sh\ndocker run -p 80:80 --volumes-from=data_test -d nginx\n```\n\n访问一下Nginx服务器，可以看到成功代理：\n\n![image-20220703111937254](https://s2.loli.net/2022/07/03/YtgXWizh765qFxr.png)\n\n这样我们就实现了将数据放在容器中进行共享，我们不需要刻意去指定宿主主机的挂载点，而是Docker自行管理，这样就算迁移主机依然可以快速部署。\n\n***\n\n## 容器资源管理\n\n前面我们已经完成Docker的几个主要模块的学习，最后我们来看看如何对容器的资源进行管理。\n\n### 容器控制操作\n\n在开始之前，我们还是要先补充一些我们前面没有提到的其他容器命令。\n\n首先我们的SpringBoot项目在运行是，怎么查看输出的日志信息呢？\n\n```sh\ndocker logs test\n```\n\n这里使用`log`命令来打印容器中的日志信息：\n\n![image-20220701221210083](https://s2.loli.net/2022/07/01/scNgb1uheEpiKL8.png)\n\n当然也可以添加`-f`参数来持续打印日志信息。\n\n![image-20220701215617022](https://s2.loli.net/2022/07/01/QTDeKASvHW1rXlw.png)\n\n现在我们的容器已经启动了，但是我们想要进入到容器监控容器的情况怎么办呢？我们可以是`attach`命令来附加到容器启动命令的终端上：\n\n```sh\ndocker attach 容器ID/名称\n```\n\n![image-20220701215829492](https://s2.loli.net/2022/07/01/QjHJsCt3DzqP6kZ.png)\n\n注意现在就切换为了容器内的终端，如果想要退出的话，需要先按Ctrl+P然后再按Ctrl+Q来退出终端，不能直接使用Ctrl+C来终止，这样会直接终止掉Docker中运行的Java程序的。\n\n![image-20220701220018207](https://s2.loli.net/2022/07/01/XkFKtxq3Epua5ib.png)\n\n退出后，容器依然是处于运行状态的。\n\n我们也可以使用`exec`命令在容器中启动一个新的终端或是在容器中执行命令：\n\n```sh\ndocker exec -it test bash\n```\n\n`-it`和`run`命令的操作是一样的，这里执行后，会创建一个新的终端（当然原本的程序还是在正常运行）我们会在一个新的终端中进行交互：\n\n![image-20220701220601732](https://s2.loli.net/2022/07/01/lMc2JueBLIFz9bf.png)\n\n当然也可以仅仅在容器中执行一条命令：\n\n![image-20220701220909626](https://s2.loli.net/2022/07/01/aVvzjuEM56JmGd7.png)\n\n执行后会在容器中打开一个新的终端执行命令，并输出结果。\n\n前面我们还学习了容器的停止操作，通过输入`stop`命令来停止容器，但是此操作并不会立即停止，而是会等待容器处理善后，那么怎么样才能强制终止容器呢？我们可以直接使用`kill`命令，相当于给进程发送SIGKILL信号，强制结束。\n\n```sh\ndocker kill test\n```\n\n相比`stop`命令，`kill`就没那么温柔了。\n\n有时候可能只是希望容器暂时停止运行，而不是直接终止运行，我们希望在未来的某个时间点，恢复容器的运行，此时就可以使用`pause`命令来暂停容器：\n\n```sh\ndocker pause test\n```\n\n暂停容器后，程序暂时停止运行，无法响应浏览器发送的请求：\n\n![image-20220701222537737](https://s2.loli.net/2022/07/01/1yBYnGmuXVbNFKO.png)\n\n![image-20220701222243900](https://s2.loli.net/2022/07/01/ovbqk7xS3LKhmOH.png)\n\n此时处于爱的魔力转圈圈状态，我们可以将其恢复运行，使用`unpause`命令：\n\n```sh\ndocker unpause test\n```\n\n恢复运行后，瞬间就响应成功了。\n\n![image-20220701222323948](https://s2.loli.net/2022/07/01/g2b8mxVz1i7WJop.png)\n\n### 物理资源管理\n\n对于一个容器，在某些情况下我们可能并不希望它占据所有的系统资源来运行，我们只希望分配一部分资源给容器，比如只分配给容器2G内存，最大只允许使用2G，不允许再占用更多的内存，此时我们就需要对容器的资源进行限制。\n\n```sh\ndocker run -m 内存限制 --memory-swap=内存和交换分区总共的内存限制 镜像名称\n```\n\n其中`-m`参数是对容器的物理内存的使用限制，而`--memory-swap`是对内存和交换分区总和的限制，它们默认都是`-1`，也就是说没有任何的限制（如果在一开始仅指定`-m`参数，那么交换内存的限制与其保持一致，内存+交换等于`-m`的两倍大小）默认情况下跟宿主主机一样，都是2G内存，现在我们可以将容器的内存限制到100M试试看，其中物理内存50M，交换内存50M，尝试启动一下SpringBoot程序：\n\n```sh\ndocker run -it -m 50M --memory-swap=100M nagocoler/springboot-test:1.0\n```\n\n可以看到，上来就因为内存不足无法启动了：\n\n![image-20220702104653971](https://s2.loli.net/2022/07/02/MrBWZKIzgxE94Ck.png)\n\n当然除了对内存的限制之外，我们也可以对CPU资源进行限额，默认情况下所有的容器都可以平等地使用CPU资源，我们可以调整不同的容器的CPU权重（默认为1024），来按需分配资源，这里需要使用到`-c`选项，也可以输入全名`--cpu-share`：\n\n```sh\ndocker run -c 1024 ubuntu\ndocker run -c 512 ubuntu\n```\n\n这里容器的CPU权重比例为16比8，也就是2比1（注意多个容器时才会生效），那么当CPU资源紧张时，会按照此权重来分配资源，当然如果CPU资源并不紧张的情况下，依然是有机会使用到全部的CPU资源的。\n\n这里我们使用一个压力测试工具来进行验证：\n\n```sh\ndocker run -c 1024 --name=cpu1024 -it ubuntu\ndocker run -c 512 --name=cpu512 -it ubuntu\n```\n\n接着我们分别进入容器安装`stress`压力测试工具：\n\n```sh\napt update && apt install -y stress\n```\n\n接着我们分别在两个容器中都启动压力测试工具，产生4个进程不断计算随机数的平方根：\n\n```sh\nstress -c 4\n```\n\n接着我们进入top来看看CPU状态（看完之后记得赶紧去kill掉容器，不然CPU拉满很卡的）：\n\n![image-20220702114126128](https://s2.loli.net/2022/07/02/3dHkMWnq1ZxCyKm.png)\n\n可以看到权重高的容器中，分配到了更多的CPU资源，而权重低的容器中，只分配到一半的CPU资源。\n\n当然我们也可以直接限制容器使用的CPU数量：\n\n```sh\ndocker run -it --cpuset-cpus=1 ubuntu\n```\n\n`--cpuset-cpus`选项可以直接限制在指定的CPU上运行，比如现在我们的宿主机是2核的CPU，那么就可以分0和1这两个CPU给Docker使用，限制后，只会使用CPU 1的资源了：\n\n![image-20220702115538699](https://s2.loli.net/2022/07/02/erovkRBi7hSOuAt.png)\n\n可以看到，4个进程只各自使用了25%的CPU，加在一起就是100%，也就是只能占满一个CPU的使用率。如果要分配多个CPU，则使用逗号隔开：\n\n```sh\ndocker run -it --cpuset-cpus=0,1 ubuntu\n```\n\n这样就会使用这两个CPU了：\n\n![image-20220702115818344](https://s2.loli.net/2022/07/02/rdAPYlfsgeLOZa9.png)\n\n当然也可以直接使用`--cpus`来限制使用的CPU资源数：\n\n```sh\ndocker run -it --cpus=1 ubuntu\n```\n\n![image-20220702120329140](https://s2.loli.net/2022/07/02/pUGCjlsQbEM2Ika.png)\n\n限制为1后，只能使用一个CPU提供的资源，所以这里加载一起只有一个CPU的资源了。当然还有更精细的`--cpu-period `和`--cpu-quota`，这里就不做介绍了。\n\n最后我们来看一下对磁盘IO读写性能的限制，我们首先使用`dd`命令来测试磁盘读写速度：\n\n```sh\ndd if=/dev/zero of=/tmp/1G bs=4k count=256000 oflag=direct\n```\n\n可以不用等待跑完，中途Ctrl+C结束就行：\n\n![image-20220702121839871](https://s2.loli.net/2022/07/02/1y3O2qbaMsxDFUJ.png)\n\n可以看到当前的读写速度为86.4 MB/s，我们可以通过`--device-read/write-bps`和`--device-read/write-iops`参数对其进行限制。\n\n这里要先说一下区别：\n\n*   bps：每秒读写的数据量。\n*   iops：每秒IO的次数。\n\n为了直观，这里我们直接使用BPS作为限制条件：\n\n```sh\ndocker run -it --device-write-bps=/dev/sda:10MB ubuntu\n```\n\n因为容器的文件系统是在`/dev/sda`上的，所以这我们就`/dev/sda:10MB`来限制对/dev/sda的写入速度只有10MB/s，我们来测试一下看看：\n\n![image-20220702122557288](https://s2.loli.net/2022/07/02/EczxDAmUCvlwT5u.png)\n\n可以看到现在的速度就只有10MB左右了。\n\n### 容器监控\n\n最后我们来看看如何对容器的运行状态进行实时监控，我们现在希望能够对容器的资源占用情况进行监控，该怎么办呢？\n\n我们可以使用`stats`命令来进行监控：\n\n```sh\ndocker stats\n```\n\n![image-20220702153236692](https://s2.loli.net/2022/07/02/hl6qw7sXuavA4pY.png)\n\n可以实时对容器的各项状态进行监控，包括内存使用、CPU占用、网络I/O、磁盘I/O等信息，当然如果我们限制内存的使用的话：\n\n```sh\ndocker run -d -m 200M nagocoler/springboot-test:1.0\n```\n\n可以很清楚地看到限制情况：\n\n![image-20220702153704729](https://s2.loli.net/2022/07/02/CGc6T4iYyN7PD51.png)\n\n除了使用`stats`命令来实时监控情况之外，还可以使用`top`命令来查看容器中的进程：\n\n```sh\ndocker top 容器ID/名称\n```\n\n![image-20220702153957780](https://s2.loli.net/2022/07/02/ytMjZXK9aivTAWD.png)\n\n当然也可以携带一些参数，具体的参数与Linux中`ps`命令参数一致，这里就不多做介绍了。\n\n但是这样的监控是不是太原始了一点？有没有那种网页面板可以进行实时监控和管理的呢？有的。\n\n我们需要单独部署一个Docker网页管理面板应用，一般比较常见的有：Portainer，我们这里可以直接通过Docker镜像的方式去部署这个应用程序，搜索一下，发现最新版维护的地址为：<https://hub.docker.com/r/portainer/portainer-ce>\n\nCE为免费的社区版本，当然也有BE商业版本，这里我们就直接安装社区版就行了，官方Linux安装教程：<https://docs.portainer.io/start/install/server/docker/linux，包含一些安装前需要的准备。>\n\n首先我们需要创建一个数据卷供Portainer使用：\n\n```sh\ndocker volume create portainer_data\n```\n\n接着通过官方命令安装启动：\n\n```sh\ndocker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\n```\n\n注意这里需要开放两个端口，一个是8000端口，还有一个是9443端口。\n\n![image-20220702155450772](https://s2.loli.net/2022/07/02/m71ha8YWsUzPFJ4.png)\n\nOK，开启成功，我们可以直接登录后台面板：<https://IP:9443/，这里需要HTTPS访问，浏览器可能会提示不安全，无视就行：>\n\n![image-20220702155637366](https://s2.loli.net/2022/07/02/mukzgvnWZyrxeaM.png)\n\n![image-20220702155703962](https://s2.loli.net/2022/07/02/E3vy1MKPAr5OJtW.png)\n\n进入后就需要我们进行注册了，这里我们只需输入两次密码即可，默认用户名就是admin，填写完成后，我们就可以开始使用了：\n\n![image-20220702160124676](https://s2.loli.net/2022/07/02/P1JIKaMCl7guYoz.png)\n\n点击Get Started即可进入到管理页面，我们可以看到目前有一个本地的Docker服务器正在运行：\n\n![image-20220702160328972](https://s2.loli.net/2022/07/02/OUTrAEmwsNoSG8Y.png)\n\n我们可以点击进入，进行详细地管理，不过唯一缺点就是没中文，挺难受的，也可以使用非官方的汉化版本：<https://hub.docker.com/r/6053537/portainer-ce。>\n\n***\n\n## 单机容器编排\n\n最后我们来讲解一下Docker-Compose，它能够对我们的容器进行编排。比如现在我们要在一台主机上部署很多种类型的服务，包括数据库、消息队列、SpringBoot应用程序若干，或是想要搭建一个MySQL集群，这时我们就需要创建多个容器来完成来，但是我们希望能够实现一键部署，这时该怎么办呢？我们就要用到容器编排了，让多个容器按照我们自己的编排进行部署。\n\n\\*\\*官方文档：\\*\\*<https://docs.docker.com/get-started/08_using_compose/，视频教程肯定不可能把所有的配置全部介绍完，所以如果各位小伙伴想要了解更多的配置，有更多需求的话，可以直接查阅官方文档。>\n\n### 快速开始\n\n在Linux环境下我们需要先安装一下插件：\n\n```sh\nsudo apt install docker-compose-plugin\n```\n\n接着输入`docker compose version`来验证一下是否安装成功。\n\n![image-20220703163126221](https://s2.loli.net/2022/07/03/5XDiAMpgW9aqUGJ.png)\n\n这里我们就以部署SpringBoot项目为例，我们继续使用之前打包好的SpringBoot项目，现在我们希望部署这个SpringBoot项目的同时，部署一个MySQL服务器，一个Redis服务器，这时我们SpringBoot项目要运行的整个完整环境，先获取到对应的镜像：\n\n```sh\ndocker pull mysql/mysql-server\ndocker pull redis\n```\n\n接着，我们需要在自己的本地安装一下DockerCompose，下载地址：<https://github.com/docker/compose/releases，下载自己电脑对应的版本，然后在IDEA中配置：>\n\n![image-20220703175103531](https://s2.loli.net/2022/07/03/GmcqXEV3tsPQYd9.png)\n\n下载完成后，将Docker Compose可执行文件路径修改为你存放刚刚下载的可执行文件的路径，Windows直接设置路径就行，MacOS下载之后需要进行下面的操作：\n\n```sh\nmv 下载的文件名称 docker-compose\nsudo chmod 777 docker-compose\nsudo mv docker-compose /usr/local/bin\n```\n\n配置完成后就可以正常使用了，否则会无法运行，接着我们就可以开始在IDEA中编写docker-compose.yml文件了。\n\n![image-20220703180206437](https://s2.loli.net/2022/07/03/M1gcJFUfQtnEpmB.png)\n\n这里点击右上角的“与服务工具窗口同步”按钮，这样一会就可以在下面查看情况了。\n\n我们现在就从头开始配置这个文件，现在我们要创建三个服务，一个是MySQL服务器，一个是Redis服务器，还有一个是SpringBoot服务器，需要三个容器来分别运行，首先我们先写上这三个服务：\n\n```yaml\nversion: \"3.9\"  #首先是版本号，别乱写，这个是和Docker版本有对应的\nservices:   #services里面就是我们所有需要进行编排的服务了\n  spring:   #服务名称，随便起\n    container_name: app_springboot  #一会要创建的容器名称\n  mysql:\n    container_name: app_mysql\n  redis:\n    container_name: app_redis\n```\n\n这样我们就配置好了一会要创建的三个服务和对应的容器名称，接着我们需要指定一下这些容器对应的镜像了，首先是我们的SpringBoot应用程序，可能我们后续还会对应用程序进行更新和修改，所以这里我们部署需要先由Dockerfile构建出镜像后，再进行部署：\n\n```yaml\nspring:\n  container_name: app_springboot\n  build: .  #build表示使用构建的镜像，.表示使用当前目录下的Dockerfile进行构建\n```\n\n我们这里修改一下Dockerfile，将基础镜像修改为已经打包好JDK环境的镜像：\n\n```dockerfile\nFROM adoptopenjdk/openjdk8\nCOPY target/DockerTest-0.0.1-SNAPSHOT.jar app.jar\nCMD java -jar app.jar\n```\n\n接着是另外两个服务，另外两个服务需要使用对应的镜像来启动容器：\n\n```yml\nmysql:\n  container_name: app_mysql\n  image: mysql/mysql-server:latest  #image表示使用对应的镜像，这里会自动从仓库下载，然后启动容器\nredis:\n  container_name: app_redis\n  image: redis:latest\n```\n\n还没有结束，我们还需要将SpringBoot项目的端口进行映射，最后一个简单的docker-compose配置文件就编写完成了：\n\n```yaml\nversion: \"3.9\"  #首先是版本号，别乱写，这个是和Docker版本有对应的\nservices:   #services里面就是我们所有需要进行编排的服务了\n  spring:   #服务名称，随便起\n    container_name: app_springboot  #一会要创建的容器名称\n    build: .\n    ports:\n    - \"8080:8080\"\n  mysql:\n    container_name: app_mysql\n    image: mysql/mysql-server:latest\n  redis:\n    container_name: app_redis\n    image: redis:latest\n```\n\n现在我们就可以直接一键部署了，我们点击下方部署按钮：\n\n![image-20220703182541976](https://s2.loli.net/2022/07/03/bTWZkQidsqfNc9w.png)\n\n![image-20220703182559020](https://s2.loli.net/2022/07/03/YHzOEhS5giBVql2.png)\n\n看到 Running 4/4 就表示已经部署成功了，我们现在到服务器这边来看看情况：\n\n![image-20220703182657205](https://s2.loli.net/2022/07/03/ZAsg3KM8r19malT.png)\n\n可以看到，这里确实是按照我们的配置，创建了3个容器，并且都是处于运行中，可以正常访问：\n\n![image-20220703182958392](https://s2.loli.net/2022/07/03/GqbV1SWMRY8jnEc.png)\n\n如果想要结束的话，我们只需要点击停止就行了：\n\n![image-20220703183240400](https://s2.loli.net/2022/07/03/ZNRB1XegVFJEaQ7.png)\n\n当然如果我们不再需要这套环境的话，可以直接点击下方的按钮，将整套编排给down掉，这样的话相对应的容器也会被清理的：\n\n![image-20220703183730693](https://s2.loli.net/2022/07/03/IOVsb3tGpqAnHk9.png)\n\n![image-20220703183807157](https://s2.loli.net/2022/07/03/ZWbxDKTCimdo6Mr.png)\n\n注意在使用docker-compose部署时，会自动创建一个新的自定义网络，并且所有的容器都是连接到这个自定义的网络里面：\n\n![image-20220703210431690](https://s2.loli.net/2022/07/03/NB2MfgA5GZuCSnd.png)\n\n这个网络默认也是使用bridge作为驱动：\n\n![image-20220703210531073](https://s2.loli.net/2022/07/03/jEazItdPKxuRcCQ.png)\n\n这样，我们就完成了一个简单的配置，去部署我们的整套环境。\n\n### 部署完整项目\n\n前面我们学习了使用`docker-compose`进行简单部署，但是仅仅只是简单启动了服务，我们现在来将这些服务给连起来。首先是SpringBoot项目，我们先引入依赖：\n\n```xml\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n\n<dependency>\n   <groupId>mysql</groupId>\n   <artifactId>mysql-connector-java</artifactId>\n</dependency>\n```\n\n接着配置一下数据源，等等，我们怎么知道数据库的默认密码是多少呢？所以我们先配置一下MySQL服务：\n\n```yaml\nmysql:\n  container_name: app_mysql\n  image: mysql/mysql-server:latest\n  environment:   #这里我们通过环境变量配置MySQL的root账号和密码\n    MYSQL_ROOT_HOST: '%'   #登陆的主机，这里直接配置为'%'\n    MYSQL_ROOT_PASSWORD: '123456.root'    #MySQL root账号的密码，别设定得太简单了\n    MYSQL_DATABASE: 'study'    #在启动时自动创建的数据库\n    TZ: 'Asia/Shanghai'    #时区\n  ports:\n  - \"3306:3306\"    #把端口暴露出来，当然也可以不暴露，因为默认所有容器使用的是同一个网络\n```\n\n有关MySQL的详细配置请查阅：<https://registry.hub.docker.com/_/mysql>\n\n接着我们将数据源配置完成：\n\n```yaml\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://app_mysql:3306/study   #地址直接输入容器名称，会自动进行解析，前面已经讲过了\n    username: root\n    password: 123456.root\n```\n\n然后我们来写点测试的代码吧，这里我们使用JPA进行交互：\n\n```xml\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency>\n\n<dependency>\n   <groupId>org.projectlombok</groupId>\n   <artifactId>lombok</artifactId>\n</dependency>\n```\n\n```java\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@Entity\n@Table(name = \"db_account\")\npublic class Account {\n\n    @Column(name = \"id\")\n    @Id\n    long id;\n\n    @Column(name = \"name\")\n    String name;\n\n    @Column(name = \"password\")\n    String password;\n}\n```\n\n```java\n@Repository\npublic interface AccountRepository extends JpaRepository<Account, Long> {\n\n}\n```\n\n```java\n@RestController\npublic class MainController {\n\n    @Resource\n    AccountRepository repository;\n\n    @RequestMapping(\"/\")\n    public String hello(){\n        return \"Hello World!\";\n    }\n\n    @GetMapping(\"/get\")\n    public Account get(@RequestParam(\"id\") long id){\n        return repository.findById(id).orElse(null);\n    }\n\n    @PostMapping(\"/post\")\n    public Account get(@RequestParam(\"id\") long id,\n                       @RequestParam(\"name\") String name,\n                       @RequestParam(\"password\") String password){\n        return repository.save(new Account(id, name, password));\n    }\n}\n```\n\n接着我们来修改一下配置文件：\n\n```yaml\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://app_mysql:3306/study\n    username: root\n    password: 123456.root\n  jpa:\n    database: mysql\n    show-sql: true\n    hibernate:\n      ddl-auto: update   #这里自动执行DDL创建表，全程自动化，尽可能做到开箱即用\n```\n\n现在代码编写完成后，我们可以将项目打包了，注意执行我们下面的打包命令，不要进行测试，因为连不上数据库：\n\n```sh\nmvn package -DskipTests\n```\n\n重新生成jar包后，我们修改一下docker-compose配置，因为MySQL的启动速度比较慢，我们要一点时间等待其启动完成，如果连接不上数据库导致SpringBoot项目启动失败，我们就重启：\n\n```yaml\nspring:   #服务名称，随便起\n  container_name: app_springboot  #一会要创建的容器名称\n  build: .\n  ports:\n  - \"8080:8080\"\n  depends_on:  #这里设置一下依赖，需要等待mysql启动后才运行，但是没啥用，这个并不是等到启动完成后，而是进程建立就停止等待\n  - mysql\n  restart: always  #这里配置容器停止后自动重启\n```\n\n然后我们将之前自动构建的镜像删除，等待重新构建：\n\n![image-20220703215050497](https://s2.loli.net/2022/07/03/frdTCPDGIuqwAWH.png)\n\n现在我们重新部署docker-compos吧：\n\n![image-20220703215133786](https://s2.loli.net/2022/07/03/Tjq8ZYiU4FewKHE.png)\n\n当三个服务全部为蓝色时，就表示已经正常运行了，现在我们来测试一下吧：\n\n![image-20220703215211999](https://s2.loli.net/2022/07/03/3TYABoDZGpK6Rjb.png)\n\n接着我们来试试看向数据库传入数据：\n\n![image-20220703215236719](https://s2.loli.net/2022/07/03/nVEURiAe7qjworl.png)\n\n![image-20220703215245757](https://s2.loli.net/2022/07/03/QKFDdriwJCgPbxW.png)\n\n可以看到响应成功，接着我们来请求一下：\n\n![image-20220703215329690](https://s2.loli.net/2022/07/03/uB6rYDCSbLXmOPE.png)\n\n这样，我们的项目和MySQL基本就是自动部署了。\n\n接着我们来配置一下Redis：\n\n```xml\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n接着配置连接信息：\n\n```yaml\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://app_mysql:3306/study\n    username: root\n    password: 123456.root\n  jpa:\n    database: mysql\n    show-sql: true\n    hibernate:\n      ddl-auto: update\n  redis:\n    host: app_redis\n```\n\n```java\n//再加两个Redis操作进来\n@Resource\nStringRedisTemplate template;\n\n@GetMapping(\"/take\")\npublic String take(@RequestParam(\"key\") String key){\n    return template.opsForValue().get(key);\n}\n\n@PostMapping(\"/put\")\npublic String  put(@RequestParam(\"key\") String key,\n                   @RequestParam(\"value\") String value){\n    template.opsForValue().set(key, value);\n    return \"操作成功！\";\n}\n```\n\n最后我们来配置一下docker-compose的配置文件：\n\n```yaml\nredis:\n  container_name: app_redis\n  image: redis:latest\n  ports:\n  - \"6379:6379\"\n```\n\nOK，按照之前的方式，我们重新再部署一下，然后测试：\n\n![image-20220703220941562](https://s2.loli.net/2022/07/03/2O9ExC4YgrJsjfe.png)\n\n![image-20220703221002195](https://s2.loli.net/2022/07/03/1SRG8EDtx5Oqr2M.png)\n\n这样我们就完成整套环境+应用程序的配置了，我们在部署整个项目时，只需要使用docker-compose配置文件进行启动即可，这样就大大方便了我们的操作，实现开箱即用。甚至我们还可以专门使用一个平台来同时对多个主机进行一次性配置，大规模快速部署，而这些就留到以后的课程中再说吧。\n","categories":["Docker"]},{"title":"Java面向对象(高级)","url":"/2023/01/19/9a52b66178b746debfe7111574e464a2/","content":"\n# Java面向对象(高级)\n\n## 类变量/类方法\n\n[类变量/类方法-博客园](https://www.cnblogs.com/ffforward/p/15244615.html#:~:text=%E3%80%90%E7%B1%BB%E5%8F%98%E9%87%8F%E3%80%91%201%20%E4%BB%8B%E7%BB%8D%20%E7%B1%BB%E5%8F%98%E9%87%8F%EF%BC%88%E5%8F%88%E5%8F%AB%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%EF%BC%89%E6%98%AF%E8%AF%A5%E7%B1%BB%E7%9A%84%E6%89%80%E6%9C%89%E5%AF%B9%E8%B1%A1%E5%85%B1%E4%BA%AB%E7%9A%84%E5%8F%98%E9%87%8F%EF%BC%8C%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E8%AF%A5%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%8E%BB%E8%AE%BF%E9%97%AE%E5%AE%83%E6%97%B6%EF%BC%8C%E5%8F%96%E5%88%B0%E7%9A%84%E9%83%BD%E6%98%AF%E7%9B%B8%E5%90%8C%E7%9A%84%E5%80%BC%EF%BC%8C%E5%90%8C%E6%A0%B7%E4%BB%BB%E4%BD%95%E4%B8%80%E4%B8%AA%E8%AF%A5%E7%B1%BB%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%8E%BB%E4%BF%AE%E6%94%B9%E5%AE%83%E6%97%B6%EF%BC%8C%E4%BF%AE%E6%94%B9%E7%9A%84%E4%B9%9F%E6%98%AF%E5%90%8C%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E3%80%82%20%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8F%98%E9%87%8F%EF%BC%9A%20%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6%20static%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B,%E7%B1%BB%E5%8F%98%E9%87%8F%E7%9A%84%E8%AE%BF%E9%97%AE%20%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%20%E7%B1%BB%E5%90%8D.%E7%B1%BB%E5%8F%98%E9%87%8F%E5%90%8D%20%E6%88%96%E8%80%85%20%E5%AF%B9%E8%B1%A1%E5%90%8D.%E7%B1%BB%E5%8F%98%E9%87%8F%E5%90%8D%20%E6%9D%A5%E8%AE%BF%E9%97%AE%EF%BC%8C%E4%BD%86Java%E8%AE%BE%E8%AE%A1%E8%80%85%E6%8E%A8%E8%8D%90%E6%88%91%E4%BB%AC%E4%BD%BF%E7%94%A8%20%E7%B1%BB%E5%90%8D.%E7%B1%BB%E5%8F%98%E9%87%8F%E5%90%8D%20%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%AE%BF%E9%97%AE%E3%80%82)\n![](https://static.meowrain.cn/i/2022/12/13/a87en5-3.png)\n\n### 类变量快速入门\n\n#### 介绍\n\n类变量（又叫静态变量）是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的都是相同的值，同样任何一个该类的对象去修改它时，修改的也是同一个变量。\n\n> `定义类变量：访问修饰符 static 数据类型 变量名; `\n> **静态变量是类加载的时候，就创建了,所以我们没有创建对象实例**\n> 定义一个变量 count ,是一个类变量(静态变量) static 静态\n> 该变量最大的特点就是会被Child 类的所有的对象实例共享\n\n```java\npackage cn.meowrain.classVariable;\n\npublic class var01 {\n    public static void main(String[] args) {\n        Child child01 = new Child(\"mike\");\n        Child child02 = new Child(\"john\");\n        child01.count++;\n        child02.count++;\n        System.out.println(\"共有\" + Child.count + \"个小朋友参加了游戏\");\n    }\n}\nclass Child {\n    private String name;\n    public static int count = 0;\n    public Child(String name){\n        this.name = name;\n    }\n    public void join() {\n        System.out.println(\"小朋友\" + name + \"加入了游戏....\");\n    }\n}\n```\n\n> 输出: 共有2个小朋友参加了游戏\n\n#### 访问类变量\n\n> 可以通过 `类名.类变量名` 或者 `对象名.类变量名` 来访问，但Java设计者推荐我们使用 类名.类变量名 的方式来访问。\n\n```java\npackage cn.meowrain.classVariable;\n\npublic class var01 {\n    public static void main(String[] args) {\n        Child child01 = new Child(\"mike\");\n        Child child02 = new Child(\"john\");\n        child01.join();\n        child02.join();\n        System.out.println(\"共有\" + Child.count + \"个小朋友参加了游戏\"); \n        //通过 对象名.类变量名 来访问\n    }\n}\nclass Child {\n    private String name;\n    public static int count = 0;\n    public Child(String name){\n        this.name = name;\n    }\n    public void join() {\n        System.out.println(\"小朋友\" + name + \"加入了游戏....\");\n        count++;\n    }\n}\n```\n\n### 类方法\n\n#### 介绍\n\n类变量也叫静态变量。\n`定义格式如下：访问修饰符 static 数据返回类型 方法名(){}`\n\n#### 类方法经典使用场景\n\n（1）当方法中不涉及到任何和对象相关的成员，则可以将方法设计成静态方法，提高开发效率。\n（2）比如工具类中的方法 utils\nMath类、Arrays类、Collections集合类\n（3）在实际开发中，往往将一些通用的方法，设计成静态方法，这样我们不需要创建对象就可以使用，比如打印一维数组，冒泡排序等等\n\n#### 类方法和普通方法的区别\n\n1.  类方法中不允许使用和对象有关的关键字，\n2.  比如this 和super。普通方法(成员方法)可以。\n3.  类方法中，只能访问 静态变量 或 静态方法；而普通方法既可以访问普通变量（方法），也可以访问静态的。\n\n#### 类方法可以重写吗？\n\n1.  可以被继承，但是不能被重写，如果父子类静态方法名相同，则会隐藏derive类方法（调用base类的方法）\n2.  静态方法是编译时绑定的，方法重写是运行时绑定的。\n    <https://blog.csdn.net/m0_37974032/article/details/81157433>\n\n类方法的使用：\n使用：\n如下：\n\n```java\npackage cn.meowrain.classVariable;\n\npublic class var02 {\n}\n\nclass Caculate {\n    public static void main(String[] args) {\n        int sum01 = sum(1, 2);\n        int sum02 = sum(5, 10, 20);\n        System.out.println(sum01 + \" \" + sum02);//3 35\n    }\n\n    public static int sum(int a, int b) {\n        return a + b;\n    }\n\n    public static int sum(int a, int b, int c) {\n        return a + b + c;\n    }\n}\n```\n\n## 理解main方法\n\n直接看下面这个文章就行了，写得很不错\n<https://www.cnblogs.com/ffforward/p/15253293.html>\n\n## Java代码块\n\n#### 基本介绍\n\n代码块又称为初始化块，属于类中的成员，类似于方法，把逻辑语句封装在方法体中，通过{}包围起来\n**其在创建对象时隐式调用**\n\n#### 基本语法\n\n<pre style=\"color: blue\">\n<code>\n[修饰符]{\n    代码\n}\n</code>\n</pre>\n\n说明：\n(1) 修饰符可选，要写的话，也只能写static\n\n(2) 代码块分为两类，使用static修饰的叫**静态代码块**，没有static修饰的，叫**普通代码块**\n\n(3) 逻辑语句可以为任何逻辑语句（输入、输出、方法调用、循环、判断等\n\n(4) 分号；可以写上，也可以省略\n\n#### 代码块的好处\n\n（1）相当于另外一种形式的构造器（对构造器的补充机制），可以做初始化的操作。\n\n（2）如果多个构造器中都有重复的语句，可以抽取到初始化块中，提高代码的复用性\n\n**实际使用：**\n\n如下，我们的三个构造器中都含有`System.out.println(\"Welcome to Code World!\");`，这使得代码很冗杂，使用代码块，就能让这个代码更好看一些，代码块会在每次类创建时调用\n\n```java\npackage cn.meowrain.codeBlock;\n\npublic class code01 {\n    public static void main(String[] args) {\n        code01_child child01 = new code01_child(\"mike\");\n        code01_child child02 = new code01_child(\"meme\", 15);\n        code01_child child03 = new code01_child(\"meow\", 18, \"bear\");\n    }\n}\n\nclass code01_child {\n    String name;\n    int age;\n    String love;\n    public code01_child(String name) {\n        this.name = name;\n        System.out.println(\"Welcome to Code World!\");\n        System.out.println(\"hello \" + name);\n    }\n    public code01_child(String name, int age) {\n        this.name = name;\n        this.age = age;\n        System.out.println(\"Welcome to Code World!\");\n        System.out.println(\"hello \" + name);\n    }\n    public code01_child(String name,int age,String love) {\n        this.name = name;\n        this.love = love;\n        this.age = age;\n        System.out.println(\"Welcome to Code World!\");\n        System.out.println(\"hello \" + name);\n    }\n    \n}\n```\n\n·············修改版···················\n\n```java\npackage cn.meowrain.codeBlock;\n\npublic class code01 {\n    public static void main(String[] args) {\n        code01_child child01 = new code01_child(\"mike\");\n        code01_child child02 = new code01_child(\"meme\", 15);\n        code01_child child03 = new code01_child(\"meow\", 18, \"bear\");\n    }\n}\n\nclass code01_child {\n    String name;\n    int age;\n    String love;\n    {\n        System.out.println(\"Welcome to Code World!\");\n    }\n    public code01_child(String name) {\n        this.name = name;\n\n        System.out.println(\"hello \" + name);\n    }\n    public code01_child(String name, int age) {\n        this.name = name;\n        this.age = age;\n\n        System.out.println(\"hello \" + name);\n    }\n    public code01_child(String name,int age,String love) {\n        this.name = name;\n        this.love = love;\n        this.age = age;\n\n        System.out.println(\"hello \" + name);\n    }\n    \n}\n```\n\n输出结果：\n\n```bash\nWelcome to Code World!\nhello mike\nWelcome to Code World!\nhello meme\nWelcome to Code World!\nhello meow\n```\n\n#### static 代码块\n\nstatic代码块也叫静态代码块，作用就是对类进行初始化，而且它随着类的加载而执行，并且只会执行一次。\n\n实际使用：\n\n```java\npackage cn.meowrain.codeBlock;\n\npublic class code01 {\n    public static void main(String[] args) {\n        code01_child child01 = new code01_child(\"mike\");\n        code01_child child02 = new code01_child(\"meme\", 15);\n        code01_child child03 = new code01_child(\"meow\", 18, \"bear\");\n    }\n}\n\nclass code01_child {\n    String name;\n    int age;\n    String love;\n    static{\n        System.out.println(\"Welcome to Code World!\");\n    }\n    public code01_child(String name) {\n        this.name = name;\n\n        System.out.println(\"hello \" + name);\n    }\n    public code01_child(String name, int age) {\n        this.name = name;\n        this.age = age;\n\n        System.out.println(\"hello \" + name);\n    }\n    public code01_child(String name,int age,String love) {\n        this.name = name;\n        this.love = love;\n        this.age = age;\n\n        System.out.println(\"hello \" + name);\n    }\n    \n}\n```\n\n输出结果：\n\n> 因为静态代码块只执行一次，所以只输出一次 `Welcome to Code World!`\n\n```bash\nWelcome to Code World!\nhello mike\nhello meme\nhello meow\n```\n\n### 代码块使用注意事项\n\n1.  static代码块也叫静态代码块，作用就是对类进行初始化，而且它随着**类的加载而执行，只会执行一次**。如果是普通代码块，每创建一个对象，就执行一次。可以看上面的代码和运行结果\n2.  类什么时候被加载？\n    1.  创建对象实例 new 的时候\n    2.  创建子类对象实例，父类也会被加载\n    3.  使用类的静态成员时（静态属性，静态方法）\n        ```java\n        package cn.meowrain.codeBlock;\n\n        public class code02 {\n            public static void main(String[] args) {\n                int c = A.sum(109, 10);\n            }\n        }\n\n        class A {\n            static{\n                System.out.println(\"hello\");\n            }\n            public static int sum(int a,int b){\n                return a+b;\n            }\n        }\n        class B extends A{\n\n        }\n        ```\n        > 运行结果： hello\n        > 由上可见,静态代码块会在类加载的时候执行\n3.  普通的代码块，在创建对象实例（new的时候），会被隐式调用，如果只是单纯使用类中的静态变量，普通代码块不会被执行\n    ```java\n    package cn.meowrain.codeBlock;\n\n    public class code02 {\n        public static void main(String[] args) {\n            int c = A.sum(109, 10);\n            \n        }\n    }\n\n    class A {\n        {\n            System.out.println(\"hello\");\n        }\n        static int a = 10;\n        public static int sum(int a, int b) {\n            return a + b;\n        }\n\n    }\n\n    class B extends A {\n\n    }\n    ```\n    输出结果： 无\n4.  创建一个对象的时候，在一个类的调用顺序是:\n    *   调用静态代码块和静态属性初始化，按照顺序调用\n    *   调用普通代码块和普通属性的初始化，按照顺序调用\n    *   调用构造方法\n    ```java\n    package cn.meowrain.codeBlock;\n\n    public class code03 {\n        public static void main(String[] args) {\n            AB ab = new AB();\n            \n        }\n    }\n    class AB {\n        static {\n            System.out.println(\"静态代码块初始化\");\n        }\n        static int a = getN1();\n        public static int getN1(){\n            System.out.println(\"静态方法getN1初始化\");\n            return 100;\n        }\n        int c = getN2();\n        public int getN2() {\n            System.out.println(\"普通方法getN2初始化\");\n            return 200;\n        }\n        public AB(){\n            System.out.println(\"构造器被调用\");\n        }\n    }\n    ```\n\n> 运行结果如下\n> 静态代码块初始化\n> 静态方法getN1初始化\n> 普通方法getN2初始化\n> 构造器被调用\n\n## 单例设计模式\n\n参考<https://www.cnblogs.com/ffforward/p/15259948.html>\n\n### 介绍：\n\n单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法\n\n> 单例模式有两种：\n>\n> 1.  饿汉式\n> 2.  懒汉式\n\n### 实现方式\n\n*   构造器私有化\n*   类的内部创建对象\n*   向外暴露一个静态的公共方法\n\n### 饿汉式\n\n> 类加载的时候实例化，并且创建单例对象\n>\n> 1.  构造器私有化\n> 2.  在类的内部直接创建对象，该对象为static\n> 3.  提供一个公共的static方法，返回这个对象\n\n```java\npackage cn.meowrain.singlecasemode;\nclass test {\n    public static void main(String[] args) {\n        Hungry hungry = Hungry.getInstance();\n        System.out.println(hungry.name);\n\n    }\n}\npublic class Hungry {\n    public String name;\n    private Hungry(String name){\n        this.name = name;\n    } //构造器私有化\n    private static Hungry hungry = new Hungry(\"hello\");\n    public static Hungry getInstance(){\n        return hungry;\n    }\n}\n\n```\n\n### 懒汉式\n\n> 懒汉式： 默认不会实例化，什么时候用什么时候new\n>\n> 1.  构造器私有化\n> 2.  定义一个static静态属性对象\n> 3.  提供一个public的static方法，可以返回一个该类对象\n> 4.  懒汉式，只有当用户使用getInstance时，才返回对象，后面再次调用时，会返回上次创建的该类对象，从而保证单例\n\n```java\npackage cn.meowrain.singlecasemode;\nclass test02 {\n    public static void main(String[] args) {\n        Lazy lazy = Lazy.getInstanceOf();\n        System.out.println(lazy.name);\n    }\n}\npublic class Lazy {\n    public String name;\n    private Lazy(String name){\n        this.name = name;\n    }\n    private static Lazy lazy = null;\n    public static Lazy getInstanceOf(){\n        if(lazy==null){\n            lazy = new Lazy(\"mmm\");\n        }\n        return lazy;\n    }\n\n}\n```\n\n### 饿汉式和懒汉式的区别\n\n（1）二者最主要的区别在于创建对象的时机不同：\n饿汉式是在类加载时就创建了对象实例，\n而懒汉式是在使用时才创建。\n\n（2）饿汉式不存在线程安全问题，懒汉式存在线程安全问题。\n\n（3）饿汉式存在浪费资源的可能（没有使用到这个对象实例），而懒汉式不存在这个问题。\n\n（4）在javaSE标准类中，java.lang.Runtime就是经典的单例模式。\n\n## final关键字\n\n### 基本介绍：\n\nfinal可以修饰类，属性，方法和局部变量\n使用环境：\n\n<pre style=\"color:red\">\n<code>\n1. 当不希望类被继承时，可以用final修饰\n2. 当不希望父类的某个方法被子类覆盖/重写时，可以用final关键字修饰\n3. 当不希望类的某个属性的值被修改，可用final修饰\n4. 当不希望某个局部变量被修改，可以用final修饰\n</code>\n</pre>\n\n### final使用注意事项\n\n> 1.  final修饰的属性又叫常量\n> 2.  final修饰的属性在定义的时候，必须赋初值，并且以后不能再修改\n> 3.  如果final修饰的属性是静态的，则初始化的位置只能是 1.定义时 2.在静态代码块中可以赋值，不能在构造器中赋值\n> 4.  final类不能继承，但是可以实例化对象\n> 5.  如果类不是final类，但是有final方法，则该方法虽然不能重写，但可以被继承\n>     6.final和static往往搭配使用，效率更高，不会导致类加载，底层编译器做了优化处理\n> 6.  包装类(**Integer,Double,Float,Boolean等都是final**)，**String**也是final类\n\n## 抽象类\n","tags":["java"],"categories":["Java","JAVASE"]},{"title":"Java面向对象基础（中级）","url":"/2023/01/19/274b1dfaf07945e7ab77710afad502a3/","content":"\n# Java面向对象基础（中级）\n\nConsolas, 'Courier New', monospace\n\n## 包\n\n### 包的三大作用\n\n1.区分相同名字的类\n\n2.当类很多的时候，可以很好地管理类\n\n3.控制访问范围\n\n### 包的基本语法\n\n```java\n1.package 关键字\n2. com.xxxx 表示包名\n```\n\n### 包的本质分析\n\n> 包的本质就是创建不同的文件夹和目录来保存类文件\n\n### 包的命名\n\n> 只能包含数字，下划线，小圆点，但不能用数字开头，也不能是关键字和保留字\n\n命名规范：\n\n`com.xxxx.usr` 用户模块\n\n`com.xxxx.utils` 工具模块\n\n域名反着写，最后加上模块名\n\n### 常用的包\n\n![image-20221209184119352](https://static.meowrain.cn/i/2022/12/10/3zkt3u-3.png)\n\n### 引入包\n\n语法：`import 包名.类名`\n\n案例：\n\n```java\npackage cn.meowrain.Object_.package_;\n\nimport java.util.Scanner;\n\npublic class package_01 {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        System.out.println(a);\n    }\n}\n```\n\n## 访问修饰符\n\n![image-20221209194630958](https://static.meowrain.cn/i/2022/12/10/5q5tda-3.png)\n\n![image-20221209194636928](https://static.meowrain.cn/i/2022/12/10/5q78mr-3.png)\n\n![image-20221209194754093](https://static.meowrain.cn/i/2022/12/10/5qw5s4-3.png)\n\n## 封装\n\n### 封装介绍\n\n封装就是把抽象出的数据\\[属性]和对数据的操作\\*\\*\\[方法]**封装在一起，数据被保护在内部，程序的其它部分只有通过被授权的操作**\\[方法]\\*\\*，才能对数据进行操作\n\n### 封装的理解和好处\n\n1.  隐藏实现细节\n2.  可以对数据进行验证，保证安全合理\n\n## 封装实现的步骤\n\n*   将属性进行私有化（不能直接修改属性）\n*   提供一个公共的(public)set方法，用于对属性判断并赋值\n\n    *   ```java\n        public void setXXX(类型 参数名) {\n        // XXX表示某个属性\n            //加入数据验证的业务逻辑\n            属性 = 参数名;\n        }\n        ```\n*   提供一个公共的(public)get方法，用于获取属性的值\n\n    *   ```java\n        public 数据类型 getXXX(){\n            //权限判断，xxx某个属性\n            return xxx;\n        }\n        ```\n\n### 快速入门案例\n\n![image-20221118101742062](https://static.meowrain.cn/i/2022/11/18/u1yi7u-3.png)\n\n```java\npackage cn.meowrain.Encap_;\n\npublic class encap_01 {\n\n    public static void main(String[] args) {\n        Person person = new Person();\n        person.setName(\"meowrainyyds\");\n        person.setAge(-1);\n    }\n}\nclass Person\n{\n    public String name;\n    private int age;\n    private double salary;\n    private String job;\n    public void setName(String name) {\n        if(name.length()>=6||name.length()<=2){\n            System.out.println(\"名字的长度错误，长度需要在2-6之间\");\n\n        }else {\n            this.name = name;\n        }\n    }\n    public void setAge(int age) {\n        if(age<=1||age>=120){\n            System.out.println(\"输入年龄错误(1-120)\");\n        }else {\n            this.age = age;\n        }\n\n    }\n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n    public void setJob(String job) {\n        this.job = job;\n    }\n    public String getName() {\n        return name;\n    }\n    public int getAge() {\n        return age;\n    }\n    public double getSalary() {\n        return salary;\n    }\n    public String getJob() {\n        return job;\n    }\n    public void getInfo() {\n        System.out.println(name + \" \" + \"is\" + age + \"years old\");\n    }\n  \n}\n```\n\n![image-20221209200402253](https://static.meowrain.cn/i/2022/12/10/6oa8gj-3.png)\n\n### 把构造器和封装结合\n\n在构造器中添加\n\n```java\n        setName(name);\n        setAge(age);\n```\n\n即可实现构造的时候调用这两个函数，从而判断输入的数据是否符合要求，然后使用这两个函数进行赋值\n\n```java\npackage cn.meowrain.Encap_;\n\npublic class encap_01 {\n\n    public static void main(String[] args) {\n        Person person = new Person(\"meowrainyyds\", -1);\n        person.getInfo();\n    }\n}\n\nclass Person {\n    public String name;\n    private int age;\n    private double salary;\n    private String job;\n\n    public Person(String name, int age) {\n        setName(name);\n        setAge(age);\n    }\n\n    public void setName(String name) {\n        if (name.length() >= 6 || name.length() <= 2) {\n            System.out.println(\"名字的长度错误，长度需要在2-6之间\");\n\n        } else {\n            this.name = name;\n        }\n    }\n\n    public void setAge(int age) {\n        if (age <= 1 || age >= 120) {\n            System.out.println(\"输入年龄错误(1-120)\");\n        } else {\n            this.age = age;\n        }\n\n    }\n\n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n\n    public void setJob(String job) {\n        this.job = job;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public String getJob() {\n        return job;\n    }\n\n    public void getInfo() {\n        System.out.println(name + \" \" + \"is\" + age + \"years old\");\n    }\n\n}\n```\n\n### 课堂练习\n\n![image-20221118113154656](https://static.meowrain.cn/i/2022/11/18/vxwxwt-3.png)\n\n```java\npackage cn.meowrain.Encap_;\n\npublic class encap_02 {\n\n}\n\nclass Account {\n    String name;\n    int balance;\n\n    public Account(String name, int balance) {\n        setName(name);\n        setBalance(balance);\n    }\n\n    public void setName(String name) {\n        if (name.length() >= 2 && name.length() <= 4) {\n            this.name = name;\n        }else{\n            System.out.println(\"名字长度在2-4位之间，你输入的名字不合法\");\n        }\n    }\n\n    public void setBalance(int balance) {\n        if(balance>20){\n            this.balance = balance;\n        }else {\n            System.out.println(\"余额必须大于20\");\n        }\n    }\npublic void getInfo(){\n    System.out.println(name + \" \" + balance);\n}\n}\n\nclass AccountTest {\n    public static void main(String[] args) {\n    Account account = new Account(\"meowrain\", 24);\n    account.getInfo();\n    }\n}\n```\n\n## 继承\n\n### 为什么需要继承\n\n![](https://static.meowrain.cn/i/2022/12/10/8eozay-3.png)\n\n### 继承的基本介绍和示意图\n\n![](https://static.meowrain.cn/i/2022/12/10/8f3jcg-3.png)\n\n### 继承的基本语法\n\n```java\nclass 子类 extends 父类{\n\n}\n```\n\n> 1.子类就会自动拥有父类定义的属性和方法\n> 2.父类又叫超类和基类\n> 3.子类又叫做派生类\n\n### 快速入门案例\n\n```java\npackage cn.meowrain.extends_;\n\npublic class extends_01 {\n    public static void main(String[] args) {\n        Student student = new Student(\"mike\", 17, 100);\n        student.eat(); //mike is eating\n    }\n}\nclass Human {\n    String name;\n    int age;\n    public Human(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    //下面这个eat方法是共有的方法\n    public void eat(){\n        System.out.println(name + \" is \" + \"eating\");\n    }\n}\nclass Student extends Human {\n    //Student继承了父类Human的所有属性\n    double grades;\n    public Student(String name, int age, double grades) {\n        super(name, age);//构造器要使用super\n        this.grades = grades;\n    }\n}\n```\n\n### 继承给编程带来的便利\n\n1.  复用性增强\n2.  代码的扩展性和维护性提高\n\n### 细节问题\n\n1.  子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问，要通过父类提供公共的方法去访问\n2.  子类必须调用父类的构造器，完成父类的初始化\n3.  当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用`super`去指定使用父类的哪个构造器完成对父类的初始化工作，否则编译不会通过\n4.  如果希望指定去调用父类的某个构造器，则显式地调用一下：`super(参数列表)`\n5.  `super`在使用时，必须放在构造器第一行（**super**只能在构造器中使用）\n6.  `super()`和`this()`都只能放在构造器的第一行，因此这两个方法不能共存在一个构造器\n\n> super（参数）：调用父类中的某一个构造函数（应该为构造函数中的第一条语句）。\n> this（参数）：调用本类中另一种形式的构造函数（应该为构造函数中的第一条语句）。\n\n7.  java所有类都是 **Object类**的子类，**Object类**是所有类的基类\n8.  父类构造器的调用不限于直接父类，将一直往上追溯直到 **Object**类\n9.  子类最多只能继承一个父类\n10. 不能滥用继承，子类和父类之间必须满足`is-a`的逻辑关系\n\n***\n\n```java\npackage cn.meowrain.extends_;\n\npublic class extends_02 {\n\n}\n\nclass Base {\n    int n1;\n    int n2;\n    String name;\n\n    public Base() {\n    }// 无参构造器\n\n    public Base(int n1) {\n        this.n1 = n1;\n    }\n\n    public Base(int n1, int n2) {\n        this.n1 = n1;\n        this.n2 = n2;\n    }\n\n    public Base(int n1, int n2, String name) {\n        this(n1, n2);\n        /*\n         * 这个this(n1,n2);\n         * 相当于调用上面的\n            this.n1 = n1;\n            this.n2 = n2;\n        */\n        this.name = name;\n    }\n}\n\nclass kids extends Base {\n    int age;\n    public kids(int n1,int n2,int age){\n        super(n1,n2);\n        /*  super(n1,n2);\n         * 相当于 \n         *        this.n1 = n1;\n                  this.n2 = n2;\n         */\n        this.age = age;\n    }\n}\nclass adult extends Base {\n    public adult(int n1,int n2,String name){\n        super(n1,n2,name);\n    }\n}\nclass little_kids extends kids {\n    String love;\n    public little_kids(int n1,int n2,int age,String love){\n        super(n1,n2,age);\n        this.love = love;\n    }\n}\n```\n\n### 继承的本质分析\n\n> 看下面这些代码\n\n```java\npackage com.hspedu.extend_;\n\n/**\n * 讲解继承的本质\n */\npublic class ExtendsTheory {\n    public static void main(String[] args) {\n        Son son = new Son();// 内存的布局\n        // ?-> 这时请大家注意，要按照查找关系来返回信息\n        // (1) 首先看子类是否有该属性\n        // (2) 如果子类有这个属性，并且可以访问，则返回信息\n        // (3) 如果子类没有这个属性，就看父类有没有这个属性(如果父类有该属性，并且可以访问，就返回信息..)\n        // (4) 如果父类没有就按照(3)的规则，继续找上级父类，直到 Object...\n        // System.out.println(son.name);//返回就是大头儿子\n        // System.out.println(son.age);//返回的就是 39\n        // System.out.println(son.getAge());//返回的就是 39\n        System.out.println(son.hobby);// 返回的就是旅游\n    }\n}\n\nclass GrandPa { // 爷类\n    String name = \"大头爷爷\";\n    String hobby = \"旅游\";\n}\n\nclass Father extends GrandPa {// 父类\n    String name = \"大头爸爸\";\n    private int age = 39;\n\n    public int getAge() {\n        return age;\n    }\n}\n\nclass Son extends Father { // 子类\n    String name = \"大头儿子\";\n}\n```\n\n> **子类创建的内存布局**\n> ![](https://static.meowrain.cn/i/2022/12/10/aes0io-3.png)\n\n### 练习\n\n![](https://static.meowrain.cn/i/2022/12/10/ajhkeh-3.png)\n\n> 会输出\n> a\n> b name\n> b\n\n**分析：B类无参构造器中，其实第一句是隐藏的`super()`，所以会先执行A类的无参构造器，输出a，然后执行`this(\"abc\")`，调用B类本类下的有参构造器，输出`b name`，接着执行`System.out.println(\"b\")`，输出b**\n\n***\n\n> 编写 Computer 类，包含 CPU、内存、硬盘等属性，getDetails 方法用于返回 Computer 的详细信息\n> 编写 PC 子类，继承 Computer 类，添加特有属性【品牌 brand】\n> 编写 NotePad 子类，继承 Computer 类，添加特有属性【color】\n> 编写 Test 类，在 main 方法中创建 PC 和 NotePad 对象，分别给对象中特有的属性赋值，以及从 Computer 类继承的属性赋值，并使用方法并打印输出信息\n\n```java\npackage cn.meowrain.extends_;\n\nclass Test {\n    public static void main(String[] args) {\n        PC pc = new PC(\"i5\", 16, 512, \"Lenovo\");\n        Notepad notepad = new Notepad(\"j1900\", 8, 64, \"white\");\n        pc.getDetails();\n        notepad.getDetails();\n    }\n}\n\npublic class Computer {\n    String brand;\n    String cpu;\n    int memory;\n    int disk_size;\n\n    public Computer(String cpu, int memory, int disk_size) {\n        this.cpu = cpu;\n        this.memory = memory;\n        this.disk_size = disk_size;\n    }\n\n    public void getDetails() {\n        System.out.println(\"the computer's\" + \" \" + \"cpu is \" + cpu + \" \" + \"the memory size is \" + memory + \" \" + \"the disk size is\" + \" \" + disk_size);\n    }\n}\n\nclass PC extends Computer {\n    String brand;\n\n    public PC(String cpu, int memory, int disk_size, String brand) {\n        super(cpu, memory, disk_size);\n        this.brand = brand;\n    }\n\n    public void getDetails() {\n        System.out.println(\"the computer's brand is\" + brand + \" \" + \"cpu is \" + cpu + \" \" + \"the memory size is \" + memory + \" \" + \"the disk size is\" + \" \" + disk_size);\n    }\n}\n\nclass Notepad extends Computer {\n    String color;\n\n    public Notepad(String cpu, int memory, int disk_size, String color) {\n        super(cpu, memory, disk_size);\n        this.color = color;\n    }\n\n    public void getDetails() {\n        System.out.println(\"the computer's color is\" + color + \" \" + \"cpu is \" + cpu + \" \" + \"the memory size is \" + memory + \" \" + \"the disk size is\" + \" \" + disk_size);\n    }\n}\n```\n\n## super关键字\n\n### 基本介绍\n\n> `super`代表父类的引用，用于**访问父类的属性，方法和构造器**\n\n### 基本语法\n\n1.  访问父类的属性，但是不能访问父类的 **private**属性\n    使用：`super.属性名`\n2.  访问父类的方法，不能访问父类的private方法\n    使用：`super.方法名(参数列表)`\n3.  访问父类的构造器\n    使用：`super(参数列表)`\n    只能放在构造器的第一句，只能出现一句\n\n案例：\n\n```java\npackage cn.meowrain.extends_;\n\npublic class super_ {\n    public static void main(String[] args) {\n        Child_01 child = new Child_01();\n        child.getRes();\n    }\n}\nclass Base_01 {\n    public String name = \"mike\";\n    private int age = 8;\n    public int getSum(int a,int b) {\n        return a+b;\n    }\n}\nclass Child_01 extends Base_01 {\n    public String name = super.name;//把父类的name属性的值赋值给自雷的name属性\n    // public int age = super.age; 报错\n    public void getRes(){\n        System.out.println(super.getSum(19, 20));//调用并且输出父类中getSum方法的返回值\n    }\n}\n```\n\n### super给编程带来的便利\n\n![](https://static.meowrain.cn/i/2022/12/11/5vpim6-3.png)\n\n### super和this的比较\n\n![](https://static.meowrain.cn/i/2022/12/11/5w5d9r-3.png)\n\n## 方法重写（Override）\n\n### 基本介绍\n\n方法重写就是子类有一个方法，和父类的某个方法的名称，返回类型，参数一样，那么我们就说子类的这个方法覆盖了父类的方法\n\n### 快速入门\n\n```java\npackage cn.meowrain.extends_;\n\npublic class override_ {\n    public static void main(String[] args) {\n        Child_02 child_02 = new Child_02();\n        child_02.getInfo();\n    }\n}\n\nclass Base_02 {\n    public void getInfo() {\n        System.out.println(\"hello my friends\");\n    }\n}\n\nclass Child_02 extends Base_02 {\n    @Override\n    public void getInfo() {\n        System.out.println(\"hello my good friends\");\n    }\n}\n```\n\n### 注意项\n\n> 子类方法不能缩小父类方法的访问权限\n> 子类方法的形参列表，方法名称，要和父类方法的形参列表，方法名称完全一样\n> 子类方法的返回类型和父类方法的返回类型要一样，或者是父类返回类型的子类，比如：`父类返回类型是Object，子类方法返回的类型是String`\n\n### 方法重写和重载的区别\n\n重载是 <https://meowrain.cn/archives/java-mian-xiang-dui-xiang-ji-chu--chu-ji->\n中的内容，回顾清看上面链接的内容\n![](https://static.meowrain.cn/i/2022/12/11/6szuyj-3.png)\n\n## 多态\n\n### 基本介绍\n\n方法或对象具有多种形态，是面向对象的第三大特征，多态是建立在封装和继承基础上的\n![](https://static.meowrain.cn/i/2022/12/11/779d3z-3.png)\n\n### 多态存在的三个必要条件\n\n*   继承\n*   重写\n*   父类引用指向子类对象：`Parent p = new Child();`\n\n### 多态的具体体现\n\n#### 方法的多态\n\n![](https://static.meowrain.cn/i/2022/12/11/7a5tpq-3.png)\n上图代码实现：\nShap.java\n\n```java\npackage cn.meowrain.Poly;\n\npublic class Shape {\n    public void draw(){\n        System.out.println(\"画图形\");\n    }\n}\n\n```\n\nCircle.java\n\n```java\npackage cn.meowrain.Poly;\n\npublic class Circle extends Shape{\n    public void draw(){\n        System.out.println(\"画圆形\");\n    }\n}\n\n```\n\nSquare.java\n\n```java\npackage cn.meowrain.Poly;\n\npublic class Square extends Shape{\n    public void draw(){\n        System.out.println(\"画方形\");\n    }\n}\n\n```\n\nTriangle.java\n\n```java\npackage cn.meowrain.Poly;\n\npublic class Triangle extends Shape{\n    public void draw(){\n        System.out.println(\"画三角形\");\n    }\n}\n\n```\n\nRunner.java\n\n```java\npackage cn.meowrain.Poly;\n\npublic class Runner {\n    public static void main(String[] args) {\n        Shape circle = new Circle();\n        circle.draw();\n        Shape triangle = new Triangle();\n        triangle.draw();\n        Shape square = new Square();\n        square.draw();    \n    }\n}\n\n\n```\n\n> 注意：\n> 1.一个对象的编译类型和运行类型可以不一致\n> 2.编译类型在定义对象时就确定了，不能改变\n> 3.运行类型是可以变化的\n> 4.编译类型看定义时候=号的左边，运行类型看=号的右边\n\n***\n\n### 多态注意事项和细节讨论\n\n> 多态的前提是： 两个对象（类）存在继承关系\n\n#### 多态的向上转型\n\n1.  本质：父类的引用指向了子类的对象\n2.  语法：==父类类型 引用名 = new 子类类型();==\n3.  特点：**编译类型看左边，运行类型看右边**\n    可以调用父类中的所有成员（需遵守访问权限）\n    不能调用子类中的特有成员-->只能调用子类和父类共有的成员\n    最终运行效果看子类的具体实现\n\n#### 多态的向下转型\n\n1.  语法： ==子类类型 引用名 = (子类类型)父类引用;==\n2.  只能强制转父类的引用，不能强转父类的对象\n3.  要求父类的引用必须指向的是当前目标类型的对象\n4.  当向下转型后，可以调用子类类型中所有成员\n\n案例演示:\n**Animal.java**\n\n```java\npackage cn.meowrain.Poly.poly02;\n\npublic class Animal {\n    String name = \"动物\";\n    int age = 10;\n    public void sleeper() {\n        System.out.println(\"睡\");\n    }\n    public void run() {\n        System.out.println(\"跑\");\n    }\n    public void eat(){\n        System.out.println(\"吃\");\n    }\n    public void show() {\n        System.out.println(\"hello 你好\");\n    }\n}\n```\n\n**Cat.java**\n\n```java\npackage cn.meowrain.Poly.poly02;\n\npublic class Cat extends Animal{\n    public void eat(){ //方法重写\n        System.out.println(\"猫吃鱼\");\n    }\n    public void catchMouse() {//cat特有方法\n        System.out.println(\"猫抓老鼠\");\n    }\n    \n}\n```\n\n**PolyDetail.java**\n\n```java\npackage cn.meowrain.Poly.poly02;\n\npublic class PolyDetail {\n    public static void main(String[] args) {\n        //向上转型,父类的引用指向了子类的对象\n        Animal animal = new Cat();\n        //animal.catchMouse() 错误,只能调用共同的属性\n        //因为在编译阶段,能调用哪些成员,是由编译类型决定的\n        //最终运行效果看运行类型的具体实现\n        animal.eat();\n        animal.run();\n        animal.show();\n        animal.sleeper();\n        //如果想调用Cat的catchMouse方法\n        //多态的向下转型\n        //子类类型 引用名 = (子类类型)父类引用\n        Cat cat = (Cat)animal;\n        cat.catchMouse();\n    }\n}\n```\n\n***\n\n> 注意: 属性没有重写只说!\n> 属性的值看编译类型,也就是左侧\n> 看下面的代码:\n\n```java\npackage cn.meowrain.Poly.poly03;\n\npublic class item {\n\n    public static void main(String[] args) {\n        Base base = new Sub();\n        //属性的值看编译类型\n        System.out.println(base.count);//120\n    }\n}\nclass Base {//父类\n    int count = 120;\n}\nclass Sub extends Base { //子类\n    int count = 234;\n}\n```\n\n#### instanceOf比较操作符\n\n> 介绍: **instanceOf**比较操作符,用于判断对象的运行类型是否为XX类型的子类型\n> 举个例子:\n\n```java\npackage cn.meowrain.Poly.poly03;\n\npublic class PolyDetail03 {\n    public static void main(String[] args) {\n        BB bb = new BB(); //运行类型是BB\n        System.out.println(bb instanceof BB); //true\n        System.out.println(bb instanceof AA); //true\n        //向上转型\n        //AA是编译类型,BB是运行类型\n        AA aa = new BB();//运行类型是BB\n        System.out.println(aa instanceof AA); //true\n        System.out.println(aa instanceof BB);// true\n        //向下转型\n        BB ab = (BB)aa;//运行类型是BB\n        System.out.println(ab instanceof AA); //true\n        System.out.println(ab instanceof BB); //true\n        AA am = new AA(); //运行类型是AA\n        System.out.println(am instanceof AA);// true\n        System.out.println(am instanceof BB); //false\n    }\n}\nclass AA {\n}\nclass BB extends AA {\n\n}\n\n```\n\n## java的动态绑定\n\n> 1.  当调用对象方法的的时候，该方法回和该都西昂的内存地址/运行类型绑定\n> 2.  当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用\n\n#### 在向上转型情况下的动态绑定示例\n\n父类方法，对象类型：class cn.meowrain.bind.Son\n\n```java\npackage cn.meowrain.bind;\n\npublic class bind01 {\n    public static void main(String[] args) {\n        Father sample = new Son();//向上转型\n        sample.method();\n    }\n}\n\nclass Father {\n    public void method(){\n        System.out.println(\"父类方法，对象类型：\" + this.getClass());\n    }\n}\nclass Son extends Father {\n\n}\n```\n\n> 声明的是父类的引用，但是调用了子类对象，调用method，子类中没有这个方法，就去父类中去找，然后进行调用\n\n***\n\n接下来我们修改子类，在子类中重写`method`方法\n\n```java\npackage cn.meowrain.bind;\n\npublic class bind01 {\n    public static void main(String[] args) {\n        Father sample = new Son();//向上转型\n        sample.method();\n    }\n}\n\nclass Father {\n    public void method(){\n        System.out.println(\"父类方法，对象类型：\" + this.getClass());\n    }\n}\nclass Son extends Father {\n    @Override\n    public void method() {\n        System.out.println(\"子类方法，对象类型： \" +this.getClass());\n    }\n}\n```\n\n> 子类方法，对象类型： class cn.meowrain.bind.Son\n> 掉用子类对象，子类中含有`method`方法，所以调用子类中的这个method方法\n\n***\n\n注意： 下面说到的不属于动态绑定\n运行时（动态）绑定针对的范畴只是对象的方法。\n接下来我们来看一看属性绑定\n\n```java\npackage cn.meowrain.bind;\n\npublic class bind01 {\n    public static void main(String[] args) {\n        Father sample = new Son();//向上转型\n        System.out.println(sample.name);\n    }\n}\n\nclass Father {\n    String name = \"父类属性\";\n\n}\nclass Son extends Father {\n    String name = \"子类属性\";\n}\n```\n\n> 运行结果： 父类属性\n> 从上面我们可以看出，输出是由编译类型决定的\n\n### 多态的应用\n\n#### 多态数组\n\n> 数组的定义类型是父类类型，里面保存的实际元素类型为子类类型\n> 应用实例：： 现有一个结构如下，要求创建1个Person对象，2个Student对象和2个Teacher对象，统一放在数组中，并调用每个对象的say方法\n\n```java\npackage cn.meowrain.bind;\n\npublic class bind02 {\n    public static void main(String[] args) {\n        Person[] persons = new Person[5];\n        persons[0] = new Person(\"jack\", 20);\n        persons[1] = new Student(\"mike\", 18, 100);\n        persons[2] = new Student(\"meowrain\", 19, 150);\n        persons[3] = new Teacher(\"gac\", 24, 110);\n        persons[4] = new Teacher(\"jjj\", 25, 123);\n        // persons[i]编译类型是Person，运行类型是根据实际情况通过JVM判断的\n\n        for (int i = 0; i < persons.length; i++) {\n            System.out.println(persons[i].say());// 动态绑定机制\n            if (persons[i] instanceof Student) {\n                Student student = (Student) persons[i];//向下转型\n                student.study();\n                //可以用下面这个替代\n                // ((Student)persons[i]).study();\n            } else if (persons[i] instanceof Teacher) {\n                Teacher teacher = (Teacher) persons[i];//向下转型\n                teacher.teach();\n                //可以用下面这个替代\n                // ((Teacher)persons[i]).teach();\n            }\n        }\n\n    }\n}\n\nclass Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String say() {\n        return \"Perosn \" + getName() + \" is \" + getAge() + \"years old\";\n    }\n\n}\n\nclass Student extends Person {\n    private int score;\n\n    public Student(String name, int age, int score) {\n        super(name, age);\n        this.score = score;\n    }\n\n    public int getScore() {\n        return score;\n    }\n\n    public void setScore(int score) {\n        this.score = score;\n    }\n\n    @Override\n    public String say() {\n        return \"Student \" + getName() + \" \" + \"is\" + \" \" + \"learning\" + \" \" + \"his score is \" + getScore();\n    }\n\n    public void study() {\n        System.out.println(\"student \" + getName() + \"is learning\");\n    }\n\n}\n\nclass Teacher extends Person {\n    private double salary;\n\n    public Teacher(String name, int age, double salary) {\n        super(name, age);\n        this.salary = salary;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n\n    @Override\n    public String say() {\n        return \"Teacher \" + getName() + \"is teaching\" + \" \" + \"his salary is \" + getSalary();\n    }\n\n    public void teach() {\n        System.out.println(\"Teacher \" + getName() + \"is teaching\");\n    }\n}\n```\n\n#### 多态参数\n\n> 方法定义的形参类型为父类类型，实参类型允许为子类类型\n\n定义员工类Employee,包含姓名和月工资（private)，以及计算年工资getAnnual的方法，普通员工和经理继承了员工，经理类多了奖金bonus和管理manage方法，普通员工多了work方法，普通员工和经理类要求分别重写getAnnual方法\n测试类中添加一个方法showEmpAnnual(Employee e),实现获取任何员工对象的年工资，并在main方法中调用该方法\\[e.getAnnual]\n\n测试类中添加一个方法，testWork,如果是普通员工，就调用那个work方法。如果是经理，就调用manage方法\n\nTest.java\n\n```java\npackage cn.meowrain.Poly.poly04;\n\npublic class Test {\n    public double showEmpAnnual(Employee e) {\n        return e.getAnnual();\n    }\n    public void testWork(Employee e){\n        if(e instanceof NormalEmployee){\n            ((NormalEmployee)e).work();\n        }else if (e instanceof Manager){\n            ((Manager)e).manage();\n        }\n\n    }\n    public static void main(String[] args) {\n        NormalEmployee worker = new NormalEmployee(\"mike\", 4000);\n        Manager manager = new Manager(\"john\", 4300, 5000);\n        Test test = new Test();\n        System.out.println(\"管理者工资： \" + test.showEmpAnnual(manager));\n        System.out.println(\"工人工资： \" + test.showEmpAnnual(worker));\n        test.testWork(manager);\n        test.testWork(worker);\n    }\n}\n\n```\n\nEmployee.java\n\n```java\npackage cn.meowrain.Poly.poly04;\n\npublic class Employee {\n    private String name;\n    private double salary;\n    \n    public Employee(String name, double salary) {\n        this.name = name;\n        this.salary = salary;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n\n    public double getAnnual () {\n        return salary*12;\n    }\n}\n\n\n```\n\nManager.java\n\n```java\npackage cn.meowrain.Poly.poly04;\n\npublic class Manager extends Employee{\n    private double bonus;\n\n    public Manager(String name, double salary, double bonus) {\n        super(name, salary);\n        this.bonus = bonus;\n    }\n\n    public double getBonus() {\n        return bonus;\n    }\n\n    public void setBonus(double bonus) {\n        this.bonus = bonus;\n    }\n    public void manage(){\n        System.out.println(\"Manager \" + getName() + \" \" + \"is managing\");\n    }\n    @Override\n    public double getAnnual() {\n        return (getSalary()*12 + bonus);\n    }\n    \n    \n}\n\n```\n\nNormalEmployee.java\n\n```java\npackage cn.meowrain.Poly.poly04;\n\npublic class NormalEmployee extends Employee{\n\n    public NormalEmployee(String name, double salary) {\n        super(name, salary);\n    }\n    public void work(){\n        System.out.println(\"普通工人\" + \" \" + getName() + \" \" + \"is working\");\n    }\n    @Override\n    public double getAnnual() {\n        // TODO Auto-generated method stub\n        return super.getAnnual();\n    }\n}\n\n```\n\n## Object类详解\n\n### equals方法\n\n\\== 是一个比较运算符\n\n![image-20221121193757084](https://static.meowrain.cn/i/2022/11/21/w1hxcz-3.png)\n\n![image-20221121201430025](https://static.meowrain.cn/i/2022/11/21/xb6e82-3.png)\n\n> 在看下面这个东西之前，我们先抛出一个问题\n> **String属于什么数据类型？**\n> <https://zhuanlan.zhihu.com/p/136468277>\n> 引用类型\n> 基本数据类型和引用数据类型详见[Java数据类型：基本数据类型和引用数据类型 (biancheng.net)](http://c.biancheng.net/view/5672.html)\n\n区分\n\n```java\npackage com.hsp.object;\n\npublic class Equals_exercise02 {\n    public static void main(String[] args) {\n        String name_1 = \"hello\";\n        String name_2 = \"hello\";\n        System.out.println(name_2 == name_1);//true\n        /*\n        * String str1 = \"abcd\"的实现过程：首先栈区创建str引用，\n        * 然后在String池（独立于栈和堆而存在，存储不可变量）\n        * 中寻找其指向的内容为\"abcd\"的对象，如果String池中没有，\n        * 则创建一个，然后str指向String池中的对象，\n        * 如果有，则直接将str1指向\"abcd\"\"；\n        * 如果后来又定义了字符串变量 str2 = \"abcd\",\n        * 则直接将str2引用指向String池中已经存在的“abcd”，\n        * 不再重新创建对象；当str1进行了赋值（str1=“abc”），\n        * 则str1将不再指向\"abcd\"，而是重新指String池中的\"abc\"，\n        * 此时如果定义String str3 = \"abc\",进行str1 == str3操作，\n        * 返回值为true，因为他们的值一样，地址一样，\n        * 但是如果内容为\"abc\"的str1进行了字符串的+连接str1 = str1+\"d\"\n        * ；此时str1指向的是在堆中新建的内容为\"abcd\"的对象，\n        * 即此时进行str1==str2，返回值false，因为地址不一样。\n\n\n\tString str3 = new String(\"abcd\")的实现过程：\n*\t 直接在堆中创建对象。\n*\t 如果后来又有\n* \t String str4 = new String(\"abcd\")，str4不会指向之前的对象，\n* \t 而是重新创建一个对象并指向它，\n* \t 所以如果此时进行str3==str4返回值是false，\n* \t 因为两个对象的地址不一样，如果是str3.equals(str4)，\n* \t 返回true,因为内容相同。\n\n        * */\n        String name_3 = new String(\"hello\");\n        String name_4 = new String(\"hello\");\n        System.out.println(name_3 == name_4);//false\n        System.out.println(name_3.equals(name_4));\n        System.out.println(name_1.equals(name_2));\n    }\n}\n\n```\n\n### hashCode方法\n\n1.  提高具有哈希结构的容器效率\n2.  两个引用，如果指向的是同一个对象，则**哈希值**肯定是一样的\n3.  两个引用，如果指向的是不同的对象，则**哈希值**是不一样的\n4.  哈希值主要根据地址号来的，不能将**哈希值**等价于地址\n\n```java\npackage com.hsp.object;\n\npublic class HashCode {\n    public static void main(String[] args) {\n        AA aa = new AA();\n        AA aa2 = new AA();\n        System.out.println(aa.hashCode());\n        System.out.println(aa2.hashCode());\n        /*460141958\n          1163157884*/\n    }\n}\nclass AA {}\n\n```\n\n### toString方法\n\n基本介绍：\n\n默认返回： **`全类名 + @ + 哈希值的十六进制`**\n\n子类往往重写toString方法，用于返回对象的属性信息\n\n```java\npackage com.hsp.object;\n\npublic class toString {\n    public static void main(String[] args) {\n        Monster monster = new Monster(\"妖怪\",\"保安\",1000);\n        System.out.println(monster.toString());//com.hsp.object.Monster@1b6d3586\n    }\n}\nclass Monster {\n        private String name;\n        private String job;\n        private double sal;\n\n    public Monster(String name, String job, double sal) {\n        this.name = name;\n        this.job = job;\n        this.sal = sal;\n    }\n}\n```\n\n重写`toString方法`，打印对象或拼接对象时，都会自动调用该对象的toString形式\n\n```java\npackage com.hsp.object;\n\npublic class toString {\n    public static void main(String[] args) {\n        Monster monster = new Monster(\"妖怪\",\"保安\",1000);\n        System.out.println(monster.toString());//Monster{name='妖怪', job='保安', sal=1000.0}\n\n    }\n}\nclass Monster {\n        private String name;\n        private String job;\n        private double sal;\n//        重写toString方法\n\n    @Override\n    public String toString() {\n        return \"Monster{\" +\n                \"name='\" + name + '\\'' +\n                \", job='\" + job + '\\'' +\n                \", sal=\" + sal +\n                '}';\n    }\n\n    public Monster(String name, String job, double sal) {\n        this.name = name;\n        this.job = job;\n        this.sal = sal;\n    }\n}\n```\n\n当直接输出一个对象时候，`toString方法`会被默认的调用\n\n```java\npackage com.hsp.object;\n\npublic class toString {\n    public static void main(String[] args) {\n        Monster monster = new Monster(\"妖怪\", \"保安\", 1000);\n        System.out.println(monster);\n    }\n}\n\nclass Monster {\n    private String name;\n    private String job;\n    private double sal;\n//        重写toString方法\n\n    @Override\n    public String toString() {\n        return \"Monster{\" +\n                \"name='\" + name + '\\'' +\n                \", job='\" + job + '\\'' +\n                \", sal=\" + sal +\n                '}';\n    }\n\n    public Monster(String name, String job, double sal) {\n        this.name = name;\n        this.job = job;\n        this.sal = sal;\n    }\n}\n```\n\n### finalize()\n\n当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法\n\n1.当对象被回收时，系统自动调用该对象的finalize方法。子类可以重写该方法，做一些释放资源的操作\n\n2.什么时候被回收：当某个对象没有任何引用的时候，则jvm就认为这个对象是一个垃圾对象，就会用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用finalize方法\n\n3.垃圾回收机制的调用，是由系统来决定，也可以由`System.gc()`主动触发垃圾回收机制\n\n> <p style=\"color:red\" >实际开发中基本不会运用，应付面试</p>\n","tags":["java"],"categories":["Java","JAVASE"]},{"title":"Java面向对象基础(初级)","url":"/2023/01/19/929bd134ed01499c92d8e177925950ef/","content":"\n# Java面向对象基础(初级)\n\n> 对面向对象和面向过程的理解\n>\n> [谈谈你对面向过程和面向对象的理解\\_智十七°的博客-CSDN博客\\_面向对象和面向过程的理解](https://blog.csdn.net/weixin_45812336/article/details/121717294)\n\n## **面向对象的三大特征**\n\n**封装** (Encapsulation)\n**继承** (Inheritance)\n**多态** (Polymorphism)\n\n## 初识对象和类\n\n![image-20221207221107547](https://static.meowrain.cn/i/2022/12/08/a3swjm-3.png)\n\n![image-20221207221135590](https://static.meowrain.cn/i/2022/12/08/a3yslr-3.png)\n\n![image-20221207221142578](https://static.meowrain.cn/i/2022/12/08/a409p0-3.png)\n\n![image-20221207222150537](https://static.meowrain.cn/i/2022/12/08/aa0a4k-3.png)\n\n## 初次使用对象和类\n\n> 如下，在下面这个代码中，我创建了一个猫类，然后利用猫类创建了两个猫对象，一个赋值给cat01，一个赋值给cat02\n\n```Java\npackage cn.meowrain.Object_;\n\npublic class relean_01 {\n    public static void main(String[] args) {\n        //创建两猫对象\n        Cat cat01 = new Cat();\n        cat01.name = \"小花\";\n        cat01.age = 1;\n        cat01.color = \"花色\";\n        Cat cat02 = new Cat();\n        cat02.name = \"小白\";\n        cat02.age = 2;\n        cat02.color = \"白色\";\n        //访问对象属性\n        System.out.println(cat01.name);\n        System.out.println(cat02.name);\n        cat01.eat();\n        cat02.eat();\n    }\n}\n\nclass Cat {\n    public String name;\n    public int age;\n    public String color;\n    public void eat(){\n        System.out.println(name + \"吃饭\");\n    }\n    public void drink(){\n        System.out.println(name + \"喝水\");\n    }\n}\n```\n\n> **new Cat()**  //创建一只猫对象\n>\n> **Cat cat01 = new Cat();**//把创建的猫对象赋值给cat01\n>\n> cat01是对象名(对象引用)\n\n### 如何创建一个对象\n\n```java\n1) 先声明再创建\nCat cat ; //声明对象 cat\ncat = new Cat(); //创建\n2) 直接创建\nCat cat = new Cat();\n```\n\n> **补充：Java中实例化对象是什么意思**\n>\n> 在Java语言中使用**new关键字创建/构造对象的过程叫做类的实例化**，该过程的本质，会在[内存](https://so.csdn.net/so/search?q=内存\\&spm=1001.2101.3001.7020)空间的**堆区申请一块存储区域**，用于**记录该对象独有的成员变量信息**。\n>\n> 通俗点就是，实例化：使用关键字new来创建对象。\n>\n> 例如：\n> Person person = new Person();\n>\n> 这样的语句称为创建对象。\n>\n> 对象是根据类创建的。在Java中使用关键字new创建对象。\n>\n> new Person(); 是 声明一个Person类型的对象，在堆区区域。\n>\n> new Person(); ()是指创建Person类型的对象后，自动调用Person类中的构造方法，来进行成员变量的初始化。\n>\n> Person person ，Person为类名，person 为引用变量名。\n> ————————————————\n> 版权声明：本文为CSDN博主「智十七°」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n> 原文链接：<https://blog.csdn.net/weixin_45812336/article/details/113954823>\n\n## 对象在内存中的存在形式\n\n![image-20221207222229633](https://static.meowrain.cn/i/2022/12/08/aaheb6-3.png)\n\n## 属性，成员变量\n\n```java\npackage cn.meowrain.Object_;\n\npublic class relearn_02 {\n}\nclass Hunman {\n    //下面都属于Human类的属性\n    String name; \n    double salary;\n    int age;\n    String country;\n}\n```\n\n> **属性是类的一个组成部分，一般是基本数据类型,也可是引用类型(对象，数组)。上面这个代码中的`name`,`salary`等都是这个`Human`类的属性**\n>\n> ***\n>\n> **属性的定义语法同变量，**\n>\n> **示例：访问修饰符 属性类型 属性名**\n>\n> > 访问修饰符详情见[Java 访问修饰符 - 喵雨の小屋|木更老婆！！！ (meowrain.cn)](https://meowrain.cn/archives/java-fang-wen-xiu-shi-fu)\n>\n> ***\n>\n> **属性的定义类型可以为任意类型，包含基本类型或引用类型**\n>\n> > 基本数据类型和引用数据类型详见[Java数据类型：基本数据类型和引用数据类型 (biancheng.net)](http://c.biancheng.net/view/5672.html)\n> >\n> > ![Java数据类型结构图](https://static.meowrain.cn/i/2022/12/08/ae0mrh-3.jpg)\n> >\n> > [Java数据类型（八种基本数据类型 + 四种引用数据类型）\\_火火笔记的博客-CSDN博客\\_引用数据类型有哪几种](https://blog.csdn.net/weixin_42428778/article/details/109603769)\n>\n> ***\n>\n> 属性如果不赋值，有默认值，规则和数组一致。\n>\n> 具体: ==**int 0，short 0, byte 0, long 0, float 0.0,double 0.0，char \\u0000， boolean false，String null**==\n\n### 如何访问属性\n\n> 基本语法\n>\n> **对象名.属性名;**\n\n示范：\n\n```java\npackage cn.meowrain.Object_;\n\npublic class relearn_02 {\n    Human human01 = new Human();\n    human01.name = \"mike\";\n    human01.age = 20;\n    System.out.println(human.name + \"is\" + human01.age + \"years old\")\n}\nclass Hunman {\n    //下面都属于Human类的属性\n    String name; \n    double salary;\n    int age;\n    String country;\n}\n```\n\n## 类和对象的内存分配机制\n\n我们定义一个人类(Person)(包括 名字,年龄)\n\n```java\npackage cn.meowrain.Object_;\n\npublic class relearn_03 {\n    public static void main(String[] args) {\n        Person p1 = new Person();\n        p1.age = 10;\n        p1.name = \"小明\";\n        Person p2 = p1;\n        System.out.println(p2.age);\n        \n    }\n}\nclass Person {\n    public int age;\n    public String name;\n    \n}\n```\n\n> 问题：`p2.age` 究竟是多少，画出内存图\n>\n> ![image-20221207224810174](https://static.meowrain.cn/i/2022/12/08/apujhh-3.png)\n\n### Java 内存的结构分析\n\n1.  **栈： 一般存放基本数据类型(局部变量)**\n2.  **堆： 存放对象(Cat cat , 数组等)**\n3.  **方法区：常量池(常量，比如字符串)， 类加载信息**\n\n#### Java 创建对象的流程简单分析\n\n![image-20221207230136236](https://static.meowrain.cn/i/2022/12/08/bljtzj-3.png)\n\n![image-20221207230219768](https://static.meowrain.cn/i/2022/12/08/bm1vkd-3.png)\n\n## 方法重载\n\n> java中允许同一个类中，多个同名方法的存在，但是要求形参列表不一致\n\n> 通过重载，我们减轻了起名的麻烦\n\n案例：\n\n```java\npackage cn.meowrain.Object_;\n\npublic class relearn_06 {\n    public static void main(String[] args) {\n        rel rel = new rel();\n        int m = rel.getSum(1,2,3);\n        System.out.println(m);\n        int n = rel.getSum(1,2);\n        \n    }\n}\nclass rel {\n    public int getSum(int n1,int n2){\n        return n1+n2;\n    }\n    public int getSum(int n1,int n2,int n3){\n        return n1+n2+n3;\n    }\n}\n```\n\n### 可变参数\n\n> java允许把同一个类中多个同名同功能但是参数个数不同的方法，封装成一个方法\n\n基本语法：\n\n>     //int... 表示接受的是可变参数，类型是int，即可以接收多个int\n>     //使用可变参数时候，可以当数组来使用，nums可以当做数组\n\n```java\npackage cn.meowrain.Object_;\n\npublic class relearn_07 {\n    public static void main(String[] args) {\n        rel_07 rel = new rel_07();\n        int m = rel.getSum(1,2,3,4);//10\n        int n = rel.getSum(5,6,7);//18\n        int b = rel.getSum(0,1);//1\n        System.out.println(m);\n        System.out.println(n);\n        System.out.println(b);\n    }\n\n}\nclass rel_07 {\n    //int... 表示接受的是可变参数，类型是int，即可以接收多个int\n    //使用可变参数时候，可以当数组来使用，nums可以当做数组\n    public int getSum(int... nums){\n        int res = 0;\n        for(int i = 0;i<nums.length;i++){\n            res+=nums[i];\n        }\n        return res;\n    }\n}\n```\n\n> ![image-20221208221302540](https://static.meowrain.cn/i/2022/12/09/a4yvcs-3.png)\n\n## 作用域\n\n![image-20221208221637490](https://static.meowrain.cn/i/2022/12/09/a6yf87-3.png)\n\n```java\npackage cn.meowrain.Object_;\n\npublic class relearn_08 {\n    public static void main(String[] args) {\n\n    }\n}\n\nclass Dog {\n    //全局变量：也就是属性，作用域为整个类体Cat类，cry eat等方法使用属性\n    //属性在定义时，可以直接赋值\n    int age = 10;\n    double weight;//默认是0.0\n\n    public void hi() {\n        //局部变量必须赋值后才能使用，因为没有默认值\n        //局部变量一般是指在成员方法中定义的变量\n        int num = 1;\n        String address = \"Beijing's Dog\";\n        System.out.println(\"num=\" + num);\n        System.out.println(\"address\" + address);\n        System.out.println(\"weight=\" + weight);\n    }\n\n    public void cry() {\n        int n = 10;\n        String name = \"jack\";\n        System.out.println(name + \"cry for\" + n + \"times\");\n\n\n    }\n\n    public void eat() {\n        String name = \"meow\";\n        System.out.println(name + \"eat\");\n    }\n}\n```\n\n### 注意事项和使用细节\n\n![image-20221208222256061](https://static.meowrain.cn/i/2022/12/09/aan8cn-3.png)\n\n> 属性可以加修饰符，但是局部变量不能加修饰符\n\n## 构造器\n\n构造方法又叫构造器(constructor)，是类的一种特殊的方法，\n\n它的主要作用是完成对新对象的初始化。它有几个特点：\n\n1.  方法名和类名相同\n2.  没有返回值\n3.  在创建对象时，系统会自动的调用该类的构造器完成对象的初始化。\n\n![image-20221208223933784](https://static.meowrain.cn/i/2022/12/09/akmmfe-3.png)\n\n基本语法：\n\n```java\n[修饰符] 方法名(形参列表) {\n    方法体\n}\n```\n\n> ![image-20221208224012942](https://static.meowrain.cn/i/2022/12/09/al3gvn-3.png)\n\n案例：\n\n```java\npackage cn.meowrain.Object_;\n\npublic class relearn_09 {\n    public static void main(String[] args) {\n        rel_09 rel = new rel_09(\"meowrain\", 18);\n        rel_09 rel_1 = new rel_09(\"meow\", 20, \"mouse\");\n        rel.getInfo();\n        rel_1.getItem();\n    }\n\n}\n\nclass rel_09 {\n    String name;\n    int age;\n    String item;\n\n    public rel_09(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // 构造器重载\n    public rel_09(String name, int age, String item) {\n        this.name = name;\n        this.age = age;\n        this.item = item;\n    }\n\n    public void getInfo() {\n        System.out.println(this.name + \"  \" + this.age);\n    }\n\n    public void getItem() {\n        System.out.println(this.item);\n    }\n}\n```\n\n![image-20221208224712870](https://static.meowrain.cn/i/2022/12/09/ap9rk3-3.png)\n\n### 练习题：\n\n![image-20221208225109288](https://static.meowrain.cn/i/2022/12/09/armk4z-3.png)\n\n```java\npackage cn.meowrain.Object_;\n\npublic class relearn_10 {\n    public static void main(String[] args) {\n        Person_n person01 = new Person_n(\"meow\", 12);\n        Person_n person02 = new Person_n();\n        System.out.println(person01.name  + \" is \" + person01.age + \"years old\");\n        System.out.println(person02.name + \" is \" + person02.age + \"years old\");\n    }\n\n}\n\nclass Person_n {\n    String name;\n    int age;\n\n    public Person_n() {\n        this.age = 18;\n    }\n\n    public Person_n(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n}\n```\n\n![image-20221208230513474](https://static.meowrain.cn/i/2022/12/09/bnslbj-3.png)\n\n## 对象创建的流程分析\n\n![image-20221208232146688](https://static.meowrain.cn/i/2022/12/09/bxix5a-3.png)\n\n![image-20221208232252577](https://static.meowrain.cn/i/2022/12/09/by5lwi-3.png)\n\n## this关键字\n\n![image-20221208232330819](https://static.meowrain.cn/i/2022/12/09/bym9gu-3.png)\n\n> 什么是this?\n>\n> \\==简单说：哪个对象调用，this就代表哪个对象==\n>\n> ![image-20221208232947980](https://static.meowrain.cn/i/2022/12/09/c2ajje-3.png)\n>\n> ![image-20221208233027570](https://static.meowrain.cn/i/2022/12/09/c2rgsf-3.png)\n\n```java\npackage cn.meowrain.Object_;\n\npublic class relearn12 {\n    \n}\nclass This01 {\n    public static void main(String[] args) {\n        Dog_new dog_new = new Dog_new(\"大黄\", 1);\n        dog_new.info();\n    }\n}\nclass Dog_new {\n    String name;\n    int age;\n    public Dog_new(String name,int age) {\n        this.name = name;\n        this.age = age;\n    }\n    public void info(){\n        System.out.println(\"this.hashCode=\" + this.hashCode());\n        System.out.println(name + \"\\t\" + age + \"\\t\");\n    }\n}\n```\n\n### 练习题：\n\n![image-20221208233149601](https://static.meowrain.cn/i/2022/12/09/c3hjo6-3.png)\n\n```java\npackage cn.meowrain.Object_;\n\npublic class relearn13 {\n    public static void main(String[] args) {\n        person_01 p1 = new person_01(\"mary\", 18);\n        person_01 p2 = new person_01(\"mary\",18);\n        System.out.println(p1.compareTo(p2)); //true\n    }\n    \n}\nclass person_01 {\n    String name;\n    int age;\n    public person_01(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    public boolean compareTo(person_01 p){\n        if(this.name.equals(p.name)&&this.age == p.age) {\n            return true;\n        }\n        return false;\n    }\n}\n\n\n```\n\n***\n\n# 作业\n\n## 作业1\n\n![image-20221208233847713](https://static.meowrain.cn/i/2022/12/09/c7n9aw-3.png)\n\n```java\npackage cn.meowrain.Object_.homework;\n\npublic class h1 {\n    public static void main(String[] args) {\n        double[] arr = { 1.0, -2.0, 4.5 };\n        A01 a01 = new A01();\n        double max = a01.max(arr);\n        System.out.println(max);\n\n    }\n}\n\nclass A01 {\n    public double max(double[] a) {\n        double m = a[0];\n        for (int i = 0; i < a.length; i++) {\n            if (a[i] > m)\n                m = a[i];\n        }\n        return m;\n    }\n}\n```\n\n## 作业2\n\n![image-20221208233859783](https://static.meowrain.cn/i/2022/12/09/c7py2n-3.png)\n\n```java\npackage cn.meowrain.Object_.homework;\n\npublic class h2 {\n    public static void main(String[] args) {\n        String[] strArr = {\"helloworld\",\"meowrain\"};\n        A02 a02 = new A02();\n        int a = a02.find(strArr);\n        if(a == 0){\n            System.out.println(true);\n        }else {\n            System.out.println(false);\n        }\n    }\n    \n}\nclass A02 {\n    public int find(String []arr){\n        for (int i = 0; i < arr.length; i++){\n            if(arr[i].equals(\"helloworld\")){\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n```\n\n## 作业3\n\n![image-20221208233908170](https://static.meowrain.cn/i/2022/12/09/c80ehs-3.png)\n\n```java\npackage cn.meowrain.Object_.homework;\n\npublic class h3 {\n    public static void main(String[] args) {\n        Book book = new Book(\"猫的故事\", 200);\n        Book book2 = new Book(\"狗的故事\", 120);\n        Book book3 = new Book(\"驴的故事\", 20);\n        book.updatePrice(book.price);\n        book2.updatePrice(book2.price);\n        book3.updatePrice(book3.price);\n        System.out.println(book.name + \" : \" + book.price);\n        System.out.println(book2.name + \" : \" + book2.price);\n        System.out.println(book3.name + \" : \" + book3.price);\n        /*\n         *  猫的故事 : 150.0\n            狗的故事 : 100.0\n            驴的故事 : 20.0\n         * \n         */\n    }\n}\nclass Book {\n    String name;\n    double price;\n    public Book(String name,double price) {\n        this.name = name;\n        this.price = price;\n    }\n    public void updatePrice(double price){\n        if(price > 150){\n            this.price = 150;\n        }else if(price > 100) {\n            this.price = 100;\n        }\n    }\n}\n```\n\n## 作业4\n\n![image-20221208233917803](https://static.meowrain.cn/i/2022/12/09/c826s9-3.png)\n\n```java\npackage cn.meowrain.Object_.homework;\n\npublic class h4 {\n    public static void main(String[] args) {\n        A03 a03 = new A03();\n        int[] arr = {1,2,3,4,5};\n        int[] a1 = a03.copyArr(arr);\n        for(int i=0;i<a1.length; i++){\n            System.out.println(a1[i]);\n        }\n    }\n}\nclass A03 {\n    public int[] copyArr(int[] arr) {\n        int[] a = new int[arr.length];\n        for (int i = 0; i < arr.length; i++){\n            a[i] = arr[i];\n        }\n        return a;\n    }\n\n}\n```\n\n## 作业5\n\n![image-20221208233925348](https://static.meowrain.cn/i/2022/12/09/c840f7-3.png)\n\n```java\npackage cn.meowrain.Object_.homework;\n\npublic class h5 {\npublic static void main(String[] args) {\n    Circle circle = new Circle(2);\n    double perimeter = circle.perimeter();\n    double area = circle.area();\n    System.out.printf(\"%.2f\\n\",perimeter);\n    System.out.printf(\"%.2f\\n\",area);\n    /*\n     *  12.57\n        12.57\n     */\n}\n}\n\nclass Circle {\n    double r;\n\n    public Circle(double r) {\n        this.r = r;\n    }\n\n    public double perimeter() {\n        return Math.PI*r*2;\n    }\n    public double area() {\n        return Math.PI * r * r;\n    }\n}\n```\n\n## 作业6\n\n![image-20221208233941030](https://static.meowrain.cn/i/2022/12/09/c87b93-3.png)\n\n```java\npackage cn.meowrain.Object_.homework;\n\npublic class h6 {\n    public static void main(String[] args) {\n        Cale cale01 = new Cale(5, 2);\n        Cale cale02 = new Cale(1, 0);\n        cale01.divide();\n        cale02.divide();\n    }\n}\n\nclass Cale {\n    int a, b;\n\n    public Cale(int a, int b) {\n        this.a = a;\n        this.b = b;\n    }\n\n    public int sum() {\n        return a + b;\n\n    }\n\n    public int multiply() {\n        return a * b;\n    }\n\n    public void divide() {\n        if (b == 0) {\n            System.out.println(\"输入的除数不能为0！\");\n        } else {\n            System.out.println(a * 1.0 / b);\n        }\n\n    }\n}\n```\n\n## 作业7\n\n![image-20221208233951625](https://static.meowrain.cn/i/2022/12/09/c89j3i-3.png)\n\n```java\npackage cn.meowrain.Object_.homework;\n\npublic class h7 {\npublic static void main(String[] args) {\n    Dog dog = new Dog(\"mike\",\"white\",2);\n    dog.show();\n}\n}\nclass Dog {\n    String name;\n    String color;\n    int age;\n    public Dog(String name,String color,int age){\n        this.name = name;\n        this.color = color;\n        this.age = age;\n    }\n    public void show(){\n        System.out.println(\"the dog \" + name + \" is \" + age + \" \" + \"years old and its color is \" + color);\n    }\n}\n```\n\n## 作业8\n\n![image-20221208234033422](https://static.meowrain.cn/i/2022/12/09/c8r8su-3.png)\n\n## 作业9\n\n![image-20221208234041063](https://static.meowrain.cn/i/2022/12/09/c8svca-3.png)\n\n```java\npackage cn.meowrain.Object_.homework;\n\npublic class h9 {\n\n    public static void main(String[] args) {\n        Music music01 = new Music(\"青花瓷\", \"4:00\");\n        Music music02 = new Music(\"鸡你太美\", \"3:00\");\n        music01.getInfo();\n        music01.play();\n        \n    }\n}\nclass Music\n{\n    String name;\n    String times;\n    public Music(String name,String times){\n        this.name = name;\n        this.times = times;\n    }\n    public void play(){\n        System.out.println(name + \"is palying for \" + times);\n    }\n    public void getInfo(){\n        System.out.println(\"the music name is \" + name + \"times is : \" + times);\n    }\n}\n```\n\n## 作业10\n\n![image-20221208234050200](https://static.meowrain.cn/i/2022/12/09/c8up21-3.png)\n\n```java\npackage cn.meowrain.Object_.homework;\n\npublic class h8 {\n    int i = 100;\n    public void m(){\n        int j = i++;\n        System.out.println(\"i=\" + i);\n        System.out.println(\"j=\" + j);\n\n    }\n}\nclass Test {\n    public static void main(String[] args) {\n        h8 demo = new h8();\n        h8 demo2 = new h8();\n        demo.m();\n        System.out.println(demo.i);\n        System.out.println(demo2.i);\n    }\n}\n\n```\n\n```java\ni=101\nj=100\n101  \n100\n```\n\n## 作业11\n\n![image-20221208234102159](https://static.meowrain.cn/i/2022/12/09/c8xbp3-3.png)\n\n```java\n不做了\n```\n\n## 作业12\n\n![image-20221208234109474](https://static.meowrain.cn/i/2022/12/09/c97cu8-3.png)\n\n```java\npackage cn.meowrain.Object_.homework;\n\npublic class h12 {\n    Employee_ emp1 = new Employee_(\"经理\", \"10000\");\n    \n\n}\nclass Employee_ {\n    String name;\n    String sex;\n    int age;\n    String position;\n    String salary;\n    public Employee_(String name, String sex, int age, String position, String salary) {\n        this.name = name;\n        this.sex = sex;\n        this.age = age;\n        this.position = position;\n        this.salary = salary;\n    }\n    public Employee_(String name, String sex, int age) {\n        this.name = name;\n        this.sex = sex;\n        this.age = age;\n    }\n    public Employee_(String position, String salary) {\n        this.position = position;\n        this.salary = salary;\n    }\n    \n\n    \n}\n```\n\n## 作业13\n\n![image-20221208234123863](https://static.meowrain.cn/i/2022/12/09/c9aok3-3.png)\n\n```java\npackage cn.meowrain.Object_.homework;\n\npublic class h13 {\n    public static void main(String[] args) {\n        Circle01 circle = new Circle01();\n        PassObject pass = new PassObject();\n        pass.printAreas(circle, 5);\n    }\n}\n class Circle01 {\n    public double radius;\n    public double findArea(){\n        return radius*radius*Math.PI;\n    }\n\n }\n class PassObject {\n    public void printAreas(Circle01 c,int times) {\n        for(int i = times;i>0;i--){\n            c.radius = i;\n            System.out.println(\"r:\" + i + \"  \" + \"S=\" + c.findArea());\n        }\n    }\n }\n```\n","tags":["java"],"categories":["Java","JAVASE"]},{"title":"Linux下JAVA环境配置","url":"/2023/01/19/06a5ebd1d51442d58ba9f7b02612a94b/","content":"\n在 `/etc/profile`文件下编辑\n\n```bash\nexport JAVA_HOME=/usr/local/jdk1.8.0_181  #jdk安装目录\n \nexport JRE_HOME=${JAVA_HOME}/jre\n \nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib:$CLASSPATH\n \nexport JAVA_PATH=${JAVA_HOME}/bin:${JRE_HOME}/bin\n \nexport PATH=$PATH:${JAVA_PATH}\n```\n\n然后命令输入`java -version`\n![](https://static.meowrain.cn/i/2023/01/07/ifkr64-3.png)\n","categories":["Java","环境配置"]},{"title":"Java-GUI 布局","url":"/2023/01/19/a8eb012039114ca6a601a1c34622ba93/","content":"\n## BorderLayout\n\n![](https://static.meowrain.cn/i/2023/01/14/nl37if-3.png)\n\n```java\npackage cn.javagui.awt;\nimport java.awt.*;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class BorderLayout_ {\n    public static void main(String[] args) {\n        Frame frame = new Frame();\n        frame.setBounds(500,500,500,300);\n        frame.setAlwaysOnTop(true);;\n        frame.setVisible(true);\n        Dimension screen_size = Toolkit.getDefaultToolkit().getScreenSize();// 获取屏幕粉白嫩绿\n        int middle_x = (int) (screen_size.getWidth() / 2 - frame.getWidth() / 2); // 中间横坐标\n        int middle_y = (int) (screen_size.getHeight() / 2 - frame.getHeight() / 2);// 中间纵坐标\n        frame.setLocation(middle_x, middle_y); // 设置窗口显示位置，显示再屏幕正中间\n        frame.setFont(new Font(\"SimSong\", Font.BOLD, 20));\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.out.println(\"程序退出成功!\");\n                System.exit(0);\n            }\n        });\n        BorderLayout layout = new BorderLayout();\n        frame.setLayout(layout);;\n        layout.setHgap(50); //横向边距\n        layout.setVgap(50); //纵向边距\n\n        frame.add(new Button(\"number1\"),BorderLayout.WEST);\n        frame.add(new Button(\"number2\"),BorderLayout.EAST);\n        frame.add(new Button(\"number3\"),BorderLayout.NORTH);\n        frame.add(new Button(\"number4\"),BorderLayout.SOUTH);\n        frame.add(new Button(\"number5\"),BorderLayout.CENTER);\n\n    }\n}\n```\n\n## FlowLayout\n\n![](https://static.meowrain.cn/i/2023/01/14/nl9ejq-3.png)\n\n```java\npackage cn.javagui.awt;\n\nimport java.awt.*;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class FlowLayout_ {\n    public static void main(String[] args) {\n        Frame frame = new Frame();\n        frame.setSize(500,500);\n        frame.setAlwaysOnTop(true);;\n        frame.setVisible(true);\n        Dimension screen_size = Toolkit.getDefaultToolkit().getScreenSize();// 获取屏幕粉白嫩绿\n        int middle_x = (int) (screen_size.getWidth() / 2 - frame.getWidth() / 2); // 中间横坐标\n        int middle_y = (int) (screen_size.getHeight() / 2 - frame.getHeight() / 2);// 中间纵坐标\n        frame.setLocation(middle_x, middle_y); // 设置窗口显示位置，显示再屏幕正中间\n        frame.setFont(new Font(\"SimSong\", Font.BOLD, 20));\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.out.println(\"程序退出成功!\");\n                System.exit(0);\n            }\n        });\n        FlowLayout flowLayout = new FlowLayout();\n        flowLayout.setAlignment(FlowLayout.LEFT);\n        flowLayout.setHgap(50);\n        frame.setLayout(flowLayout);\n        frame.add(new Button(\"number1\"));\n        frame.add(new Button(\"number2\"));\n        frame.add(new Button(\"number3\"));\n        frame.add(new Button(\"number4\"));\n        frame.add(new Button(\"number5\"));\n    }\n}\n```\n\n## GridLayout\n\n![](https://static.meowrain.cn/i/2023/01/14/nlsd3t-3.png)\n\n```java\npackage cn.javagui.awt;\n\nimport java.awt.*;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class GridLayout_ {\n    public static void main(String[] args) {\n        Frame frame = new Frame();\n        frame.setVisible(true);\n        frame.setAlwaysOnTop(true);\n        frame.setSize(900, 600);\n        Dimension screen_size = Toolkit.getDefaultToolkit().getScreenSize();\n        int middle_x = (int) (screen_size.getWidth() / 2);\n        int middle_y = (int) (screen_size.getHeight() / 2);\n        frame.setLocation(middle_x, middle_y);\n        frame.setFont(new Font(\"SimSong\", Font.BOLD, 20));\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0);\n                System.out.println(\"程序退出成功\");\n            }\n        });\n        GridLayout layout = new GridLayout();\n        layout.setRows(3);\n        layout.setColumns(3);\n        frame.setLayout(layout);\n        for (int i = 1; i <= 6; i++) {\n            frame.add(new Button(i + \"button\"));\n        }\n\n    }\n}\n```\n\n## CardLayout\n\n![](https://static.meowrain.cn/i/2023/01/14/nlxdry-3.png)\n\n```java\npackage cn.javagui.awt;\n\nimport java.awt.*;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class CardLayout_ {\n    public static void main(String[] args) throws InterruptedException {\n        Frame frame = new Frame();\n        frame.setSize(500,500);\n        frame.setAlwaysOnTop(true);;\n        frame.setVisible(true);\n        Dimension screen_size = Toolkit.getDefaultToolkit().getScreenSize();// 获取屏幕粉白嫩绿\n        int middle_x = (int) (screen_size.getWidth() / 2 - frame.getWidth() / 2); // 中间横坐标\n        int middle_y = (int) (screen_size.getHeight() / 2 - frame.getHeight() / 2);// 中间纵坐标\n        frame.setLocation(middle_x, middle_y); // 设置窗口显示位置，显示再屏幕正中间\n        frame.setFont(new Font(\"SimSong\", Font.BOLD, 20));\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.out.println(\"程序退出成功!\");\n                System.exit(0);\n            }\n        });\n        CardLayout layout = new CardLayout();\n        frame.setLayout(layout);\n        frame.add(new Label(\"num 1\"));\n        frame.add(new Label(\"num 2\"));\n        frame.add(new Label(\"num 3\"));\n        while(true){\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n            layout.next(frame); //我们需要使用CardLayout对象来进行切换\n\n        }\n    }\n}\n```\n","tags":["java"],"categories":["Java","Java-GUi"]},{"title":"Java-GUI-常用组件","url":"/2023/01/19/2c969cb92c56489ab91482067305ab42/","content":"\n# Java-GUI-常用组件\n\n> 组件实际上是AWT为我们预设好的一些可以直接使用的界面元素，比如按钮，文字框，标签等等，我们可以使用这些已经帮我们写好的组件来快速拼凑出一个好看且功能强大的程序\n\n在学习组件之前，我们先将布局设定为null,因为默认情况下会采用BorderLayout作为布局,有关布局会在下一部分中进行介绍\n\n## 标签\n\n![](https://static.meowrain.cn/i/2023/01/12/ql4bf7-3.png)\n\n```java\npackage cn.javagui.awt;\n\nimport java.awt.*;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class Component {\n    public static void main(String[] args) {\n        Frame frame = new Frame();\n        frame.setTitle(\"组件\");\n        frame.setLayout(null);\n        frame.setSize(700, 500);\n        frame.setVisible(true);\n        frame.setBackground(Color.ORANGE);\n        Dimension screen_size = Toolkit.getDefaultToolkit().getScreenSize();// 获取屏幕粉白嫩绿\n        int middle_x = (int) (screen_size.getWidth() / 2 - frame.getWidth() / 2); // 中间横坐标\n        int middle_y = (int) (screen_size.getHeight() / 2 - frame.getHeight() / 2);// 中间纵坐标\n        frame.setLocation(middle_x, middle_y); // 设置窗口显示位置，显示再屏幕正中间\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.out.println(\"程序退出成功!\");\n                System.exit(0);\n            }\n        });\n        Label label = new Label();// 添加标签只需要创建要个Label对象即可\n        label.setLocation(20, 50);\n        label.setSize(350, 20);\n        label.setFont(new Font(\"SimSong\", Font.BOLD, 20)); // 设置标签字体\n        label.setText(\"I am a label\");\n        frame.add(label);// 使用add方法添加组件到窗口中\n    }\n}\n\n```\n\n## 按钮\n\n![](https://static.meowrain.cn/i/2023/01/12/qs2cbw-3.gif)\n\n```java\npackage cn.javagui.awt;\n\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class Component {\n    public static void main(String[] args) {\n        Frame frame = new Frame();\n        frame.setTitle(\"组件\");\n        frame.setLayout(null);\n        frame.setSize(700, 500);\n        frame.setVisible(true);\n        frame.setBackground(Color.ORANGE);\n        Dimension screen_size = Toolkit.getDefaultToolkit().getScreenSize();// 获取屏幕粉白嫩绿\n        int middle_x = (int) (screen_size.getWidth() / 2 - frame.getWidth() / 2); // 中间横坐标\n        int middle_y = (int) (screen_size.getHeight() / 2 - frame.getHeight() / 2);// 中间纵坐标\n        frame.setLocation(middle_x, middle_y); // 设置窗口显示位置，显示再屏幕正中间\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.out.println(\"程序退出成功!\");\n                System.exit(0);\n            }\n        });\n\n        Label label = new Label(\"标签添加成功!\");\n        label.setFont(new Font(\"SimSong\", Font.BOLD, 20));\n        label.setBounds(20, 100, 200, 50);\n        label.setBackground(Color.YELLOW);\n\n        /* 按钮 */\n        Button button = new Button(\"我是按钮\");\n        button.setBounds(20, 50, 100, 50);\n        button.setFont(new Font(\"SimSong\", Font.BOLD, 20));\n        button.setBackground(Color.yellow);\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                frame.add(label);\n                System.out.println(\"标签添加成功\");\n            }\n        });\n        frame.add(button);\n\n    }\n}\n```\n\n## 文本域\n\n![](https://static.meowrain.cn/i/2023/01/12/r10fa7-3.gif)\n![](https://static.meowrain.cn/i/2023/01/12/r2mrlh-3.png)\n\n```java\npackage cn.javagui.awt;\n\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class Component {\n    public static void main(String[] args) {\n        Frame frame = new Frame();\n        frame.setTitle(\"组件\");\n        frame.setLayout(null);\n        frame.setSize(700, 500);\n        frame.setVisible(true);\n        frame.setBackground(Color.ORANGE);\n        Dimension screen_size = Toolkit.getDefaultToolkit().getScreenSize();// 获取屏幕粉白嫩绿\n        int middle_x = (int) (screen_size.getWidth() / 2 - frame.getWidth() / 2); // 中间横坐标\n        int middle_y = (int) (screen_size.getHeight() / 2 - frame.getHeight() / 2);// 中间纵坐标\n        frame.setLocation(middle_x, middle_y); // 设置窗口显示位置，显示再屏幕正中间\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.out.println(\"程序退出成功!\");\n                System.exit(0);\n            }\n        });\n\n        Label label = new Label();\n        label.setFont(new Font(\"SimSong\", Font.BOLD, 20));\n        label.setBounds(20, 100, 200, 50);\n        label.setBackground(Color.YELLOW);\n\n        // 文本框\n        TextField field = new TextField();\n        field.setBounds(20, 150, 200, 50);\n        field.setFont(new Font(\"SimSong\", Font.BOLD, 20));\n        frame.add(field);\n\n        /* 按钮 */\n        Button button = new Button(\"Click\");\n        button.setBounds(20, 50, 100, 50);\n        button.setFont(new Font(\"SimSong\", Font.BOLD, 20));\n        button.setBackground(Color.yellow);\n        button.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                String text = field.getText(); // 获取文本框中的内容\n                label.setText(text);// 把文本框中的内容放在label标签中\n                frame.add(label);// 把label标签加入到整个页面中\n                System.out.println(\"Info:  Label and text add successfully\");\n            }\n        });\n        frame.add(button);\n    }\n}\n\n```\n","tags":["java"],"categories":["Java","Java-GUi"]},{"title":"Java-GUI-监听器","url":"/2023/01/19/f172572c7d114592aaa804efa121761e/","content":"\n# 监听器\n\n我们可以为窗口添加一系列的监听器，监听器会监听窗口中发生的一些事件，比如我们点击关闭窗口，移动鼠标，鼠标点击等，当发生对应的事件时候，就会通知到对应的监听器进行处理，从而我们就能够再发生对应事件时候进行处理\n![](https://static.meowrain.cn/i/2023/01/12/p3xjkw-3.png)\n\n> 比如我们现在希望点击关闭按钮关闭当前的窗口,但是我们发现默认情况下实际上是关不掉的,因为我们没有对关闭事件进行处理,默认情况下对于这种点击时没有设定任何动作的,万一我们点了之后并不是要关闭窗口呢,要实现关闭窗口,我们可以使用`addXXXListener`来添加对应的事件监听器,比如窗口相关的操作那么就是`WindowListener`\n\n## 监听器实现点击X号关闭窗口\n\n![](https://static.meowrain.cn/i/2023/01/12/p86fvk-3.png)\n\n```java\npackage cn.javagui.awt;\n\nimport java.awt.*;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class Main {\n    public static void main(String[] args) {\n        Frame frame = new Frame();\n        frame.setTitle(\"第一个窗口程序\");\n        frame.setVisible(true); //窗口设置为可见\n        frame.setBackground(Color.ORANGE); //设置窗口背景颜色\n        frame.setSize(700,500); //使用setSize方法设定窗体大小\n        frame.setResizable(true);//设置窗口大小是否可以调整\n        frame.setAlwaysOnTop(true); //设置窗口是否始终展示在最前面\n        Dimension screen_size =  Toolkit.getDefaultToolkit().getScreenSize();//获取屏幕粉白嫩绿\n        int middle_x = (int) (screen_size.getWidth()/2 - frame.getWidth()/2); //中间横坐标\n        int middle_y = (int)(screen_size.getHeight() / 2-frame.getHeight() / 2);//中间纵坐标\n        frame.setLocation(middle_x,middle_y); //设置窗口显示位置，显示再屏幕正中间\n\n        /*监听器*/\n\n        //添加监听器\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                frame.dispose(); //关闭当前窗口\n                //或者使用System.exit(0);\n                System.out.println(\"窗口已经关闭!\");\n            }\n        });\n    }\n}\n\n```\n\n## 窗口常用事件\n\n![](https://static.meowrain.cn/i/2023/01/12/p9a4j5-3.png)\n\n## 键盘事件\n\n![](https://static.meowrain.cn/i/2023/01/12/pbsyu0-3.png)\n![](https://static.meowrain.cn/i/2023/01/12/pbuup3-3.png)\n\n```java\npackage cn.javagui.awt;\n\nimport java.awt.*;\nimport java.awt.event.KeyAdapter;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.WindowAdapter;\nimport java.awt.event.WindowEvent;\n\npublic class Main {\n    public static void main(String[] args) {\n        Frame frame = new Frame();\n        frame.setTitle(\"第一个窗口程序\");\n        frame.setVisible(true); //窗口设置为可见\n        frame.setBackground(Color.ORANGE); //设置窗口背景颜色\n        frame.setSize(700,500); //使用setSize方法设定窗体大小\n        frame.setResizable(true);//设置窗口大小是否可以调整\n        frame.setAlwaysOnTop(true); //设置窗口是否始终展示在最前面\n        Dimension screen_size =  Toolkit.getDefaultToolkit().getScreenSize();//获取屏幕粉白嫩绿\n        int middle_x = (int) (screen_size.getWidth()/2 - frame.getWidth()/2); //中间横坐标\n        int middle_y = (int)(screen_size.getHeight() / 2-frame.getHeight() / 2);//中间纵坐标\n        frame.setLocation(middle_x,middle_y); //设置窗口显示位置，显示再屏幕正中间\n\n        /*监听器*/\n\n        //添加监听器\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0);\n                System.out.println(\"窗口已经关闭!\");\n            }\n        });\n        frame.addKeyListener(new KeyAdapter() {\n            @Override\n            public void keyPressed(KeyEvent e) {\n                System.out.print(e.getKeyChar());\n            }\n        });\n    }\n}\n```\n\n### 常用事件\n\n![](https://static.meowrain.cn/i/2023/01/12/pbitz6-3.png)\n\n## 鼠标事件\n\n![](https://static.meowrain.cn/i/2023/01/12/pe4z0u-3.png)\n![](https://static.meowrain.cn/i/2023/01/12/pe8rma-3.png)\n\n```java\npackage cn.javagui.awt;\n\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Frame frame = new Frame();\n        frame.setTitle(\"第一个窗口程序\");\n        frame.setVisible(true); //窗口设置为可见\n        frame.setBackground(Color.ORANGE); //设置窗口背景颜色\n        frame.setSize(700, 500); //使用setSize方法设定窗体大小\n        frame.setResizable(true);//设置窗口大小是否可以调整\n        frame.setAlwaysOnTop(true); //设置窗口是否始终展示在最前面\n        Dimension screen_size = Toolkit.getDefaultToolkit().getScreenSize();//获取屏幕粉白嫩绿\n        int middle_x = (int) (screen_size.getWidth() / 2 - frame.getWidth() / 2); //中间横坐标\n        int middle_y = (int) (screen_size.getHeight() / 2 - frame.getHeight() / 2);//中间纵坐标\n        frame.setLocation(middle_x, middle_y); //设置窗口显示位置，显示再屏幕正中间\n\n        /*监听器*/\n\n        //添加监听器\n        frame.addWindowListener(new WindowAdapter() {\n            @Override\n            public void windowClosing(WindowEvent e) {\n                System.exit(0);\n                System.out.println(\"窗口已经关闭!\");\n            }\n        });\n        frame.addKeyListener(new KeyAdapter() {\n            @Override\n            public void keyPressed(KeyEvent e) {\n                System.out.print(e.getKeyChar());\n            }\n        });\n        frame.addMouseListener(new MouseAdapter() {\n            @Override\n            public void mouseClicked(MouseEvent e) {\n                System.out.println(\"鼠标位置\\nx:\" + e.getX() + \"\\t\" + \"y:\" + e.getY());\n            }\n        });\n    }\n\n}\n```\n","tags":["java"],"categories":["Java","Java-GUi"]},{"title":"Java-GUI-窗口配置","url":"/2023/01/19/f7310f53495a4e258159180b2ce529db/","content":"\n# 第一个窗口\n\n![](https://static.meowrain.cn/i/2023/01/12/p2nekp-3.png)\n想使用java创建窗口，我们要导入\n`import java.awt.*;`\n然后创建第一个窗口\n\n```java\npackage cn.javagui.awt;\n\nimport java.awt.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Frame frame = new Frame();\n        frame.setTitle(\"第一个窗口程序\");\n        frame.setVisible(true); //窗口设置为可见\n        frame.setBackground(Color.ORANGE); //设置窗口背景颜色\n        frame.setSize(700,500); //使用setSize方法设定窗体大小\n        frame.setResizable(true);//设置窗口大小是否可以调整\n        frame.setAlwaysOnTop(true); //设置窗口是否始终展示在最前面\n        Dimension screen_size =  Toolkit.getDefaultToolkit().getScreenSize();//获取屏幕粉白嫩绿\n        int middle_x = (int) (screen_size.getWidth()/2 - frame.getWidth()/2); //中间横坐标\n        int middle_y = (int)(screen_size.getHeight() / 2-frame.getHeight() / 2);//中间纵坐标\n        frame.setLocation(middle_x,middle_y); //设置窗口显示位置，显示再屏幕正中间\n        frame.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));\n    }\n}\n```\n","tags":["java"],"categories":["Java","Java-GUi"]},{"title":"Java 集合","url":"/2023/01/19/338f5f76a1914f72822772ea3026f220/","content":"\n# Java-集合\n\n## 集合框架图\n\n![image-20230107163106582](https://static.meowrain.cn/i/2023/01/07/qz38d1-3.png)\n\n## Collection接口和常用方法\n\n![img](https://static.meowrain.cn/i/2023/01/10/xdrrmk-3.png)\n\n![img](https://static.meowrain.cn/i/2023/01/10/xe3qtm-3.png)\n\n![image-20230107163003412](https://static.meowrain.cn/i/2023/01/07/qyh591-3.png)\n\n***\n\nCollection接口常用方法,以实现子类ArrayList来演示\n\n![image-20230107162811332](https://static.meowrain.cn/i/2023/01/07/qxc31c-3.png)\n\n```java\npackage cn.meowrain.collection_;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CollectionMethod {\n    @SuppressWarnings({\"all\"})\n    public static void main(String[] args) {\n        List list = new ArrayList();\n        list.add(\"jack\");\n        list.add(\"meowrain\");\n        list.add(\"hello\");\n        System.out.println(\"初始元素: \" + list);\n        System.out.println(\"--------------------\");\n        //用索引删除,返回的是删除的对象\n        //用对象名删除,返回的是一个布尔值,删除成功返回true,删除失败返回false\n        System.out.println(\"删除的元素是:\" + list.remove(0) + \" \" + \"\\n 当前的元素为:\" + list);\n        System.out.println(\"----------------------\");\n        System.out.println(\"删除状态:\" + list.remove(\"hello\") + \" \" + \"\\n 当前的元素为:\" + list);\n        System.out.println(\"----------------------\");\n        //size返回元素个数\n        System.out.println(\"当前List中的元素个数:\" + list.size());\n\n        //返回list中是否含有某元素\n        System.out.println(\"list中是否含有 meowrain 这个元素\" + list.contains(\"meowrain\"));\n        System.out.println(\"---------------------\");\n        //clean 清空整个表\n        System.out.println(\"接下来使用clear操作清空list\");\n        list.clear();\n        System.out.println(\"当前List中的元素个数:\" + list.size());\n\n        //isEmpty\n        System.out.println(\"判断当前表是否为空:\" + list.isEmpty());\n\n        //addAll添加多个元素\n        List list2 = new ArrayList();\n        list2.add(\"红楼梦\");\n        list2.add(\"三国\");\n        list2.add(\"nice\");\n        list.addAll(list2);\n        System.out.println(\"addAll后的list: \" + list);\n        System.out.println(\" --------------\");\n        //containsAll\n        System.out.println(\"containsAll\");\n        List list3 = new ArrayList();\n        list3.add(\"nice\");\n        list3.add(\"三国\");\n        list.containsAll(list3); // true\n\n        //removeAll\n        System.out.println(\"-------------\");\n        List list4 = new ArrayList();\n        list4.add(\"nice\");\n        list4.add(\"三国\");\n        list.removeAll(list4);\n        System.out.println(\"removeAll后的list: \" + list);\n\n    }\n}\n\n```\n\n![image-20230107165111166](https://static.meowrain.cn/i/2023/01/07/rb0y1j-3.png)\n\n## Collection接口遍历元素的方式\n\n### Iterator迭代器\n\n![image-20230107165224601](https://static.meowrain.cn/i/2023/01/07/rbp7m8-3.png)\n\n> 在调用`iterator.next()`方法之前必须调用iterator.hasNext()进行检测,若不调用,且下一条记录无效,直接调用`it.next()`会抛出`NoSuchElementException`异常\n>\n> ![image-20230107165859984](https://static.meowrain.cn/i/2023/01/07/rfhfr9-3.png)\n\n```java\npackage cn.meowrain.collection_;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n\npublic class CollectionIterator {\n    @SuppressWarnings({\"all\"})\n    public static void main(String[] args) {\n        Collection col = new ArrayList();\n        col.add(new Book(\"三国演义\",\"罗贯中\",10.1));\n        col.add(new Book(\"小李飞刀\",\"古龙\",5.1));\n        col.add(new Book(\"红楼梦\",\"曹雪芹\",34.6));\n//        System.out.println(\"col = \"+ col);\n        //现在希望能够遍历col集合\n        //先得到col对应的迭代器\n        Iterator iterator = col.iterator();\n        //使用while循环遍历即可\n        while(iterator.hasNext()){ //判断是否还有数据\n            //返回下一个元素,类型是Object\n            Object obj = iterator.next();\n            System.out.println(obj);\n        }\n        /*\n        *\n        *   Book{name='三国演义', author='罗贯中', price=10.1}\n            Book{name='小李飞刀', author='古龙', price=5.1}\n            Book{name='红楼梦', author='曹雪芹', price=34.6}\n        * */\n    }\n}\nclass Book {\n    private String name;\n    private String author;\n    private double price;\n\n    public Book(String name, String author, double price) {\n        this.name = name;\n        this.author = author;\n        this.price = price;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    @Override\n    public String toString() {\n        return \"Book{\" +\n                \"name='\" + name + '\\'' +\n                \", author='\" + author + '\\'' +\n                \", price=\" + price +\n                '}';\n    }\n}\n```\n\n![image-20230107170941425](https://static.meowrain.cn/i/2023/01/07/s9qjlv-3.png)\n\n### 增强for循环\n\n```java\n//增强for也能用在数组上\nint[] nums = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nfor (int num : nums) {\n    System.out.print(num + \" \");//1 2 3 4 5 6 7 8 9 10 \n}\n```\n\n在Collection集合上的应用\n\n```java\npackage cn.meowrain.collection_;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\npublic class CollectionFor {\n    @SuppressWarnings({\"all\"})\n    public static void main(String[] args) {\n        Collection col = new ArrayList();\n        col.add(new Book(\"三国演义\", \"罗贯中\", 10.1));\n        col.add(new Book(\"小李飞刀\", \"古龙\", 5.1));\n        col.add(new Book(\"红楼梦\", \"曹雪芹\", 34.6));\n\n        //使用增强for循环,for循环底层,仍然是迭代器,可以理解成简化版本的迭代器\n\n        for (Object book : col) {\n            System.out.println(book);\n        }\n        /*\n        * Book{name='三国演义', author='罗贯中', price=10.1}\n            Book{name='小李飞刀', author='古龙', price=5.1}\n            Book{name='红楼梦', author='曹雪芹', price=34.6}\n        *\n        * */\n\n        \n\n    }\n}\n\n```\n\n> ​       **快捷方式;输入I**![image-20230107171713183](https://static.meowrain.cn/i/2023/01/07/sec09w-3.png)\n>\n> ![image-20230107171747708](https://static.meowrain.cn/i/2023/01/07/sej6ly-3.png)\n\n## 课堂练习\n\n![image-20230107171914554](https://static.meowrain.cn/i/2023/01/07/sfj3gk-3.png)\n\n```java\npackage cn.meowrain.collection_;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class CollectionExercise {\n    public static void main(String[] args) {\n        Dog dog1 = new Dog(\"mike\", 1);\n        Dog dog2 = new Dog(\"john\", 4);\n        Dog dog3 = new Dog(\"cookie\", 5);\n        List<Dog> list = new ArrayList<>();\n        list.add(dog1);\n        list.add(dog2);\n        list.add(dog3);\n        //迭代器方法\n        System.out.println(\"----------普通迭代器方法----------\");\n        Iterator iterator = list.iterator();\n        while (iterator.hasNext()) {\n            Object next =  iterator.next();\n            System.out.println(next);\n        }\n\n        //增强for循环方法\n        System.out.println(\"----------增强for循环方法----------\");\n        for (Dog dog : list) {\n            System.out.println(dog);\n        }\n    }\n}\n\nclass Dog {\n    String name;\n    int age;\n\n    public Dog(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Dog{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n```\n\n![image-20230107172607316](https://static.meowrain.cn/i/2023/01/07/sjnk17-3.png)\n\n## List接口\n\n> List接口是Collection接口的子接口\n> ![](https://static.meowrain.cn/i/2023/01/07/sqxjlx-3.png)\n\n```java\npackage cn.meowrain.collection_;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\npublic class List_ {\n    public static void main(String[] args) {\n        List list = new ArrayList();\n        list.add(\"jack\");\n        list.add(\"tom\");\n        list.add(\"mary\");\n        list.add(\"hsp\");\n        list.add(\"meowrain\");\n        list.add(\"meowrain\"); //可以重复\n        System.out.println(list);//顺序表\n        //索引从0开始\n        System.out.println(list.get(1));\n\n    }\n}\n```\n\nList接口的常用方法:\n![](https://static.meowrain.cn/i/2023/01/07/tzjyku-3.png)\n\n### List接口常用方法\n\n![](https://static.meowrain.cn/i/2023/01/07/u5grlg-3.png)\n\n```java\npackage cn.meowrain.collection_;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class ListExercise {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<String>();\n        for (int i = 0; i < 12; i++) {\n            list.add(\"hello\" + i);\n        }\n        list.add(1, \"韩顺平教育\");\n        String num5_string = list.get(4);\n        list.remove(5);\n        list.set(6, \"meowrainyyds\");\n        Iterator<String> iterator = list.iterator();\n        System.out.println(\"第5个元素:\" + num5_string);\n        while (iterator.hasNext()) {\n            Object next = iterator.next();\n            System.out.println(next);\n        }\n\n\n    }\n}\n\n```\n\n### List的三种遍历方式\n\n![](https://static.meowrain.cn/i/2023/01/07/ua5nop-3.png)\n\n```java\npackage cn.meowrain.collection_;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Iterator;\npublic class ListFor {\n    public static void main(String[] args) {\n        //iterator\n        List<String> list = new ArrayList<String>();\n        for (int i = 0; i < 10; i++) {\n            list.add(\"nice\" + i);\n        }\n        //遍历\n        System.out.println(\"==========Iterator============\");\n        Iterator<String> iterator = list.iterator();\n        while (iterator.hasNext()) {\n            String next =  iterator.next();\n            System.out.println(next);\n        }\n        //增强for循环\n        System.out.println(\"==========增强for============\");\n        for (String s : list) {\n            System.out.println(s);\n        }\n        //普通for循环\n        System.out.println(\"==========普通for循环============\");\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(list.get(i));\n        }\n\n\n\n    }\n}\n\n```\n\n### 练习题\n\n![](https://static.meowrain.cn/i/2023/01/07/ullgjl-3.png)\n\nArrayList方法\n`ListExercise2.java`\n\n```java\npackage cn.meowrain.collection_;\n\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ArrayList;\npublic class ListExercise2 {\n    @SuppressWarnings({\"all\"})\n    public static void main(String[] args) {\n        List<Book> list = new ArrayList<>();\n        list.add(new Book(\"西游记\", \"吴承恩\", 100));\n        list.add(new Book(\"三国演义\", \"罗贯中\", 10.1));\n        list.add(new Book(\"小李飞刀\", \"古龙\", 5.1));\n        list.add(new Book(\"红楼梦\", \"曹雪芹\", 34.6));\n        list.add(new Book(\"三体\", \"刘慈欣\", 51));\n\n        //排序\n        Bubble_sort(list);\n        //遍历输出\n        Iterator<Book> iterator = list.iterator();\n        while (iterator.hasNext()) {\n            Book next = iterator.next();\n            System.out.println(next);\n        }\n    }\n\n    public static void Bubble_sort(List<Book> list) {\n        //遍历list\n        int size = list.size();\n        for (int i = 0; i < size - 1; i++) {\n            for (int j = 0; j < size - 1 - i; j++) {\n                //取出对象\n                Book book1 = list.get(j);\n                Book book2 = list.get(j + 1);\n                if (book1.getPrice() > book2.getPrice()) {\n                    list.set(j, book2);\n                    list.set(j + 1, book1);\n                }\n\n            }\n        }\n    }\n}\n\n```\n\nBook.java\n\n```java\npackage cn.meowrain.collection_;\n\npublic class Book {\n    private String name;\n    private String author;\n    private double price;\n\n    public Book(String name, String author, double price) {\n        this.name = name;\n        this.author = author;\n        this.price = price;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    @Override\n    public String toString() {\n        return \"Book{\" +\n                \"书名='\" + name + '\\'' +\n                \", 作者='\" + author + '\\'' +\n                \", 价格=\" + price +\n                '}';\n    }\n\n}\n```\n\n> 输出结果\n> ![](https://static.meowrain.cn/i/2023/01/07/vto1ew-3.png)\n\n## ArrayList注意事项\n\n![](https://static.meowrain.cn/i/2023/01/07/vuu4i7-3.png)\n\n> ArrayList是线程不安全的,可以看源码,没有synchronized\n\n## ArrayList底层结构和源码分析\n\n![](https://static.meowrain.cn/i/2023/01/07/w09s7r-3.png)\n\n![](https://static.meowrain.cn/i/2023/01/07/xwszqp-3.png)\n![](https://static.meowrain.cn/i/2023/01/07/yuifyu-3.png)\n\n![image-20230110165227115](https://static.meowrain.cn/i/2023/01/10/rbqcn1-3.png)\n\n![image-20230110165335041](https://static.meowrain.cn/i/2023/01/10/rcd33v-3.png)\n\n## Vector源码剖析\n\n![image-20230110165852359](https://static.meowrain.cn/i/2023/01/10/rffyrc-3.png)\n\n### Vector和ArrayList的区别\n\n![](https://static.meowrain.cn/i/2023/01/10/s5jzmn-3.png)\n\n### Vector底层\n\n![image-20230110170855860](https://static.meowrain.cn/i/2023/01/10/s987c8-3.png)\n\n```java\npackage cn.meowrain.collection_;\n\nimport java.util.Vector;\n\npublic class Vector_ {\n    public static void main(String[] args) {\n        Vector<Number> vector = new Vector<>();\n        for (int i = 0; i < 10; i++) {\n            vector.add(i);\n        }\n        System.out.println(vector);\n    }\n}\n\n```\n\n### ArrayList和LinkedList的区别\n\n![image-20230110171823557](https://static.meowrain.cn/i/2023/01/10/sf030p-3.png)\n\n## Set接口和常用方法\n\n### Set接口基本介绍\n\n1.  无序\n2.  不允许重复元素,最多包含一个null\n3.  ![image-20230110172050327](https://static.meowrain.cn/i/2023/01/10/sgc7y2-3.png)\n\n### Set接口常用方法\n\n和 List 接口一样, Set 接口也是 Collection 的子接口，因此，常用方法和 Collection 接口一样\n\n### Set接口的遍历方式\n\n![image-20230110172126197](https://static.meowrain.cn/i/2023/01/10/sgsjcb-3.png)\n\n### Set 接口的常用方法举例子\n\n```java\npackage cn.meowrain.collection_;\n\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class SetMethod {\n    public static void main(String[] args) {\n        /*\n        * //1. 以 Set 接口的实现类 HashSet 来讲解 Set 接口的方法\n            //2. set 接口的实现类的对象(Set 接口对象), 不能存放重复的元素, 可以添加一个 null\n            //3. set 接口对象存放数据是无序(即添加的顺序和取出的顺序不一致)\n            //4. 注意：取出的顺序的顺序虽然不是添加的顺序，但是他的固定*/\n        Set<String> set = new HashSet<>();\n        set.add(\"meow\");\n        set.add(\"neko\");\n        set.add(\"meow\");\n        set.add(null);\n        set.add(null);\n        System.out.println(set);\n\n\n        System.out.println(\"==========Iterator==========\");\n        //遍历:\n        //方式一: Iterator\n        Iterator<String> iterator = set.iterator();\n        while (iterator.hasNext()){\n            String next = iterator.next();\n            System.out.println(next);\n        }\n\n        System.out.println(\"==========增强for循环==========\");\n        ////方式 2: 增强for循环\n        for (String s : set) {\n            System.out.println(s);\n        }\n\n/*\n*\n*\n\n* [null, meow, neko]\n==========Iterator==========\nnull\nmeow\nneko\n==========增强for循环==========\nnull\nmeow\nneko\n*/\n    }\n}\n\n```\n\n### Set 接口实现类-HashSet\n\n![image-20230110172946115](https://static.meowrain.cn/i/2023/01/10/slodlh-3.png)\n\n### HashSet 案例说明\n\n```java\npackage cn.meowrain.collection_;\nimport java.util.Set;\nimport java.util.HashSet;\npublic class HashSet_ {\n    public static void main(String[] args) {\n        HashSet set = new HashSet();\n        //说明\n        //1. 在执行 add 方法后，会返回一个 boolean 值\n        //2. 如果添加成功，返回 true, 否则返回 false\n        //3. 可以通过 remove 指定删除哪个对象\n        System.out.println(set.add(\"meow\")); // True\n        System.out.println(set.add(\"neko\"));// True\n        System.out.println(set.add(\"jack\"));// True\n        System.out.println(set.add(\"mmm\"));// True\n        System.out.println(set.add(\"rose\"));// True\n        //当我们重复添加元素的时候\n        System.out.println(set.add(\"meow\"));//false\n\n        //当我们添加对象的时候\n        System.out.println(set.add(new Dog(\"大黄\",3)));// True\n        System.out.println(set.add(new Dog(\"大黄\",3)));// True\n\n        System.out.println(\"set = \" + set); //set = [meow, neko, Dog{name='大黄', age=3}, rose, Dog{name='大黄', age=3}, mmm, jack]\n\n    }\n}\nclass  Dog_Set {\n    String name;\n    int age;\n\n    public Dog_Set(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n    @Override\n    public String toString() {\n        return \"Dog_Set{\" +\n            \"name='\" + name + '\\'' +\n            \", age=\" + age +\n            '}';\n    }\n}\n```\n\n### HashSet 练习\n\n![image-20230110190037271](https://static.meowrain.cn/i/2023/01/10/vffmc4-3.png)\n\n```java\npackage cn.meowrain.collection_;\n\nimport java.util.HashSet;\nimport java.util.Objects;\n\npublic class HashSetExercise {\n    public static void main(String[] args) {\n        HashSet hashSet = new HashSet();\n        hashSet.add(new Employee(\"milan\",10));\n        hashSet.add(new Employee(\"smith\",29));\n        hashSet.add(new Employee(\"milan\",10));\n        System.out.println(\"Hashset = \" + hashSet);\n    }\n}\nclass Employee {\n    String name;\n    int age;\n\n    public Employee(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Employee{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Employee employee = (Employee) o;\n        return age == employee.age && Objects.equals(name, employee.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name, age);\n    }\n}\n```\n\n![image-20230110191936140](https://static.meowrain.cn/i/2023/01/10/vqqoeo-3.png)\n\n```java\npackage cn.meowrain.collection_;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Objects;\n\npublic class HashSetExercise2 {\n    public static void main(String[] args) {\n        HashSet hashset = new HashSet();\n        hashset.add(new Employee2(\"milan\",1230.9, new MyDate(2001,12,3)));\n        hashset.add(new Employee2(\"meowrain\",10000,new MyDate(2003,12,20)));\n        hashset.add(new Employee2(\"milan\",2300.9, new MyDate(2001,12,3)));\n        Iterator<Employee2> iter = hashset.iterator();\n        while (iter.hasNext()) {\n            Employee2 next =  iter.next();\n            System.out.println(next);\n        }\n\n    }\n}\nclass Employee2 {\n    private String name;\n    private double sal;\n    private MyDate birthday;\n\n    public Employee2(String name, double sal, MyDate birthday) {\n        this.name = name;\n        this.sal = sal;\n        this.birthday = birthday;\n    }\n\n    @Override\n    public String toString() {\n        return \"Employee2{\" +\n                \"name='\" + name + '\\'' +\n                \", sal=\" + sal +\n                \", birthday=\" + birthday +\n                '}';\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Employee2 employee2 = (Employee2) o;\n        return Objects.equals(name, employee2.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name);\n    }\n}\nclass MyDate {\n    public int year;\n    public int month;\n    public int day;\n\n    public MyDate(int year, int month, int day) {\n        this.year = year;\n        this.month = month;\n        this.day = day;\n    }\n\n    @Override\n    public String toString() {\n        return \"MyDate{\" +\n                \"year=\" + year +\n                \", month=\" + month +\n                \", day=\" + day +\n                '}';\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        MyDate myDate = (MyDate) o;\n        return year == myDate.year && month == myDate.month && day == myDate.day;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(year, month, day);\n    }\n}\n```\n\n### LinkedHashSet\n\n![image-20230110193145926](https://static.meowrain.cn/i/2023/01/10/vxy0jc-3.png)\n\n![image-20230110193319078](https://static.meowrain.cn/i/2023/01/10/vyyvd1-3.png)\n\n```java\npackage cn.meowrain.collection_;\nimport java.util.LinkedHashSet;\nimport java.util.Objects;\n\npublic class LinkedHashSet_ {\n    public static void main(String[] args) {\n        LinkedHashSet linkedHashSet = new LinkedHashSet();\n        linkedHashSet.add(new Car(\"奥拓\", 1000));//OK\n        linkedHashSet.add(new Car(\"奥迪\", 300000));//OK\n        linkedHashSet.add(new Car(\"法拉利\", 10000000));//OK\n        linkedHashSet.add(new Car(\"奥迪\", 300000));//加入不了\n        linkedHashSet.add(new Car(\"保时捷\", 70000000));//OK\n        linkedHashSet.add(new Car(\"奥迪\", 300000));//加入不了\n        for (Object o : linkedHashSet) {\n            System.out.println(o);\n        }\n    }\n}\nclass Car {\n    private String name;\n    private double price;\n\n    public Car(String name, double price) {\n        this.name = name;\n        this.price = price;\n    }\n\n    @Override\n    public String toString() {\n        return \"Car{\" +\n                \"name='\" + name + '\\'' +\n                \", price=\" + price +\n                '}';\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Car car = (Car) o;\n        return Double.compare(car.price, price) == 0 && Objects.equals(name, car.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(name, price);\n    }\n}\n```\n\n## Map接口和常用方法\n\n### Map接口实现类的特点\n\n![image-20230110201451962](https://static.meowrain.cn/i/2023/01/10/xbe8ux-3.png)\n\n![image-20230110202156326](https://static.meowrain.cn/i/2023/01/10/xfkznt-3.png)\n\n在Map中，这些映射关系被存储为键值对，我们先来看看Map接口中定义了哪些操作：\n\n```java\n//Map并不是Collection体系下的接口，而是单独的一个体系，因为操作特殊\n//这里需要填写两个泛型参数，其中K就是键的类型，V就是值的类型，比如上面的学生信息，ID一般是int，那么键就是Integer类型的，而值就是学生信息，所以说值是学生对象类型的\npublic interface Map<K,V> {\n    //-------- 查询相关操作 --------\n  \n  \t//获取当前存储的键值对数量\n    int size();\n\n    //是否为空\n    boolean isEmpty();\n\n    //查看Map中是否包含指定的键\n    boolean containsKey(Object key);\n\n    //查看Map中是否包含指定的值\n    boolean containsValue(Object value);\n\n    //通过给定的键，返回其映射的值\n    V get(Object key);\n\n    //-------- 修改相关操作 --------\n\n    //向Map中添加新的映射关系，也就是新的键值对\n    V put(K key, V value);\n\n    //根据给定的键，移除其映射关系，也就是移除对应的键值对\n    V remove(Object key);\n\n\n    //-------- 批量操作 --------\n\n    //将另一个Map中的所有键值对添加到当前Map中\n    void putAll(Map<? extends K, ? extends V> m);\n\n    //清空整个Map\n    void clear();\n\n\n    //-------- 其他视图操作 --------\n\n    //返回Map中存放的所有键，以Set形式返回\n    Set<K> keySet();\n\n    //返回Map中存放的所有值\n    Collection<V> values();\n\n    //返回所有的键值对，这里用的是内部类Entry在表示\n    Set<Map.Entry<K, V>> entrySet();\n\n    //这个是内部接口Entry，表示一个键值对\n    interface Entry<K,V> {\n        //获取键值对的键\n        K getKey();\n\n        //获取键值对的值\n        V getValue();\n\n        //修改键值对的值\n        V setValue(V value);\n\n        //判断两个键值对是否相等\n        boolean equals(Object o);\n\n        //返回当前键值对的哈希值\n        int hashCode();\n\n        ...\n    }\n\n    ...\n}\n```\n\n测试：\n\n```java\npackage cn.meowrain.collection_;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Map_ {\n    public static void main(String[] args) {\n        Map<Integer, String> map = new HashMap<>();\n        map.put(1, \"meowrian\");\n        map.put(2, \"mike\");\n        System.out.println(map.get(1)); //meowrian\n        map.remove(2);\n        map.remove(1);\n        System.out.println(map.isEmpty());//        true\n    }\n}\n\n```\n\n> 注意，Map中无法添加相同的键，同样的键只能存在一个，即使值不同。如果出现键相同的情况，那么会覆盖掉之前的\n>\n> ```java\n> package cn.meowrain.collection_;\n>\n> import java.util.HashMap;\n> import java.util.Map;\n>\n> public class Map_ {\n>  public static void main(String[] args) {\n>      Map<Integer, String> map = new HashMap<>();\n>      map.put(1, \"meowrian\");\n>      map.put(1,\"meowrain\");\n>      map.remove(1);\n>      System.out.println(map.isEmpty()); // true\n>  }\n> }\n>\n> ```\n\n> 为了防止意外将之前的键值对覆盖掉，我们可以使用：`putIfAbsent`\n>\n> ```java\n> package cn.meowrain.collection_;\n>\n> import java.util.HashMap;\n> import java.util.Map;\n>\n> public class Map_ {\n>  public static void main(String[] args) {\n>      Map<Integer, String> map = new HashMap<>();\n>      map.put(1, \"小明\");\n>      map.putIfAbsent(1, \"小红\");   //Java8新增操作，只有在不存在相同键的键值对时才会存放\n>      System.out.println(map.get(1)); //小明\n>  }\n> }\n>\n> ```\n\n> 还有，我们在获取一个不存在的映射时，默认会返回null作为结果：\n>\n> ```java\n> package cn.meowrain.collection_;\n>\n> import java.util.HashMap;\n> import java.util.Map;\n>\n> public class Map_ {\n>  public static void main(String[] args) {\n>      Map<Integer, String> map = new HashMap<>();\n>      map.put(1, \"小明\");\n>      System.out.println(map.get(2)); //null\n>  }\n> }\n>\n> ```\n>\n> 我们也可以为这种情况添加一个预备方案，当Map中不存在时，可以返回一个备选的返回值：\n>\n> ```java\n> public static void main(String[] args) {\n>  Map<Integer, String> map = new HashMap<>();\n>  map.put(1, \"小明\");\n>  System.out.println(map.getOrDefault(3, \"备胎\"));   //Java8新增操作，当不存在对应的键值对时，返回备选方案\n> }\n> ```\n\n> 同样的，因为HashMap底层采用哈希表实现，所以不维护顺序，我们在获取所有键和所有值时，可能会是乱序的：\n>\n> ```java\n> package cn.meowrain.collection_;\n>\n> import java.util.HashMap;\n> import java.util.Map;\n>\n> public class Map_ {\n>  public static void main(String[] args) {\n>      Map<String , String> map = new HashMap<>();\n>      map.put(\"0\", \"十七张\");\n>      map.put(\"+\", \"牌\");\n>      map.put(\"P\", \"你能秒我\");\n>      System.out.println(map);\n>      System.out.println(map.keySet());\n>      System.out.println(map.values());\n>  }\n> }\n>\n> ```\n>\n> ![image-20230110203036817](https://static.meowrain.cn/i/2023/01/10/xkti3d-3.png)\n\n> 如果需要维护顺序，我们同样可以使用`LinkedHashMap`，它的内部对插入顺序进行了维护：\n>\n> ```java\n> public static void main(String[] args) {\n>  Map<String , String> map = new LinkedHashMap<>();\n>  map.put(\"0\", \"十七张\");\n>  map.put(\"+\", \"牌\");\n>  map.put(\"P\", \"你能秒我\");\n>  System.out.println(map);\n>  System.out.println(map.keySet());\n>  System.out.println(map.values());\n> }\n> ```\n>\n> ![image-20230110203402688](https://static.meowrain.cn/i/2023/01/10/xmzzcw-3.png)\n\n实际上Map的使用还是挺简单的，我们接着来看看Map的底层是如何实现的，首先是最简单的HashMap，我们前面已经说过了，它的底层采用的是哈希表，首先回顾我们之前学习的哈希表，我们当时说了，哈希表可能会出现哈希冲突，这样保存的元素数量就会存在限制，而我们可以通过连地址法解决这种问题，最后哈希表就长这样了：\n\n![image-20230110203144179](https://static.meowrain.cn/i/2023/01/10/xlgr93-3.png)\n\n***\n\n![image-20230110212121437](https://static.meowrain.cn/i/2023/01/10/z2wz55-3.png)\n\n```java\npackage cn.meowrain.collection_;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Iterator;\npublic class MapExercise {\n    public static void main(String[] args) {\n        HashMap<Integer,Employee_2> map = new HashMap<>();\n        map.put(1,new Employee_2(\"meowrain\",18,18900));\n        map.put(2,new Employee_2(\"alice\",19,17000));\n        map.put(3,new Employee_2(\"mike\",20,20000));\n        map.put(4,new Employee_2(\"john\",29,34000));\n        map.put(5, new Employee_2(\"danish\",34,40000));\n        System.out.println(\"=====使用for each循环实现  ======\");\n        for(Map.Entry<Integer,Employee_2> entry : map.entrySet()){\n            if(entry.getValue().salary > 18000){\n                System.out.println(entry);\n            }\n        }\n        System.out.println(\"=====使用iterator实现=====\");\n        Iterator<Map.Entry<Integer,Employee_2>> iterator = map.entrySet().iterator();\n        while (iterator.hasNext()) {\n            Map.Entry<Integer, Employee_2> next =  iterator.next();\n            if(next.getValue().salary > 18000){\n                System.out.println(next);\n            }\n\n        }\n\n\n\n    }\n}\nclass Employee_2 {\n    String name;\n    int age;\n    double salary;\n    public Employee_2(String name, int age,double salary) {\n        this.name = name;\n        this.age = age;\n        this.salary = salary;\n    }\n\n    @Override\n    public String toString() {\n        return \"Employee_2{\" +\n            \"name='\" + name + '\\'' +\n            \", age=\" + age +\n            \", salary=\" + salary +\n            '}';\n    }\n}\n```\n","tags":["java"],"categories":["Java","JAVASE"]},{"title":"Java泛型","url":"/2023/01/19/49756fe6e6cc44f88ee3cc213ec4bd67/","content":"\n# Java-泛型\n\n## 文章出处:\n\n参考+摘抄: <https://www.yuque.com/qingkongxiaguang/javase/rk6if6#dcab57b7>\n\n[青空の霞光](https://www.yuque.com/qingkongxiaguang)\n\n![image-20230104163636308](https://static.meowrain.cn/i/2023/01/04/r28zb5-3.png)\n\n<iframe src=\"//player.bilibili.com/player.html?aid=900707014&bvid=BV1YP4y1o75f&cid=853011802&page=73\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" height=\"400\" width=\"600\"> </iframe>\n\n## 泛型类\n\n泛型其实就一个待定类型，我们可以使用一个特殊的名字表示泛型，泛型在定义时并不明确是什么类型，而是需要到使用时才会确定对应的泛型类型。\n\n我们可以将一个类定义为一个泛型类\n\n```java\npackage cn.meowrain.generic;\n\npublic class Main {\n    public static void main(String[] args) {\n        Score<String> score01 = new Score<String>(\"meow\",13,\"优秀\");\n        String value01 = score01.score;\n        System.out.println(value01); // 优秀\n        Score<Integer> score02 = new Score<Integer>(\"meowrain\",18,100);\n        int value02 = score02.score;\n        System.out.println(value02); // 100\n\n    }\n}\nclass Score<T> {//泛型类需要使用<>，我们需要在里面添加1 - N个类型\n    String name;\n    int age;\n    T score;//T会根据使用时提供的类型自动变成对应类型\n\n    public Score(String name, int age, T score) {\n        //这里T可以是任何类型，但是一旦确定，那么就不能修改了\n        this.name = name;\n        this.age = age;\n        this.score = score;\n    }\n}\n```\n\n泛型将数据类型的确定控制在了编译阶段，在编写代码的时候就能明确泛型的类型，如果类型不符合，将无法通过编译！因为是具体使用对象时才会明确具体类型，所以说静态方法中是不能用的：\n\n![](https://static.meowrain.cn/i/2023/01/04/kif236-3.png)\n\n> 只不过这里需要注意一下，我们在方法中使用待确定类型的变量时，因为此时并不明确具体是什么类型，那么默认会认为这个变量是一个Object类型的变量，因为无论具体类型是什么，一定是Object类的子类：\n>\n> ![image-20230104124334991](https://static.meowrain.cn/i/2023/01/04/kk990j-3.png)\n\n我们可以对其进行强制类型转换，但是实际上没多大必要：\n\n```java\npublic void test(T t){\n    String str = (String)t; //向下转型,Object转型为String类型\n}\n\n```\n\n因为泛型本身就是对某些待定类型的简单处理，如果都明确要使用什么类型了，那大可不必使用泛型。还有，不能通过这个不确定的类型变量就去直接创建对象和对应的数组：\n\n![image-20230104125217426](https://static.meowrain.cn/i/2023/01/04/kpif0l-3.png)\n\n注意，具体类型不同的泛型类变量，不能使用不同的变量进行接收：![image-20230104125539437](https://static.meowrain.cn/i/2023/01/04/krfj5k-3.png)\n\n### `?`通配符\n\n如果要让某个变量支持引用确定了任意类型的泛型，那么可以使用`?`通配符：\n\n```java\npackage cn.meowrain.generic;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        Test<?> test = new Test<>(\"meowrain\",18,98.5);\n        System.out.println(test.name + \" \" + test.age + \" \" + test.score);\n    }\n}\nclass Test<T> {\n    T name;\n    T age;\n    T score;\n\n    public Test(T name, T age, T score) {\n        this.name = name;\n        this.age = age;\n        this.score = score;\n    }\n}\n\n```\n\n### 定义多个泛型变量\n\n当然，`泛型变量`不止可以只有一个，如果需要使用多个的话，我们也可以定义多个：\n\n```java\npackage cn.meowrain.generic;\n\nimport cn.meowrain.Poly.poly04.Test;\n\npublic class Main {\n    public static void main(String[] args) {\n        Score<String,Integer,Double> score = new Score<>(\"meowrain\",17,98.5);\n\n    }\n}\nclass Score<A,B,C> {//泛型类需要使用<>，我们需要在里面添加1 - N个类型\n    A name;\n    B age;\n    C score;//T会根据使用时提供的类型自动变成对应类型\n\n    public Score(A name, B age, C score) {\n        this.name = name;\n        this.age = age;\n        this.score = score;\n    }\n}\n```\n\n只要是在类中，都可以使用类型变量：\n\n```java\npublic class Test<T>{\n    \n    private T value;\n\n    public void setValue(T value) {\n        this.value = value;\n    }\n\n    public T getValue() {\n        return value;\n    }\n}\n```\n\n### 注意事项\n\n只不过，**泛型只能确定为一个引用类型**，基本类型是不支持的：\n\n![image-20230104154133059](https://static.meowrain.cn/i/2023/01/04/pho761-3.png)\n\n**如果要存放基本数据类型的值，我们只能使用对应的包装类：**\n\n```java\npackage cn.meowrain.generic;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        Test<Integer> test = new Test<Integer>();\n        test.value = 10;\n        System.out.println(test.value);\n    }\n}\n\nclass Test<T> {\n    T value;\n}\n\n```\n\n![image-20230104154222524](https://static.meowrain.cn/i/2023/01/04/pi7bo8-3.png)\n\n当然，如果是基本类型的数组，因为数组本身是引用类型，所以说是可以的：\n\n```java\npackage cn.meowrain.generic;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        Test<int[]> test = new Test<>();\n        test.value = new int[]{1, 2, 3, 4, 5, 6};\n        for(int i = 0;i<test.value.length;i++){\n            System.out.println(test.value[i]);\n        }\n    }\n}\n\nclass Test<T> {\n    T value;\n}\n\n```\n\n![image-20230104155119155](https://static.meowrain.cn/i/2023/01/04/pnjac2-3.png)\n\n## 泛型与多态\n\n> 不只是类，包括接口、抽象类，都是可以支持泛型的：\n>\n> ```java\n> interface Study<T> {\n>  T learn();\n> }\n> ```\n>\n> 当子类实现此接口时，我们可以选择在实现类明确泛型类型，或是继续使用此泛型让具体创建的对象来确定类型：\n>\n> ```java\n> package cn.meowrain.generic;\n>\n>\n> public class Main {\n>  public static void main(String[] args) {\n>      Student stu1 = new Student(\"xiaoming\");\n>      System.out.println(stu1.learn());//xiaoming is learning\n>  }\n> }\n>\n> class Student implements Study<String> {\n>  //在实现接口或是继承父类时，如果子类是一个普通类，那么可以直接明确对应类型\n>  String name;\n>\n>  public Student(String name) {\n>      this.name = name;\n>  }\n>\n>  @Override\n>  public String learn() {\n>      return (this.name + \" is learning\");\n>  }\n> }\n>\n> interface Study<T> {\n>  T learn();\n> }\n> ```\n>\n> 继续使用泛型:\n>\n> ```java\n> package cn.meowrain.generic;\n>\n>\n> public class Main {\n>  public static void main(String[] args) {\n>      Student<String> stu1 = new Student<>(\"xiaoming\");\n>      System.out.println(stu1.learn());//null\n>  }\n> }\n>\n> class Student<T> implements Study<T> {\n>  String name;\n>\n>  public Student(String name) {\n>      this.name = name;\n>  }\n>\n>  @Override\n>  public T learn() {\n>      ///让子类继续为一个泛型类，那么可以不用明确\n>      return null;\n>  }\n> }\n>\n> interface Study<T> {\n>  T learn();\n> }\n> ```\n>\n> 继承也是同样的\n>\n> ```java\n> package cn.meowrain.generic;\n>\n>\n> public class Main {\n>  public static void main(String[] args) {\n>      Student stu1 = new Student(\"xiaoming\",17,\"game\",\"girls\",99);\n>      System.out.println(stu1);\n>  }\n> }\n>\n> class Human<T> {\n>  String name;\n>  int age;\n>  String hobby;\n>  T like;\n>\n>  public Human(String name, int age, String hobby, T like) {\n>      this.name = name;\n>      this.age = age;\n>      this.hobby = hobby;\n>      this.like = like;\n>  }\n>\n> }\n> class Student extends Human<String>{\n>  int score;\n>\n>  public Student(String name, int age, String hobby, String like, int score) {\n>      super(name, age, hobby, like);\n>      this.score = score;\n>  }\n>\n>  @Override\n>  public String toString() {\n>      return \"Student{\" +\n>          \"score=\" + score +\n>          \", name='\" + name + '\\'' +\n>          \", age=\" + age +\n>          \", hobby='\" + hobby + '\\'' +\n>          \", like=\" + like +\n>          '}';\n>  }\n> }\n> ```\n\n### 泛型方法\n\n当然，类型变量并不是只能在泛型类中才可以使用，我们也可以定义泛型方法。\n\n当某个方法（无论是是静态方法还是成员方法）需要接受的参数类型并不确定时，我们也可以使用泛型来表示：\n\n```java\npackage cn.meowrain.generic;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        String str = test(\"mike\");\n        System.out.println(str);\n    }\n\n    public static <T> T test(T t) { ////在返回值类型前添加<>并填写泛型变量表示这个是一个泛型方法\n        //返回类型为T ,参数类型为T\n        return t;\n\n    }\n}\n\n\n```\n\n泛型方法会在使用时自动确定泛型类型，比如上我们定义的是类型T作为参数，同样的类型T作为返回值，实际传入的参数是一个字符串类型的值，那么T就会自动变成String类型，因此返回值也是String类型。\n\n```java\npackage cn.meowrain.generic;\n\n\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] strings = new String[1];\n        Main main = new Main();\n        main.add(strings,\"hello\");\n        System.out.println(Arrays.toString(strings));//[hello]\n        Integer[] arr = new Integer[1];\n        main.add(arr,1);\n        System.out.println(Arrays.toString(arr));//[1]\n    }\n\n    public <T> void add(T[] arr, T t) {\n        arr[0] = t;\n    }\n}\n\n\n```\n\n### 泛型在工具类中的应用\n\n实际上泛型方法在很多工具类中也有，比如说Arrays的排序方法：\n\n```java\npackage cn.meowrain.generic;\n\n\nimport java.util.Arrays;\nimport java.util.Comparator;\n\npublic class Main {\n    public static void main(String[] args) {\n        Integer[] arr = {1, 4, 5, 2, 6, 3, 0, 7, 9, 8};\n        //从小到大排列\n        Arrays.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });//[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        System.out.println(Arrays.toString(arr));\n        \n        \n        //从大到小排序\n        Arrays.sort(arr, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o2 - o1;\n            }\n        });//[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n        System.out.println(Arrays.toString(arr));\n    }\n\n}\n\n\n```\n\n因为我们前面学习了Lambda表达式，像这种只有一个方法需要实现的接口，直接安排了：\n\n```java\npackage cn.meowrain.generic;\n\n\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        Integer[] arr = {1, 4, 5, 2, 6, 3, 0, 7, 9, 8};\n        //从小到大排列\n        Arrays.sort(arr, (o1, o2) -> o1 - o2);//[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n        System.out.println(Arrays.toString(arr));\n\n\n        //从大到小排序\n        Arrays.sort(arr, (o1, o2) -> o2 - o1);//[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n        System.out.println(Arrays.toString(arr));\n    }\n\n}\n\n\n```\n\n包括数组复制方法：\n\n```java\npackage cn.meowrain.generic;\n\n\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] arr = {\"aaa\", \"bbb\", \"ccc\"};\n        String[] newArr = Arrays.copyOf(arr, arr.length);\n        System.out.println(Arrays.toString(newArr));//[aaa, bbb, ccc]\n\n    }\n\n}\n\n\n```\n\n### 泛型的界限\n\n#### 上限\n\n现在有一个新的需求，现在没有String类型的成绩了，但是成绩依然可能是整数，也可能是小数，这时我们不希望用户将泛型指定为除数字类型外的其他类型，我们就需要使用到泛型的上界定义：\n\n```java\npackage cn.meowrain.generic;\n\npublic class Main {\n    public static void main(String[] args) {\n        Score<Integer> stu1 = new Score<>(\"xiaoming\",1,100);\n        Score<Double> stu2 = new Score<>(\"xiaohong\",2,120.03);\n        System.out.println(stu1.getValue()); // 100\n        System.out.println(stu2.getValue()); // 120.03\n    }\n\n}\nclass Score<T extends Number>{\n    ////设定类型参数上界，必须是Number或是Number的子类\n    private final String name;\n    private final int id;\n    private final T value;\n\n    public Score(String name, int id, T value) {\n        this.name = name;\n        this.id = id;\n        this.value = value;\n    }\n\n    public T getValue() {\n        return value;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n}\n```\n\n只需要在泛型变量的后面添加`extends`关键字即可指定上界，使用时，具体类型只能是我们指定的上界类型或是上界类型的子类，不得是其他类型。否则一律报错：\n\n![image-20230104163324415](https://static.meowrain.cn/i/2023/01/04/r0e7nk-3.png)\n\n像是这样\n\n![image-20230104163552430](https://static.meowrain.cn/i/2023/01/04/r1r1u2-3.png)\n\n##### 泛型通配符在泛型界限中的使用\n\n同样的，当我们在使用变量时，泛型通配符也支持泛型的界限：\n\n```java\npackage cn.meowrain.generic;\n\npublic class Main {\n    public static void main(String[] args) {\n        Score<? extends Number> score = new Score<>(\"数据结构与算法\", \"EP074512\", 60);\n    }\n\n}\nclass Score<T>{\n    private final String name;\n    private final String id;\n    private final T value;\n\n    public Score(String name, String id, T value) {\n        this.name = name;\n        this.id = id;\n        this.value = value;\n    }\n\n    public T getValue() {\n        return value;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getId() {\n        return id;\n    }\n}\n```\n\n那么限定了上界后，我们再来使用这个对象的泛型成员，会变成什么类型呢？\n\n```java\npackage cn.meowrain.generic;\n\npublic class Main {\n    public static void main(String[] args) {\n        Score<? extends Number> score = new Score<>(\"数据结构与算法\", \"EP074512\", 60.5);\n        Number o = score.getValue();\n        System.out.println(o);//60.5\n    }\n\n}\nclass Score<T>{\n    private final String name;\n    private final String id;\n    private final T value;\n\n    public Score(String name, String id, T value) {\n        this.name = name;\n        this.id = id;\n        this.value = value;\n    }\n\n    public T getValue() {\n        return value;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getId() {\n        return id;\n    }\n}\n```\n\n![image-20230104164755843](https://static.meowrain.cn/i/2023/01/04/r8ws8c-3.png)\n\n> 可以看到，此时虽然使用的是通配符，但是不再是Object类型，而是对应的上界\n\n但是我们限定下界的话，因为还是有可能是Object，所以说依然是跟之前一样：\n\n***\n\n那么既然泛型有上界，那么有没有下界呢？有\n\n#### 下限\n\n![image-20230104164608433](https://static.meowrain.cn/i/2023/01/04/r81dju-3.png)\n\n```java\npackage cn.meowrain.generic;\n\npublic class Main {\n    public static void main(String[] args) {\n        Score<? super Integer> score = new Score<>(\"数据结构与算法\", \"EP074512\", 60.5);\n        Object o = score.getValue();\n        System.out.println(o);//60.5\n    }\n\n}\nclass Score<T>{\n    private final String name;\n    private final String id;\n    private final T value;\n\n    public Score(String name, String id, T value) {\n        this.name = name;\n        this.id = id;\n        this.value = value;\n    }\n\n    public T getValue() {\n        return value;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getId() {\n        return id;\n    }\n}\n```\n\n但是我们限定下界的话，因为还是有可能是Object，所以说依然是跟之前一样：\n\n通过给设定泛型上限，我们就可以更加灵活地控制泛型的具体类型范围。\n\n## 类型擦除\n\n前面我们已经了解如何使用泛型，那么泛型到底是如何实现的呢，程序编译之后的样子是什么样的？\n\n```java\npublic abstract class A <T>{\n    abstract T test(T t);\n}\n```\n\n实际上在Java中并不是真的有泛型类型（为了兼容之前的Java版本）因为所有的对象都是属于一个普通的类型，一个泛型类型编译之后，实际上会直接使用默认的类型：\n\n```java\npublic abstract class A {\n    abstract Object test(Object t);  //默认就是Object\n}\n```\n\n当然，如果我们给类型变量设定了上界，那么会从默认类型变成上界定义的类型：\n\n```java\npublic abstract class A <T extends Number>{   //设定上界为Number\n    abstract T test(T t);\n}\n```\n\n那么编译之后：\n\n```java\npublic abstract class A {\n    abstract Number test(Number t);  //上界Number，因为现在只可能出现Number的子类\n}\n```\n\n因此，泛型其实仅仅是在编译阶段进行类型检查，当程序在运行时，并不会真的去检查对应类型，所以说哪怕是我们不去指定类型也可以直接使用：\n\n```java\npublic static void main(String[] args) {\n    Test test = new Test();    //对于泛型类Test，不指定具体类型也是可以的，默认就是原始类型\n}\n```\n\n只不过此时编译器会给出警告：\n\n![image-20230104182530620](https://static.meowrain.cn/i/2023/01/04/u6qjih-3.png)\n\n同样的，由于类型擦除，实际上我们在使用时，编译后的代码是进行了强制类型转换的：\n\n```java\npackage cn.meowrain.generic;\n\npublic class test {\n    public static void main(String[] args) {\n        A<String> a = new B();\n        String i = a.test(\"10\");\n        System.out.println(i);\n    }\n}\n\nclass A<T> {\n    public T test(T t) {\n        return t;\n    }\n}\n\nclass B extends A<String> {\n    @Override\n    public String test(String s) {\n        return null;\n    }\n}\n\n```\n\n实际上编译之后：\n\n![image-20230104183448839](https://static.meowrain.cn/i/2023/01/04/uc7b34-3.png)\n\n不过，我们思考一个问题，既然继承泛型类之后可以明确具体类型，那么为什么`@Override`不会出现错误呢？我们前面说了，重写的条件是需要和父类的返回值类型和形参一致，而泛型默认的原始类型是Object类型，子类明确后变为其他类型，这显然不满足重写的条件，但是为什么依然能编译通过呢？\n\n```java\npublic class B extends A<String>{\n    @Override\n    String test(String s) {\n        return null;\n    }\n}\n```\n\n我们来看看编译之后长啥样：\n\n```java\n// Compiled from \"B.java\"\npublic class com.test.entity.B extends com.test.entity.A<java.lang.String> {\n  public com.test.entity.B();\n  java.lang.String test(java.lang.String);\n  java.lang.Object test(java.lang.Object);   //桥接方法，这才是真正重写的方法，但是使用时会调用上面的方法\n}\n```\n\n通过反编译进行观察，实际上是编译器帮助我们生成了一个桥接方法用于支持重写：\n\n```java\npublic class B extends A {\n\n    public Object test(Object obj) {   //这才是重写的桥接方法\n        return this.test((Integer) obj);   //桥接方法调用我们自己写的方法\n    }\n\n    public String test(String str) {   //我们自己写的方法\n        return null;\n    }\n}\n```\n\n类型擦除机制其实就是为了方便使用后面集合类（不然每次都要强制类型转换）同时为了向下兼容采取的方案。因此，泛型的使用会有一些限制：\n\n首先，在进行类型判断时，不允许使用泛型，只能使用原始类型：\n\n![image-20230104184731564](https://static.meowrain.cn/i/2023/01/04/ujubzb-3.png)\n\n只能判断是不是原始类型，里面的具体类型是不支持的：\n\n```java\npackage cn.meowrain.generic;\n\npublic class Main {\n    public static void main(String[] args) {\n       Hello<String> hello = new Hello<>(\"meow\");\n        System.out.println(hello instanceof Hello); // true\n    }\n\n}\n\nclass Hello<T> {\n    T name;\n\n    public Hello(T name) {\n        this.name = name;\n    }\n}\n```\n\n![image-20230104185303420](https://static.meowrain.cn/i/2023/01/04/un90u2-3.png)\n\n![image-20230104185442606](https://static.meowrain.cn/i/2023/01/04/uo2tcr-3.png)\n","tags":["java"],"categories":["Java","JAVASE"]},{"title":"JavaWeb笔记（二）","url":"/2023/01/18/088fcec4e8a846479c3cfcf5a6a52da7/","content":"\n# 数据库基础\n\n数据库是学习JavaWeb的一个前置，只有了解了数据库的操作和使用，我们才能更好地组织和管理网站应用产生的数据。\n\n<img src=\"https://img2.baidu.com/it/u=873816781,3605513900&amp;fm=26&amp;fmt=auto\" alt=\"img\" width=\"63\" height=\"38\">\n\n## 什么是数据库\n\n数据库是数据管理的有效技术，是由一批数据构成的有序集合，这些数据被存放在结构化的数据表里。数据表之间相互关联，反映客观事物间的本质联系。数据库能有效地帮助一个组织或企业科学地管理各类信息资源。简而言之，我们的数据可以交给数据库来帮助我们进行管理，同时数据库能够为我们提供高效的访问性能。\n\n在JavaSE学习阶段中，我们学习了如何使用文件I/O来将数据保存到本地，这样就可以将一个数据持久地存储在本地，即使程序重新打开，我们也能加载回上一次的数据，但是当我们的数据变得非常多的时候，这样的方式就显得不太方便了。同时我们如果需要查找众多数据的中的某一个，就只能加载到内存再进行查找，这样显然是很难受的！\n\n而数据库就是专门做这事的，我们可以快速查找想要的数据，便捷地插入、修改和删除数据，并且数据库不仅能做这些事，还能提供更多便于管理数据和操作数据的功能！\n\n### 常见的数据库\n\n常见的数据库有很多种，包括但不限于：\n\n*   MySQL - 免费，用的最多的，开源数据库，适用于中小型\n*   Microsoft SQL Server - 收钱的，但是提供技术支持，适用于Windows Server\n*   Oracle - 收钱的，大型数据库系统\n\n而我们要学习的是MySQL数据，其实无论学习哪种数据库，SQL语句大部分都是通用的，只有少许语法是不通用的，因此我们只需要学习一种数据库其他的也就差不多都会了。\n\n### 数据模型\n\n数据模型与现实世界中的模型一样，是对现实世界数据特征的一种抽象。实际上，我们之前学习的类就是对现实世界数据的一种抽象，比如一个学生的特征包括姓名，年龄，年级，学号，专业等，这些特征也称为实体的一种属性，属性具有以下特点：\n\n*   属性不可再分\n*   一个实体的属性可以有很多个\n*   用于唯一区分不同实体的的属性，称为Key，比如每个同学的学号都是不一样的\n*   属性取值可以有一定的约束，比如性别只能是男或是女\n\n实体或是属性之间可以具有一定的联系，比如一个老师可以教很多个学生，而学生相对于老师就是被教授的关系；又比如每个同学都有一个学号与其唯一对应，因此学号和学生之间也有一种联系。而像一个老师教多个学生的联系就是一种一对多的联系（1:n），而学号唯一对应，就是一种一对一的联系（1:1）；每一个老师不仅可以教多个学生，每一个学生也可以有多个教师，这就是一种多对多的联系（n:m）\n\nMySQL就是一种关系型数据库，通过使用关系型数据库，我们就可以很好地存储这样带有一定联系的数据。\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Ffile1.renrendoc.com%2Ffileroot_temp2%2F2020-10%2F17%2F763fb9f3-871d-4f1c-abe7-0a5025cf52a5%2F763fb9f3-871d-4f1c-abe7-0a5025cf52a52.gif\\&refer=http%3A%2F%2Ffile1.renrendoc.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1637926750\\&t=31a308e5d8efd32bae55a40c963f459d)\n\n通过构建一个ER图，我们就能很好地理清不同数据模型之间的关系和特点。\n\n## 数据库的创建\n\n既然了解了属性和联系，那么我们就来尝试创建一个数据库，并在数据库中添加用于存放数据的表，每一张表都代表一种实体的数据。首先我们要明确，我们需要创建什么样子的表：\n\n*   学生表：用于存放所有学生的数据，学生（<u>学号</u>，姓名，性别）\n*   教师表：用于存放所有教师的数据，教师（<u>教师号</u>，姓名）\n*   授课表：用于存放教师与学生的授课信息，授课（学号，教师号）\n\n其中，标注下划线的属性，作为Key，用于区别于其他实体数据的唯一标记。\n\n为了理解起来更加轻松，我们从图形界面操作再讲到SQL语句，请不要着急。我们现在通过Navicat或idea自带的数据库客户端来创建一个数据库和上述三个表。\n\n## 数据库的规范化\n\n要去设计存放一个实体的表，我们就需要了解数据库的关系规范化，尽可能减少“不好”的关系存在，如何设计一个优良的关系模型是最关键的内容！简而言之，我们要学习一下每一个表该如何去设计。\n\n### 第一范式（1NF）\n\n第一范式是指数据库的每一列都是不可分割的基本数据项，而下面这样的就存在可分割的情况：\n\n*   学生（姓名，电话号码）\n\n电话号码实际上包括了`家用座机电话`和`移动电话`，因此它可以被拆分为：\n\n*   学生（姓名，座机号码，手机号码）\n\n满足第一范式是关系型数据库最基本的要求！\n\n### 第二范式（2NF）\n\n第二范式要求表中必须存在主键，且其他的属性必须完全依赖于主键，比如：\n\n*   学生（<u>学号</u>，姓名，性别）\n\n学号是每个学生的唯一标识，每个学生都有着不同的学号，因此此表中存在一个主键，并且每个学生的所有属性都依赖于学号，学号发生改变就代表学生发生改变，姓名和性别都会因此发生改变，所有此表满足第二范式。\n\n### 第三范式（3NF）\n\n在满足第二范式的情况下，所有的属性都不传递依赖于主键，满足第三范式。\n\n*   学生借书情况（<u>借阅编号</u>，学生学号，书籍编号，书籍名称，书籍作者）\n\n实际上书籍编号依赖于借阅编号，而书籍名称和书籍作者依赖于书籍编号，因此存在传递依赖的情况，我们可以将书籍信息进行单独拆分为另一张表：\n\n*   学生借书情况（<u>借阅编号</u>，学生学号，书籍编号）\n*   书籍（<u>书籍编号</u>，书籍名称，书籍作者）\n\n这样就消除了传递依赖，从而满足第三范式。\n\n### BCNF\n\nBCNF作为第三范式的补充，假设仓库管理关系表为StorehouseManage(仓库ID, 存储物品ID, 管理员ID, 数量)，且有一个管理员只在一个仓库工作；一个仓库可以存储多种物品。这个数据库表中存在如下决定关系：\n\n(仓库ID, 存储物品ID) →(管理员ID, 数量)\n\n(管理员ID, 存储物品ID) → (仓库ID, 数量)\n\n所以，(仓库ID, 存储物品ID)和(管理员ID, 存储物品ID)都是StorehouseManage的候选关键字，表中的唯一非关键字段为数量，它是符合第三范式的。但是，由于存在如下决定关系：\n\n(仓库ID) → (管理员ID)\n\n(管理员ID) → (仓库ID)\n\n即存在关键字段决定关键字段的情况，如果修改管理员ID，那么就必须逐一进行修改，所以其不符合BCNF范式。\n\n***\n\n## 认识SQL语句\n\n结构化查询语言（Structured Query Language）简称SQL，这是一种特殊的语言，它专门用于数据库的操作。每一种数据库都支持SQL，但是他们之间会存在一些细微的差异，因此不同的数据库都存在自己的“方言”。\n\nSQL语句不区分大小写（关键字推荐使用大写），它支持多行，并且需要使用`;`进行结尾！\n\nSQL也支持注释，通过使用`--`或是`#`来编写注释内容，也可以使用`/*`来进行多行注释。\n\n我们要学习的就是以下四种类型的SQL语言：\n\n*   数据查询语言（Data Query Language, DQL）基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块。\n*   数据操纵语言（Data Manipulation Language, DML）是SQL语言中，负责对数据库对象运行数据访问工作的指令集，以INSERT、UPDATE、DELETE三种指令为核心，分别代表插入、更新与删除，是开发以数据为中心的应用程序必定会使用到的指令。\n*   数据库定义语言DDL(Data Definition Language)，是用于描述数据库中要存储的现实世界实体的语言。\n*   DCL（Data Control Language）是数据库控制语言。是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke等）语句。在默认状态下，只有sysadmin,dbcreator,db\\_owner或db\\_securityadmin等人员才有权力执行DCL。\n\n我们平时所说的CRUD其实就是增删改查（Create/Retrieve/Update/Delete）\n\n***\n\n## 数据库定义语言（DDL）\n\n### 数据库操作\n\n我们可以通过`create database`来创建一个数据库：\n\n```sql\ncreate database 数据库名\n```\n\n为了能够支持中文，我们在创建时可以设定编码格式：\n\n```sql\nCREATE DATABASE IF NOT EXISTS 数据库名 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;\n```\n\n如果我们创建错误了，我们可以将此数据库删除，通过使用`drop database`来删除一个数据库：\n\n```sql\ndrop database 数据库名\n```\n\n### 创建表\n\n数据库创建完成后，我们一般通过`create table`语句来创建一张表：\n\n```sql\ncreate table 表名(列名 数据类型[列级约束条件],\n             列名 数据类型[列级约束条件],\n             ...\n             [,表级约束条件])\n```\n\n### SQL数据类型\n\n以下的数据类型用于字符串存储：\n\n*   char(n)可以存储任意字符串，但是是固定长度为n，如果插入的长度小于定义长度时，则用空格填充。\n*   varchar(n)也可以存储任意数量字符串，长度不固定，但不能超过n，不会用空格填充。\n\n以下数据类型用于存储数字：\n\n*   smallint用于存储小的整数，范围在 (-32768，32767)\n*   int用于存储一般的整数，范围在 (-2147483648，2147483647)\n*   bigint用于存储大型整数，范围在 (-9,223,372,036,854,775,808，9,223,372,036,854,775,807)\n*   float用于存储单精度小数\n*   double用于存储双精度的小数\n\n以下数据类型用于存储时间：\n\n*   date存储日期\n*   time存储时间\n*   year存储年份\n*   datetime用于混合存储日期+时间\n\n### 列级约束条件\n\n列级约束有六种：主键Primary key、外键foreign key 、唯一 unique、检查 check （MySQL不支持）、默认default 、非空/空值 not null/ null\n\n### 表级约束条件\n\n表级约束有四种：主键、外键、唯一、检查\n\n现在我们通过SQL语句来创建我们之前提到的三张表。\n\n```sql\n[CONSTRAINT <外键名>] FOREIGN KEY 字段名 [，字段名2，…] REFERENCES <主表名> 主键列1 [，主键列2，…]\n```\n\n### 修改表\n\n如果我们想修改表结构，我们可以通过`alter table`来进行修改：\n\n```sql\nALTER TABLE 表名[ADD 新列名 数据类型[列级约束条件]]\n                             [DROP COLUMN 列名[restrict|cascade]]\n                             [ALTER COLUMN 列名 新数据类型]\n```\n\n我们可以通过ADD来添加一个新的列，通过DROP来删除一个列，不过我们可以添加restrict或cascade，默认是restrict，表示如果此列作为其他表的约束或视图引用到此列时，将无法删除，而cascade会强制连带引用此列的约束、视图一起删除。还可以通过ALTER来修改此列的属性。\n\n### 删除表\n\n我们可以通过`drop table`来删除一个表：\n\n```sql\nDROP TABLE 表名[restrict|cascade]\n```\n\n其中restrict和cascade上面的效果一致。\n\n***\n\n## 数据库操纵语言（DML）\n\n前面我们已经学习了如何使用SQL语句来创建、修改、删除数据库以及表，而如何向数据库中插入、删除、更新数据，将是本版块讨论的重点。\n\n### 插入数据\n\n通过使用`insert into`语句来向数据库中插入一条数据（一条记录）：\n\n```sql\nINSERT INTO 表名 VALUES(值1, 值2, 值3)\n```\n\n如果插入的数据与列一一对应，那么可以省略列名，但是如果希望向指定列上插入数据，就需要给出列名：\n\n```sql\nINSERT INTO 表名(列名1, 列名2) VALUES(值1, 值2)\n```\n\n我们也可以一次性向数据库中插入多条数据：\n\n```sql\nINSERT INTO 表名(列名1, 列名2) VALUES(值1, 值2), (值1, 值2), (值1, 值2)\n```\n\n我们来试试看向我们刚刚创建的表中添加三条数据。\n\n### 修改数据\n\n我们可以通过`update`语句来更新表中的数据：\n\n```sql\nUPDATE 表名 SET 列名=值,... WHERE 条件\n```\n\n注意，SQL语句中的等于判断是`=`\n\n\\*\\*警告：\\*\\*如果忘记添加`WHERE`字句来限定条件，将使得整个表中此列的所有数据都被修改！\n\n### 删除数据\n\n我们可以通过使用`delete`来删除表中的数据：\n\n```sql\nDELETE FROM 表名\n```\n\n通过这种方式，将删除表中全部数据，我们也可以使用`where`来添加条件，只删除指定的数据：\n\n```sql\nDELETE FROM 表名 WHERE 条件\n```\n\n***\n\n## 数据库查询语言（DQL）\n\n数据库的查询是我们整个数据库学习中的重点内容，面对数据库中庞大的数据，该如何去寻找我们想要的数据，就是我们主要讨论的问题。\n\n### 单表查询\n\n单表查询是最简单的一种查询，我们只需要在一张表中去查找数据即可，通过使用`select`语句来进行单表查询：\n\n```sql\n-- 指定查询某一列数据\nSELECT 列名[,列名] FROM 表名\n-- 会以别名显示此列\nSELECT 列名 别名 FROM 表名\n-- 查询所有的列数据\nSELECT * FROM 表名\n-- 只查询不重复的值\nSELECT DISTINCT 列名 FROM 表名\n```\n\n我们也可以添加`where`字句来限定查询目标：\n\n```sql\nSELECT * FROM 表名 WHERE 条件\n```\n\n### 常用查询条件\n\n*   一般的比较运算符，包括=、>、<、>=、<=、!=等。\n*   是否在集合中：in、not in\n*   字符模糊匹配：like，not like\n*   多重条件连接查询：and、or、not\n\n我们来尝试使用一下上面这几种条件。\n\n### 排序查询\n\n我们可以通过`order by`来将查询结果进行排序：\n\n```sql\nSELECT * FROM 表名 WHERE 条件 ORDER BY 列名 ASC|DESC\n```\n\n使用ASC表示升序排序，使用DESC表示降序排序，默认为升序。\n\n我们也可以可以同时添加多个排序：\n\n```sql\nSELECT * FROM 表名 WHERE 条件 ORDER BY 列名1 ASC|DESC, 列名2 ASC|DESC\n```\n\n这样会先按照列名1进行排序，每组列名1相同的数据再按照列名2排序。\n\n### 聚集函数\n\n聚集函数一般用作统计，包括：\n\n*   `count([distinct]*)`统计所有的行数（distinct表示去重再统计，下同）\n*   `count([distinct]列名)`统计某列的值总和\n*   `sum([distinct]列名)`求一列的和（注意必须是数字类型的）\n*   `avg([distinct]列名)`求一列的平均值（注意必须是数字类型）\n*   `max([distinct]列名)`求一列的最大值\n*   `min([distinct]列名)`求一列的最小值\n\n一般聚集函数是这样使用的：\n\n```sql\nSELECT count(distinct 列名) FROM 表名 WHERE 条件 \n```\n\n### 分组和分页查询\n\n通过使用`group by`来对查询结果进行分组，它需要结合聚合函数一起使用：\n\n```sql\nSELECT sum(*) FROM 表名 WHERE 条件 GROUP BY 列名\n```\n\n我们还可以添加`having`来限制分组条件：\n\n```sql\nSELECT sum(*) FROM 表名 WHERE 条件 GROUP BY 列名 HAVING 约束条件\n```\n\n我们可以通过`limit`来限制查询的数量，只取前n个结果：\n\n```sql\nSELECT * FROM 表名 LIMIT 数量\n```\n\n我们也可以进行分页：\n\n```sql\nSELECT * FROM 表名 LIMIT 起始位置,数量\n```\n\n### 多表查询\n\n多表查询是同时查询的两个或两个以上的表，多表查询会提通过连接转换为单表查询。\n\n```sql\nSELECT * FROM 表1, 表2\n```\n\n直接这样查询会得到两张表的笛卡尔积，也就是每一项数据和另一张表的每一项数据都结合一次，会产生庞大的数据。\n\n```sql\nSELECT * FROM 表1, 表2 WHERE 条件\n```\n\n这样，只会从笛卡尔积的结果中得到满足条件的数据。\n\n\\*\\*注意：\\*\\*如果两个表中都带有此属性吗，需要添加表名前缀来指明是哪一个表的数据。\n\n### 自身连接查询\n\n自身连接，就是将表本身和表进行笛卡尔积计算，得到结果，但是由于表名相同，因此要先起一个别名：\n\n```sql\nSELECT * FROM 表名 别名1, 表名 别名2\n```\n\n其实自身连接查询和前面的是一样的，只是连接对象变成自己和自己了。\n\n### 外连接查询\n\n外连接就是专门用于联合查询情景的，比如现在有一个存储所有用户的表，还有一张用户详细信息的表，我希望将这两张表结合到一起来查看完整的数据，我们就可以通过使用外连接来进行查询，外连接有三种方式：\n\n*   通过使用`inner join`进行内连接，只会返回两个表满足条件的交集部分：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2019053022120536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg1ODIwMQ==,size_16,color_FFFFFF,t_70)\n\n*   通过使用`left join`进行左连接，不仅会返回两个表满足条件的交集部分，也会返回左边表中的全部数据，而在右表中缺失的数据会使用`null`来代替（右连接`right join`同理，只是反过来而已，这里就不再介绍了）：\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190530221543230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg1ODIwMQ==,size_16,color_FFFFFF,t_70)\n\n### 嵌套查询\n\n我们可以将查询的结果作为另一个查询的条件，比如：\n\n```sql\nSELECT * FROM 表名 WHERE 列名 = (SELECT 列名 FROM 表名 WHERE 条件)\n```\n\n我们来再次尝试编写一下在最开始我们查找某教师所有学生的SQL语句。\n\n***\n\n## 数据库控制语言（DCL）\n\n庞大的数据库不可能由一个人来管理，我们需要更多的用户来一起管理整个数据库。\n\n### 创建用户\n\n我们可以通过`create user`来创建用户：\n\n```sql\nCREATE USER 用户名 identified by 密码;\n```\n\n也可以不带密码：\n\n```sql\nCREATE USER 用户名;\n```\n\n我们可以通过@来限制用户登录的登录IP地址，`%`表示匹配所有的IP地址，默认使用的就是任意IP地址。\n\n### 登陆用户\n\n首先需要添加一个环境变量，然后我们通过cmd去登陆mysql：\n\n```sql\nlogin -u 用户名 -p\n```\n\n输入密码后即可登陆此用户，我们输入以下命令来看看能否访问所有数据库：\n\n```sql\nshow databases;\n```\n\n我们发现，虽然此用户能够成功登录，但是并不能查看完整的数据库列表，这是因为此用户还没有权限！\n\n### 用户授权\n\n我们可以通过使用`grant`来为一个数据库用户进行授权：\n\n```sql\ngrant all|权限1,权限2...(列1,...) on 数据库.表 to 用户 [with grant option]\n```\n\n其中all代表授予所有权限，当数据库和表为`*`，代表为所有的数据库和表都授权。如果在最后添加了`with grant option`，那么被授权的用户还能将已获得的授权继续授权给其他用户。\n\n我们可以使用`revoke`来收回一个权限：\n\n```sql\nrevoke all|权限1,权限2...(列1,...) on 数据库.表 from 用户\n```\n\n***\n\n## 视图\n\n视图本质就是一个查询的结果，不过我们每次都可以通过打开视图来按照我们想要的样子查看数据。既然视图本质就是一个查询的结果，那么它本身就是一个虚表，并不是真实存在的，数据实际上还是存放在原来的表中。\n\n我们可以通过`create view`来创建视图;\n\n```sql\nCREATE VIEW 视图名称(列名) as 子查询语句 [WITH CHECK OPTION];\n```\n\nWITH CHECK OPTION是指当创建后，如果更新视图中的数据，是否要满足子查询中的条件表达式，不满足将无法插入，创建后，我们就可以使用`select`语句来直接查询视图上的数据了，因此，还能在视图的基础上，导出其他的视图。\n\n1.  若视图是由两个以上基本表导出的，则此视图不允许更新。\n2.  若视图的字段来自字段表达式或常数，则不允许对此视图执行INSERT和UPDATE操作，但允许执行DELETE操作。\n3.  若视图的字段来自集函数，则此视图不允许更新。\n4.  若视图定义中含有GROUP BY子句，则此视图不允许更新。\n5.  若视图定义中含有DISTINCT短语，则此视图不允许更新。\n6.  若视图定义中有嵌套查询，并且内层查询的FROM子句中涉及的表也是导出该视图的基本表，则此视图不允许更新。例如将成绩在平均成绩之上的元组定义成一个视图GOOD\\_SC： CREATE VIEW GOOD\\_SC AS SELECT Sno, Cno, Grade FROM SC WHERE Grade > (SELECT AVG(Grade) FROM SC); 　　导出视图GOOD\\_SC的基本表是SC，内层查询中涉及的表也是SC，所以视图GOOD\\_SC是不允许更新的。\n7.  一个不允许更新的视图上定义的视图也不允许更新\n\n通过`drop`来删除一个视图：\n\n```sql\ndrop view apptest\n```\n\n***\n\n## 索引\n\n在数据量变得非常庞大时，通过创建索引，能够大大提高我们的查询效率，就像Hash表一样，它能够快速地定位元素存放的位置，我们可以通过下面的命令创建索引：\n\n```sql\n-- 创建索引\nCREATE INDEX 索引名称 ON 表名 (列名)\n-- 查看表中的索引\nshow INDEX FROM student\n```\n\n我们也可以通过下面的命令删除一个索引：\n\n```sql\ndrop index 索引名称 on 表名\n```\n\n虽然添加索引后会使得查询效率更高，但是我们不能过度使用索引，索引为我们带来高速查询效率的同时，也会在数据更新时产生额外建立索引的开销，同时也会占用磁盘资源。\n\n***\n\n## 触发器\n\n触发器就像其名字一样，在某种条件下会自动触发，在`select`/`update`/`delete`时，会自动执行我们预先设定的内容，触发器通常用于检查内容的安全性，相比直接添加约束，触发器显得更加灵活。\n\n触发器所依附的表称为基本表，当触发器表上发生`select`/`update`/`delete`等操作时，会自动生成两个临时的表（new表和old表，只能由触发器使用）\n\n比如在`insert`操作时，新的内容会被插入到new表中；在`delete`操作时，旧的内容会被移到old表中，我们仍可在old表中拿到被删除的数据；在`update`操作时，旧的内容会被移到old表中，新的内容会出现在new表中。\n\n```sql\nCREATE TRIGGER 触发器名称 [BEFORE|AFTER] [INSERT|UPDATE|DELETE] ON 表名/视图名 FOR EACH ROW DELETE FROM student WHERE student.sno = new.sno\n```\n\nFOR EACH ROW表示针对每一行都会生效，无论哪行进行指定操作都会执行触发器！\n\n通过下面的命令来查看触发器：\n\n```sql\nSHOW TRIGGERS\n```\n\n如果不需要，我们就可以删除此触发器：\n\n```sql\nDROP TRIGGER 触发器名称\n```\n\n***\n\n## 事务\n\n当我们要进行的操作非常多时，比如要依次删除很多个表的数据，我们就需要执行大量的SQL语句来完成，这些数据库操作语句就可以构成一个事务！只有Innodb引擎支持事务，我们可以这样来查看支持的引擎：\n\n```sql\nSHOW ENGINES;\n```\n\nMySQL默认采用的是Innodb引擎，我们也可以去修改为其他的引擎。\n\n事务具有以下特性：\n\n*   \\*\\*原子性：\\*\\*一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。\n*   \\*\\*一致性：\\*\\*在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。\n*   \\*\\*隔离性：\\*\\*数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。\n*   \\*\\*持久性：\\*\\*事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n我们通过以下例子来探究以下事务：\n\n```sql\nbegin;   #开始事务\n...\nrollback;  #回滚事务\nsavepoint 回滚点;  #添加回滚点\nrollback to 回滚点; #回滚到指定回滚点\n...\ncommit; #提交事务\n-- 一旦提交，就无法再进行回滚了！\n```\n\n***\n\n## 选学内容\n\n**函数**和**存储过程**并没有包含在我们的教程当中，但是这并不代表它们就不重要，通过学习它们能够让你的数据库管理能力更上一层楼，它们能够捆绑一组SQL语句运行，并且可以反复使用，大大提高工作效率。\n","categories":["Java","JavaWeb笔记"]},{"title":"JavaWeb笔记（五）","url":"/2023/01/18/5756fdcc799c4064be4e4a84d7ab5244/","content":"\n# JavaWeb后端\n\n经过前面的学习，现在终于可以正式进入到后端的学习当中，不过，我们还是需要再系统地讲解一下HTTP通信基础知识，它是我们学习JavaWeb的基础知识，我们之前已经学习过TCP通信，而HTTP实际上是基于TCP协议之上的应用层协议，因此理解它并不难理解。\n\n打好基础是关键！为什么要去花费时间来讲解计算机网络基础，我们学习一门技术，如果仅仅是知道如何使用却不知道其原理，那么就成了彻头彻尾的“码农”，只知道搬运代码实现功能，却不知道这行代码的执行流程，在遇到一些问题的时候就不知道如何解决，无论是知识层面还是应用层面都得不到提升。\n\n无论怎么样，我们都要明确，我们学习JavaWeb的最终目的是为了搭建一个网站，并且让用户能访问我们的网站并在我们的网站上做一些事情。\n\n## 计算机网络基础\n\n在计算机网络（谢希仁 第七版 第264页）中，是这样描述万维网的：\n\n> 万维网（World Wide Web）并非是某种特殊的计算机网络，万维网是一个大规模的联机式信息储藏所，英文简称`Web`，万维网用\\*\\*<u>链接</u>\\*\\*的方法，能够非常方便地从互联网上的一个站点访问另一个站点，从而主动地按需求获取丰富的信息。\n\n这句话说的非常官方，但是也蕴藏着许多的信息，首先它指明，我们的互联网上存在许许多多的服务器，而我们通过访问这些服务器就能快速获取服务器为我们提供的信息（比如打开百度就能展示搜索、打开小破站能刷视频、打开微博能查看实时热点）而这些服务器就是由不同的公司在运营。\n\n其次，我们通过浏览器，只需要输入对应的网址或是点击页面中的一个链接，就能够快速地跳转到另一个页面，从而按我们的意愿来访问服务器。\n\n而书中是这样描述万维网的工作方式：\n\n> 万维网以客户服务器的方式工作，浏览器就是安装在用户主机上的万维网客户程序，万维网文档所驻留的主机则运行服务器程序，因此这台主机也称为万维网服务器。**客户程序向服务器程序发出请求，服务器程序向客户程序送回客户所要的万维网文档**，在一个客户程序主窗口上显示出的万维网文档称为页面。\n\n上面提到的客户程序其实就是我们电脑上安装的浏览器，而服务端就是我们即将要去学习的Web服务器，也就是说，我们要明白如何搭建一个Web服务器并向用户发送我们提供的Web页面，在浏览器中显示的，一般就是HTML文档被解析后的样子。\n\n那么，我们的服务器可能不止一个页面，可能会有很多个页面，那么客户端如何知道该去访问哪个服务器的哪个页面呢？这个时候就需要用到`URL`统一资源定位符。互联网上所有的资源，都有一个唯一确定的URL，比如`http://www.baidu.com`\n\nURL的格式为：\n\n> <协议>://<主机>:<端口>/<路径>\n>\n> 协议是指采用什么协议来访问服务器，不同的协议决定了服务器返回信息的格式，我们一般使用HTTP协议。\n>\n> 主机可以是一个域名，也可以是一个IP地址（实际上域名最后会被解析为IP地址进行访问）\n>\n> 端口是当前服务器上Web应用程序开启的端口，我们前面学习TCP通信的时候已经介绍过了，HTTP协议默认使用80端口，因此有时候可以省略。\n>\n> 路径就是我们希望去访问此服务器上的某个文件，不同的路径代表访问不同的资源。\n\n我们接着来了解一下什么是HTTP协议：\n\n> HTTP是面向事务的应用层协议，它是万维网上能够可靠交换文件的重要基础。HTTP不仅传送完成超文本跳转所需的必须信息，而且也传送任何可从互联网上得到的信息，如文本、超文本、声音和图像。\n\n实际上我们之前访问百度、访问自己的网站，所有的传输都是以HTTP作为协议进行的。\n\n我们来看看HTTP的传输原理：\n\n> HTTP使用了面向连接的TCP作为运输层协议，保证了数据的可靠传输。HTTP不必考虑数据在传输过程中被丢弃后又怎样被重传。但是HTTP协议本身是无连接的。也就是说，HTTP虽然使用了TCP连接，但是通信的双方在交换HTTP报文之前不需要先建立HTTP连接。1997年以前使用的是HTTP/1.0协议，之后就是HTTP/1.1协议了。\n\n那么既然HTTP是基于TCP进行通信的，我们首先来回顾一下TCP的通信原理：\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fstatic.oschina.net%2Fuploads%2Fspace%2F2016%2F0407%2F144257_WTql_2537915.jpg\\&refer=http%3A%2F%2Fstatic.oschina.net\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1640244422\\&t=e2c991d149b7ae79d3baa7868633f4d6)\n\nTCP协议实际上是经历了三次握手再进行通信，也就是说保证整个通信是稳定的，才可以进行数据交换，并且在连接已经建立的过程中，双方随时可以互相发送数据，直到有一方主动关闭连接，这时在进行四次挥手，完成整个TCP通信。\n\n而HTTP和TCP并不是一个层次的通信协议，TCP是传输层协议，而HTTP是应用层协议，因此，实际上HTTP的内容会作为TCP协议的报文被封装，并继续向下一层进行传递，而传输到客户端时，会依次进行解包，还原为最开始的HTTP数据。\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.edatop.com%2Ftech%2Fimages%2Fefans%2Fmcu%2Fmcu-257524hyx0ez3djs.png\\&refer=http%3A%2F%2Fwww.edatop.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1640244335\\&t=b0e3e66fdac9f66ab64262a725e041f8)\n\nHTTP使用TCP协议是为了使得数据传输更加可靠，既然它是依靠TCP协议进行数据传输，那么为什么说它本身是无连接的呢？我们来看一下HTTP的传输过程：\n\n> 用户在点击鼠标链接某个万维网文档时，HTTP协议首先要和服务器建立TCP连接。这需要使用三报文握手。当建立TCP连接的三报文握手的前两部分完成后（即经过了一个RTT时间后），万维网客户就把HTTP请求报文作为建立TCP连接的三报文握手中的第三个报文的数据，发送给万维网服务器。服务器收到HTTP请求报文后，就把所请求的文档作为响应报文返回给客户。\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.pianshen.com%2Fimages%2F323%2F7b19a0d1acac11f91ba549001758a393.png\\&refer=http%3A%2F%2Fwww.pianshen.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1640245028\\&t=bb9d88a42c52313924edc8a7d937cbf8)\n\n因此，我们的浏览器请求一个页面，需要两倍的往返时间。\n\n最后，我们再来了解一下HTTP的报文结构：\n\n<img src=\":/e6e2ab7e47b54748b33372925465c599\" alt=\"981e9c1aae350d7d778de2509cb29b2f.png\" width=\"706\" height=\"331\">\n\n由客户端向服务端发送是报文称为请求报文，而服务端返回给客户端的称为响应报文，实际上，整个报文全部是以文本形式发送的，通过使用空格和换行来完成分段。\n\n现在，我们已经了解了HTTP协议的全部基础知识，那么什么是Web服务器呢，实际上，它就是一个软件，但是它已经封装了所有的HTTP协议层面的操作，我们无需关心如何使用HTTP协议通信，而是直接基于服务器软件进行开发，我们只需要关心我们的页面数据如何展示、前后端如何交互即可。\n\n## 认识Tomcat服务器\n\n[![Tomcat Home](https://tomcat.apache.org/res/images/tomcat.png)](http://tomcat.apache.org/)\n\nTomcat（汤姆猫）就是一个典型的Web应用服务器软件，通过运行Tomcat服务器，我们就可以快速部署我们的Web项目，并交由Tomcat进行管理，我们只需要直接通过浏览器访问我们的项目即可。\n\n那么首先，我们需要进行一个简单的环境搭建，我们需要在Tomcat官网下载最新的Tomcat服务端程序：[https://tomcat.apache.org/download-10.cgi（下载速度可能有点慢）](https://tomcat.apache.org/download-10.cgi%EF%BC%88%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E5%8F%AF%E8%83%BD%E6%9C%89%E7%82%B9%E6%85%A2%EF%BC%89)\n\n*   下载：64-bit Windows zip\n\n下载完成后，解压，并放入桌面，接下来需要配置一下环境变量，打开`高级系统设置`，打开`环境变量`，添加一个新的系统变量，变量名称为`JRE_HOME`，填写JDK的安装目录+/jre，比如Zulujdk默认就是：C:\\Program Files\\Zulu\\zulu-8\\jre\n\n设置完成后，我们进入tomcat文件夹bin目录下，并在当前位置打开CMD窗口，将startup.sh拖入窗口按回车运行，如果环境变量配置有误，会提示，若没问题，服务器则正常启动。\n\n如果出现乱码，说明编码格式配置有问题，我们修改一下服务器的配置文件，打开`conf`文件夹，找到`logging.properties`文件，这就是日志的配置文件（我们在前面已经给大家讲解过了）将ConsoleHandler的默认编码格式修改为GBK编码格式：\n\n```properties\njava.util.logging.ConsoleHandler.encoding = GBK\n```\n\n现在重新启动服务器，就可以正常显示中文了。\n\n服务器启动成功之后，不要关闭，我们打开浏览器，在浏览器中访问：[http://localhost:8080/，Tomcat服务器默认是使用8080端口（可以在配置文件中修改），访问成功说明我们的Tomcat环境已经部署成功了。](http://localhost:8080/%EF%BC%8CTomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%BB%98%E8%AE%A4%E6%98%AF%E4%BD%BF%E7%94%A88080%E7%AB%AF%E5%8F%A3%EF%BC%88%E5%8F%AF%E4%BB%A5%E5%9C%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E4%BF%AE%E6%94%B9%EF%BC%89%EF%BC%8C%E8%AE%BF%E9%97%AE%E6%88%90%E5%8A%9F%E8%AF%B4%E6%98%8E%E6%88%91%E4%BB%AC%E7%9A%84Tomcat%E7%8E%AF%E5%A2%83%E5%B7%B2%E7%BB%8F%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F%E4%BA%86%E3%80%82)\n\n整个Tomcat目录下，我们已经认识了bin目录（所有可执行文件，包括启动和关闭服务器的脚本）以及conf目录（服务器配置文件目录），那么我们接着来看其他的文件夹：\n\n*   lib目录：Tomcat服务端运行的一些依赖，不用关心。\n*   logs目录：所有的日志信息都在这里。\n*   temp目录：存放运行时产生的一些临时文件，不用关心。\n*   work目录：工作目录，Tomcat会将jsp文件转换为java文件（我们后面会讲到，这里暂时不提及）\n*   webapp目录：所有的Web项目都在这里，每个文件夹都是一个Web应用程序：\n\n我们发现，官方已经给我们预设了一些项目了，访问后默认使用的项目为ROOT项目，也就是我们默认打开的网站。\n\n我们也可以访问example项目，只需要在后面填写路径即可：[http://localhost:8080/examples/，或是docs项目（这个是Tomcat的一些文档）http://localhost:8080/docs/](http://localhost:8080/examples/%EF%BC%8C%E6%88%96%E6%98%AFdocs%E9%A1%B9%E7%9B%AE%EF%BC%88%E8%BF%99%E4%B8%AA%E6%98%AFTomcat%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%87%E6%A1%A3%EF%BC%89http://localhost:8080/docs/)\n\nTomcat还自带管理页面，我们打开：[http://localhost:8080/manager，提示需要用户名和密码，由于不知道是什么，我们先点击取消，页面中出现如下内容：](http://localhost:8080/manager%EF%BC%8C%E6%8F%90%E7%A4%BA%E9%9C%80%E8%A6%81%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%EF%BC%8C%E7%94%B1%E4%BA%8E%E4%B8%8D%E7%9F%A5%E9%81%93%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E6%88%91%E4%BB%AC%E5%85%88%E7%82%B9%E5%87%BB%E5%8F%96%E6%B6%88%EF%BC%8C%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%87%BA%E7%8E%B0%E5%A6%82%E4%B8%8B%E5%86%85%E5%AE%B9%EF%BC%9A)\n\n> You are not authorized to view this page. If you have not changed any configuration files, please examine the file `conf/tomcat-users.xml` in your installation. That file must contain the credentials to let you use this webapp.\n>\n> For example, to add the `manager-gui` role to a user named `tomcat` with a password of `s3cret`, add the following to the config file listed above.\n>\n>     <role rolename=\"manager-gui\"/>\n>     <user username=\"tomcat\" password=\"s3cret\" roles=\"manager-gui\"/>\n>\n> Note that for Tomcat 7 onwards, the roles required to use the manager application were changed from the single `manager` role to the following four roles. You will need to assign the role(s) required for the functionality you wish to access.\n>\n> *   `manager-gui` - allows access to the HTML GUI and the status pages\n> *   `manager-script` - allows access to the text interface and the status pages\n> *   `manager-jmx` - allows access to the JMX proxy and the status pages\n> *   `manager-status` - allows access to the status pages only\n>\n> The HTML interface is protected against CSRF but the text and JMX interfaces are not. To maintain the CSRF protection:\n>\n> *   Users with the `manager-gui` role should not be granted either the `manager-script` or `manager-jmx` roles.\n> *   If the text or jmx interfaces are accessed through a browser (e.g. for testing since these interfaces are intended for tools not humans) then the browser must be closed afterwards to terminate the session.\n>\n> For more information - please see the [Manager App How-To](http://localhost:8080/docs/manager-howto.html).\n\n现在我们按照上面的提示，去配置文件中进行修改：\n\n```xml\n  <role rolename=\"manager-gui\"/>\n  <user username=\"admin\" password=\"admin\" roles=\"manager-gui\"/>\n```\n\n现在再次打开管理页面，已经可以成功使用此用户进行登陆了。登录后，展示给我们的是一个图形化界面，我们可以快速预览当前服务器的一些信息，包括已经在运行的Web应用程序，甚至还可以查看当前的Web应用程序有没有出现内存泄露。\n\n同样的，还有一个虚拟主机管理页面，用于一台主机搭建多个Web站点，一般情况下使用不到，这里就不做演示了。\n\n我们可以将我们自己的项目也放到webapp文件夹中，这样就可以直接访问到了，我们在webapp目录下新建test文件夹，将我们之前编写的前端代码全部放入其中（包括html文件、js、css、icon等），重启服务器。\n\n我们可以直接通过 <http://localhost:8080/test/> 来进行访问。\n\n***\n\n## 使用Maven创建Web项目\n\n虽然我们已经可以在Tomcat上部署我们的前端页面了，但是依然只是一个静态页面（每次访问都是同样的样子），那么如何向服务器请求一个动态的页面呢（比如显示我们访问当前页面的时间）这时就需要我们编写一个Web应用程序来实现了，我们需要在用户向服务器发起页面请求时，进行一些处理，再将结果发送给用户的浏览器。\n\n\\*\\*注意：\\*\\*这里需要使用终极版IDEA，如果你的还是社区版，就很难受了。\n\n我们打开IDEA，新建一个项目，选择Java Enterprise（社区版没有此选项！）项目名称随便，项目模板选择Web应用程序，然后我们需要配置Web应用程序服务器，将我们的Tomcat服务器集成到IDEA中。配置很简单，首先点击新建，然后设置Tomcat主目录即可，配置完成后，点击下一步即可，依赖项使用默认即可，然后点击完成，之后IDEA会自动帮助我们创建Maven项目。\n\n创建完成后，直接点击右上角即可运行此项目了，但是我们发现，有一个Servlet页面不生效。\n\n需要注意的是，Tomcat10以上的版本比较新，Servlet API包名发生了一些变化，因此我们需要修改一下依赖：\n\n```xml\n<dependency>\n    <groupId>jakarta.servlet</groupId>\n    <artifactId>jakarta.servlet-api</artifactId>\n    <version>5.0.0</version>\n    <scope>provided</scope>\n</dependency>\n```\n\n注意包名全部从javax改为jakarta，我们需要手动修改一下。\n\n感兴趣的可以了解一下为什么名称被修改了：\n\n> Eclipse基金会在2019年对 Java EE 标准的每个规范进行了重命名，阐明了每个规范在Jakarta EE平台未来的角色。\n>\n> 新的名称Jakarta EE是Java EE的第二次重命名。2006年5月，“J2EE”一词被弃用，并选择了Java EE这个名称。在YouTube还只是一家独立的公司的时候，数字2就就从名字中消失了，而且当时冥王星仍然被认为是一颗行星。同样，作为Java SE 5（2004）的一部分，数字2也从J2SE中删除了，那时谷歌还没有上市。\n>\n> **因为不能再使用javax名称空间，Jakarta EE提供了非常明显的分界线。**\n>\n> *   Jakarta 9（2019及以后）使用jakarta命名空间。\n> *   Java EE 5（2005）到Java EE 8（2017）使用javax命名空间。\n> *   Java EE 4使用javax命名空间。\n\n我们可以将项目直接打包为war包（默认），打包好之后，放入webapp文件夹，就可以直接运行我们通过Java编写的Web应用程序了，访问路径为文件的名称。\n\n## Servlet\n\n前面我们已经完成了基本的环境搭建，那么现在我们就可以开始来了解我们的第一个重要类——Servlet。\n\n它是Java EE的一个标准，大部分的Web服务器都支持此标准，包括Tomcat，就像之前的JDBC一样，由官方定义了一系列接口，而具体实现由我们来编写，最后交给Web服务器（如Tomcat）来运行我们编写的Servlet。\n\n那么，它能做什么呢？我们可以通过实现Servlet来进行动态网页响应，使用Servlet，不再是直接由Tomcat服务器发送我们编写好的静态网页内容（HTML文件），而是由我们通过Java代码进行动态拼接的结果，它能够很好地实现动态网页的返回。\n\n当然，Servlet并不是专用于HTTP协议通信，也可以用于其他的通信，但是一般都是用于HTTP。\n\n### 创建Servlet\n\n那么如何创建一个Servlet呢，非常简单，我们只需要实现`Servlet`类即可，并添加注解`@WebServlet`来进行注册。\n\n```java\n@WebServlet(\"/test\")\npublic class TestServlet implements Servlet {\n        ...实现接口方法\n}\n```\n\n我们现在就可以去访问一下我们的页面：<http://localhost:8080/test/test>\n\n我们发现，直接访问此页面是没有任何内容的，这是因为我们还没有为该请求方法编写实现，这里先不做讲解，后面我们会对浏览器的请求处理做详细的介绍。\n\n除了直接编写一个类，我们也可以在`web.xml`中进行注册，现将类上`@WebServlet`的注解去掉：\n\n```xml\n<servlet>\n    <servlet-name>test</servlet-name>\n    <servlet-class>com.example.webtest.TestServlet</servlet-class>\n</servlet>\n<servlet-mapping>\n    <servlet-name>test</servlet-name>\n    <url-pattern>/test</url-pattern>\n</servlet-mapping>\n```\n\n这样的方式也能注册Servlet，但是显然直接使用注解更加方便，因此之后我们一律使用注解进行开发。只有比较新的版本才支持此注解，老的版本是不支持的哦。\n\n实际上，Tomcat服务器会为我们提供一些默认的Servlet，也就是说在服务器启动后，即使我们什么都不编写，Tomcat也自带了几个默认的Servlet，他们编写在conf目录下的web.xml中：\n\n```xml\n<!-- The mapping for the default servlet -->\n    <servlet-mapping>\n        <servlet-name>default</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n\n    <!-- The mappings for the JSP servlet -->\n    <servlet-mapping>\n        <servlet-name>jsp</servlet-name>\n        <url-pattern>*.jsp</url-pattern>\n        <url-pattern>*.jspx</url-pattern>\n    </servlet-mapping>\n\n```\n\n我们发现，默认的Servlet实际上可以帮助我们去访问一些静态资源，这也是为什么我们启动Tomcat服务器之后，能够直接访问webapp目录下的静态页面。\n\n我们可以将之前编写的页面放入到webapp目录下，来测试一下是否能直接访问。\n\n### 探究Servlet的生命周期\n\n我们已经了解了如何注册一个Servlet，那么我们接着来看看，一个Servlet是如何运行的。\n\n首先我们需要了解，Servlet中的方法各自是在什么时候被调用的，我们先编写一个打印语句来看看：\n\n```java\npublic class TestServlet implements Servlet {\n\n    public TestServlet(){\n        System.out.println(\"我是构造方法！\");\n    }\n\n    @Override\n    public void init(ServletConfig servletConfig) throws ServletException {\n        System.out.println(\"我是init\");\n    }\n\n    @Override\n    public ServletConfig getServletConfig() {\n        System.out.println(\"我是getServletConfig\");\n        return null;\n    }\n\n    @Override\n    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {\n        System.out.println(\"我是service\");\n    }\n\n    @Override\n    public String getServletInfo() {\n        System.out.println(\"我是getServletInfo\");\n        return null;\n    }\n\n    @Override\n    public void destroy() {\n        System.out.println(\"我是destroy\");\n    }\n}\n```\n\n我们首先启动一次服务器，然后访问我们定义的页面，然后再关闭服务器，得到如下的顺序：\n\n> 我是构造方法！\n> 我是init\n> 我是service\n> 我是service（出现两次是因为浏览器请求了2次，是因为有一次是请求favicon.ico，浏览器通病）\n>\n> 我是destroy\n\n我们可以多次尝试去访问此页面，但是init和构造方法只会执行一次，而每次访问都会执行的是`service`方法，因此，一个Servlet的生命周期为：\n\n*   首先执行构造方法完成 Servlet 初始化\n*   Servlet 初始化后调用 **init ()** 方法。\n*   Servlet 调用 **service()** 方法来处理客户端的请求。\n*   Servlet 销毁前调用 **destroy()** 方法。\n*   最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。\n\n现在我们发现，实际上在Web应用程序运行时，每当浏览器向服务器发起一个请求时，都会创建一个线程执行一次`service`方法，来让我们处理用户的请求，并将结果响应给用户。\n\n我们发现`service`方法中，还有两个参数，`ServletRequest`和`ServletResponse`，实际上，用户发起的HTTP请求，就被Tomcat服务器封装为了一个`ServletRequest`对象，我们得到是其实是Tomcat服务器帮助我们创建的一个实现类，HTTP请求报文中的所有内容，都可以从`ServletRequest`对象中获取，同理，`ServletResponse`就是我们需要返回给浏览器的HTTP响应报文实体类封装。\n\n那么我们来看看`ServletRequest`中有哪些内容，我们可以获取请求的一些信息：\n\n```java\n@Override\npublic void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {\n    //首先将其转换为HttpServletRequest（继承自ServletRequest，一般是此接口实现）\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\n        \n        System.out.println(request.getProtocol());  //获取协议版本\n        System.out.println(request.getRemoteAddr());  //获取访问者的IP地址\n  \t\t  System.out.println(request.getMethod());   //获取请求方法\n        //获取头部信息\n        Enumeration<String> enumeration = request.getHeaderNames();\n        while (enumeration.hasMoreElements()){\n            String name = enumeration.nextElement();\n            System.out.println(name + \": \" + request.getHeader(name));\n        }\n}\n```\n\n我们发现，整个HTTP请求报文中的所有内容，都可以通过`HttpServletRequest`对象来获取，当然，它的作用肯定不仅仅是获取头部信息，我们还可以使用它来完成更多操作，后面会一一讲解。\n\n那么我们再来看看`ServletResponse`，这个是服务端的响应内容，我们可以在这里填写我们想要发送给浏览器显示的内容：\n\n```java\n//转换为HttpServletResponse（同上）\nHttpServletResponse response = (HttpServletResponse) servletResponse;\n//设定内容类型以及编码格式（普通HTML文本使用text/html，之后会讲解文件传输）\nresponse.setHeader(\"Content-type\", \"text/html;charset=UTF-8\");\n//获取Writer直接写入内容\nresponse.getWriter().write(\"我是响应内容！\");\n//所有内容写入完成之后，再发送给浏览器\n```\n\n现在我们在浏览器中打开此页面，就能够收到服务器发来的响应内容了。其中，响应头部分，是由Tomcat帮助我们生成的一个默认响应头。\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.qingruanit.net%2FcatchImages%2F20170218%2F1487385940733020268.png\\&refer=http%3A%2F%2Fwww.qingruanit.net\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1640328590\\&t=27d773847d13c6ac21c270379dc25717)\n\n因此，实际上整个流程就已经很清晰明了了。\n\n### 解读和使用HttpServlet\n\n前面我们已经学习了如何创建、注册和使用Servlet，那么我们继续来深入学习Servlet接口的一些实现类。\n\n首先`Servlet`有一个直接实现抽象类`GenericServlet`，那么我们来看看此类做了什么事情。\n\n我们发现，这个类完善了配置文件读取和Servlet信息相关的的操作，但是依然没有去实现service方法，因此此类仅仅是用于完善一个Servlet的基本操作，那么我们接着来看`HttpServlet`，它是遵循HTTP协议的一种Servlet，继承自`GenericServlet`，它根据HTTP协议的规则，完善了service方法。\n\n在阅读了HttpServlet源码之后，我们发现，其实我们只需要继承HttpServlet来编写我们的Servlet就可以了，并且它已经帮助我们提前实现了一些操作，这样就会给我们省去很多的时间。\n\n```java\n@Log\n@WebServlet(\"/test\")\npublic class TestServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.setContentType(\"text/html;charset=UTF-8\");\n        resp.getWriter().write(\"<h1>恭喜你解锁了全新玩法</h1>\");\n    }\n}\n```\n\n现在，我们只需要重写对应的请求方式，就可以快速完成Servlet的编写。\n\n### @WebServlet注解详解\n\n我们接着来看WebServlet注解，我们前面已经得知，可以直接使用此注解来快速注册一个Servlet，那么我们来想细看看此注解还有什么其他的玩法。\n\n首先name属性就是Servlet名称，而urlPatterns和value实际上是同样功能，就是代表当前Servlet的访问路径，它不仅仅可以是一个固定值，还可以进行通配符匹配：\n\n```java\n@WebServlet(\"/test/*\")\n```\n\n上面的路径表示，所有匹配`/test/随便什么`的路径名称，都可以访问此Servlet，我们可以在浏览器中尝试一下。\n\n也可以进行某个扩展名称的匹配：\n\n```java\n@WebServlet(\"*.js\")\n```\n\n这样的话，获取任何以js结尾的文件，都会由我们自己定义的Servlet处理。\n\n那么如果我们的路径为`/`呢？\n\n```java\n@WebServlet(\"/\")\n```\n\n此路径和Tomcat默认为我们提供的Servlet冲突，会直接替换掉默认的，而使用我们的，此路径的意思为，如果没有找到匹配当前访问路径的Servlet，那么久会使用此Servlet进行处理。\n\n我们还可以为一个Servlet配置多个访问路径：\n\n```java\n@WebServlet({\"/test1\", \"/test2\"})\n```\n\n我们接着来看loadOnStartup属性，此属性决定了是否在Tomcat启动时就加载此Servlet，默认情况下，Servlet只有在被访问时才会加载，它的默认值为-1，表示不在启动时加载，我们可以将其修改为大于等于0的数，来开启启动时加载。并且数字的大小决定了此Servlet的启动优先级。\n\n```java\n@Log\n@WebServlet(value = \"/test\", loadOnStartup = 1)\npublic class TestServlet extends HttpServlet {\n\n    @Override\n    public void init() throws ServletException {\n        super.init();\n        log.info(\"我被初始化了！\");\n    }\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.setContentType(\"text/html;charset=UTF-8\");\n        resp.getWriter().write(\"<h1>恭喜你解锁了全新玩法</h1>\");\n    }\n}\n```\n\n其他内容都是Servlet的一些基本配置，这里就不详细讲解了。\n\n### 使用POST请求完成登陆\n\n我们前面已经了解了如何使用Servlet来处理HTTP请求，那么现在，我们就结合前端，来实现一下登陆操作。\n\n我们需要修改一下我们的Servlet，现在我们要让其能够接收一个POST请求：\n\n```java\n@Log\n@WebServlet(\"/login\")\npublic class LoginServlet extends HttpServlet {\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        req.getParameterMap().forEach((k, v) -> {\n            System.out.println(k + \": \" + Arrays.toString(v));\n        });\n    }\n}\n```\n\n`ParameterMap`存储了我们发送的POST请求所携带的表单数据，我们可以直接将其遍历查看，浏览器发送了什么数据。\n\n现在我们再来修改一下前端：\n\n```html\n<body>\n    <h1>登录到系统</h1>\n    <form method=\"post\" action=\"login\">\n        <hr>\n        <div>\n            <label>\n                <input type=\"text\" placeholder=\"用户名\" name=\"username\">\n            </label>\n        </div>\n        <div>\n            <label>\n                <input type=\"password\" placeholder=\"密码\" name=\"password\">\n            </label>\n        </div>\n        <div>\n            <button>登录</button>\n        </div>\n    </form>\n</body>\n```\n\n通过修改form标签的属性，现在我们点击登录按钮，会自动向后台发送一个POST请求，请求地址为当前地址+/login（注意不同路径的写法），也就是我们上面编写的Servlet路径。\n\n运行服务器，测试后发现，在点击按钮后，确实向服务器发起了一个POST请求，并且携带了表单中文本框的数据。\n\n现在，我们根据已有的基础，将其与数据库打通，我们进行一个真正的用户登录操作，首先修改一下Servlet的逻辑：\n\n```java\n@Override\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    //首先设置一下响应类型\n    resp.setContentType(\"text/html;charset=UTF-8\");\n    //获取POST请求携带的表单数据\n    Map<String, String[]> map = req.getParameterMap();\n    //判断表单是否完整\n    if(map.containsKey(\"username\") && map.containsKey(\"password\")) {\n        String username = req.getParameter(\"username\");\n        String password = req.getParameter(\"password\");\n\n        //权限校验（待完善）\n    }else {\n        resp.getWriter().write(\"错误，您的表单数据不完整！\");\n    }\n}\n```\n\n接下来我们再去编写Mybatis的依赖和配置文件，创建一个表，用于存放我们用户的账号和密码。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"${驱动类（含包名）}\"/>\n                <property name=\"url\" value=\"${数据库连接URL}\"/>\n                <property name=\"username\" value=\"${用户名}\"/>\n                <property name=\"password\" value=\"${密码}\"/>\n            </dataSource>\n        </environment>\n    </environments>\n</configuration>\n```\n\n```xml\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>3.5.7</version>\n</dependency>\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.27</version>\n</dependency>\n```\n\n配置完成后，在我们的Servlet的init方法中编写Mybatis初始化代码，因为它只需要初始化一次。\n\n```java\nSqlSessionFactory factory;\n@SneakyThrows\n@Override\npublic void init() throws ServletException {\n    factory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(\"mybatis-config.xml\"));\n}\n```\n\n现在我们创建一个实体类以及Mapper来进行用户信息查询：\n\n```java\n@Data\npublic class User {\n    String username;\n    String password;\n}\n```\n\n```java\npublic interface UserMapper {\n\n    @Select(\"select * from users where username = #{username} and password = #{password}\")\n    User getUser(@Param(\"username\") String username, @Param(\"password\") String password);\n}\n```\n\n```xml\n<mappers>\n    <mapper class=\"com.example.dao.UserMapper\"/>\n</mappers>\n```\n\n好了，现在完事具备，只欠东风了，我们来完善一下登陆验证逻辑：\n\n```java\n//登陆校验（待完善）\ntry (SqlSession sqlSession = factory.openSession(true)){\n    UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n    User user = mapper.getUser(username, password);\n    //判断用户是否登陆成功，若查询到信息则表示存在此用户\n    if(user != null){\n        resp.getWriter().write(\"登陆成功！\");\n    }else {\n        resp.getWriter().write(\"登陆失败，请验证您的用户名或密码！\");\n    }\n}\n```\n\n现在再去浏览器上进行测试吧！\n\n注册界面其实是同理的，这里就不多做讲解了。\n\n### 上传和下载文件\n\n首先我们来看看比较简单的下载文件，首先将我们的icon.png放入到resource文件夹中，接着我们编写一个Servlet用于处理文件下载：\n\n```java\n@WebServlet(\"/file\")\npublic class FileServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n      resp.setContentType(\"image/png\");  \n      OutputStream outputStream = resp.getOutputStream();\n      InputStream inputStream = Resources.getResourceAsStream(\"icon.png\");\n\n    }\n}\n```\n\n为了更加快速地编写IO代码，我们可以引入一个工具库：\n\n```xml\n<dependency>\n    <groupId>commons-io</groupId>\n    <artifactId>commons-io</artifactId>\n    <version>2.6</version>\n</dependency>\n```\n\n使用此类库可以快速完成IO操作：\n\n```java\nresp.setContentType(\"image/png\");\nOutputStream outputStream = resp.getOutputStream();\nInputStream inputStream = Resources.getResourceAsStream(\"icon.png\");\n//直接使用copy方法完成转换\nIOUtils.copy(inputStream, outputStream);\n```\n\n现在我们在前端页面添加一个链接，用于下载此文件：\n\n```html\n<hr>\n<a href=\"file\" download=\"icon.png\">点我下载高清资源</a>\n```\n\n下载文件搞定，那么如何上传一个文件呢？\n\n首先我们编写前端部分：\n\n```html\n<form method=\"post\" action=\"file\" enctype=\"multipart/form-data\">\n    <div>\n        <input type=\"file\" name=\"test-file\">\n    </div>\n    <div>\n        <button>上传文件</button>\n    </div>\n</form>\n```\n\n注意必须添加`enctype=\"multipart/form-data\"`，来表示此表单用于文件传输。\n\n现在我们来修改一下Servlet代码：\n\n```java\n@MultipartConfig\n@WebServlet(\"/file\")\npublic class FileServlet extends HttpServlet {\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        try(FileOutputStream stream = new FileOutputStream(\"/Users/nagocoler/Documents/IdeaProjects/WebTest/test.png\")){\n            Part part = req.getPart(\"test-file\");\n            IOUtils.copy(part.getInputStream(), stream);\n            resp.setContentType(\"text/html;charset=UTF-8\");\n            resp.getWriter().write(\"文件上传成功！\");\n        }\n    }\n}\n```\n\n注意，必须添加`@MultipartConfig`注解来表示此Servlet用于处理文件上传请求。\n\n现在我们再运行服务器，并将我们刚才下载的文件又上传给服务端。\n\n### 使用XHR请求数据\n\n现在我们希望，网页中的部分内容，可以动态显示，比如网页上有一个时间，旁边有一个按钮，点击按钮就可以刷新当前时间。\n\n这个时候就需要我们在网页展示时向后端发起请求了，并根据后端响应的结果，动态地更新页面中的内容，要实现此功能，就需要用到JavaScript来帮助我们，首先在js中编写我们的XHR请求，并在请求中完成动态更新：\n\n```js\nfunction updateTime() {\n    let xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            document.getElementById(\"time\").innerText = xhr.responseText\n        }\n    };\n    xhr.open('GET', 'time', true);\n    xhr.send();\n}\n```\n\n接着修改一下前端页面，添加一个时间显示区域：\n\n```html\n<hr>\n<div id=\"time\"></div>\n<br>\n<button onclick=\"updateTime()\">更新数据</button>\n<script>\n    updateTime()\n</script>\n```\n\n最后创建一个Servlet用于处理时间更新请求：\n\n```java\n@WebServlet(\"/time\")\npublic class TimeServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy年MM月dd日 HH:mm:ss\");\n        String date = dateFormat.format(new Date());\n        resp.setContentType(\"text/html;charset=UTF-8\");\n        resp.getWriter().write(date);\n    }\n}\n```\n\n现在点击按钮就可以更新了。\n\nGET请求也能传递参数，这里做一下演示。\n\n### 重定向与请求转发\n\n当我们希望用户登录完成之后，直接跳转到网站的首页，那么这个时候，我们就可以使用重定向来完成。当浏览器收到一个重定向的响应时，会按照重定向响应给出的地址，再次向此地址发出请求。\n\n实现重定向很简单，只需要调用一个方法即可，我们修改一下登陆成功后执行的代码：\n\n```java\nresp.sendRedirect(\"time\");\n```\n\n调用后，响应的状态码会被设置为302，并且响应头中添加了一个Location属性，此属性表示，需要重定向到哪一个网址。\n\n现在，如果我们成功登陆，那么服务器会发送给我们一个重定向响应，这时，我们的浏览器会去重新请求另一个网址。这样，我们在登陆成功之后，就可以直接帮助用户跳转到用户首页了。\n\n那么我们接着来看请求转发，请求转发其实是一种服务器内部的跳转机制，我们知道，重定向会使得浏览器去重新请求一个页面，而请求转发则是服务器内部进行跳转，它的目的是，直接将本次请求转发给其他Servlet进行处理，并由其他Servlet来返回结果，因此它是在进行内部的转发。\n\n```java\nreq.getRequestDispatcher(\"/time\").forward(req, resp);\n```\n\n现在，在登陆成功的时候，我们将请求转发给处理时间的Servlet，注意这里的路径规则和之前的不同，我们需要填写Servlet上指明的路径，并且请求转发只能转发到此应用程序内部的Servlet，不能转发给其他站点或是其他Web应用程序。\n\n现在再次进行登陆操作，我们发现，返回结果为一个405页面，证明了，我们的请求现在是被另一个Servlet进行处理，并且请求的信息全部被转交给另一个Servlet，由于此Servlet不支持POST请求，因此返回405状态码。\n\n那么也就是说，该请求包括请求参数也一起被传递了，那么我们可以尝试获取以下POST请求的参数。\n\n现在我们给此Servlet添加POST请求处理，直接转交给Get请求处理：\n\n```java\n@Override\nprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    this.doGet(req, resp);\n}\n```\n\n再次访问，成功得到结果，但是我们发现，浏览器只发起了一次请求，并没有再次请求新的URL，也就是说，这一次请求直接返回了请求转发后的处理结果。\n\n那么，请求转发有什么好处呢？它可以携带数据！\n\n```java\nreq.setAttribute(\"test\", \"我是请求转发前的数据\");\nreq.getRequestDispatcher(\"/time\").forward(req, resp);\n```\n\n```java\nSystem.out.println(req.getAttribute(\"test\"));\n```\n\n通过`setAttribute`方法来给当前请求添加一个附加数据，在请求转发后，我们可以直接获取到该数据。\n\n重定向属于2次请求，因此无法使用这种方式来传递数据，那么，如何在重定向之间传递数据呢？我们可以使用即将要介绍的ServletContext对象。\n\n最后总结，两者的区别为：\n\n*   请求转发是一次请求，重定向是两次请求\n*   请求转发地址栏不会发生改变， 重定向地址栏会发生改变\n*   请求转发可以共享请求参数 ，重定向之后，就获取不了共享参数了\n*   请求转发只能转发给内部的Servlet\n\n### 了解ServletContext对象\n\nServletContext全局唯一，它是属于整个Web应用程序的，我们可以通过`getServletContext()`来获取到此对象。\n\n此对象也能设置附加值：\n\n```java\nServletContext context = getServletContext();\ncontext.setAttribute(\"test\", \"我是重定向之前的数据\");\nresp.sendRedirect(\"time\");\n```\n\n```java\nSystem.out.println(getServletContext().getAttribute(\"test\"));\n```\n\n因为无论在哪里，无论什么时间，获取到的ServletContext始终是同一个对象，因此我们可以随时随地获取我们添加的属性。\n\n它不仅仅可以用来进行数据传递，还可以做一些其他的事情，比如请求转发：\n\n```java\ncontext.getRequestDispatcher(\"/time\").forward(req, resp);\n```\n\n它还可以获取根目录下的资源文件（注意是webapp根目录下的，不是resource中的资源）\n\n### 初始化参数\n\n初始化参数类似于初始化配置需要的一些值，比如我们的数据库连接相关信息，就可以通过初始化参数来给予Servlet，或是一些其他的配置项，也可以使用初始化参数来实现。\n\n我们可以给一个Servlet添加一些初始化参数：\n\n```java\n@WebServlet(value = \"/login\", initParams = {\n        @WebInitParam(name = \"test\", value = \"我是一个默认的初始化参数\")\n})\n```\n\n它也是以键值对形式保存的，我们可以直接通过Servlet的`getInitParameter`方法获取：\n\n```java\nSystem.out.println(getInitParameter(\"test\"));\n```\n\n但是，这里的初始化参数仅仅是针对于此Servlet，我们也可以定义全局初始化参数，只需要在web.xml编写即可：\n\n```xml\n<context-param>\n    <param-name>lbwnb</param-name>\n    <param-value>我是全局初始化参数</param-value>\n</context-param>\n```\n\n我们需要使用ServletContext来读取全局初始化参数：\n\n```java\nServletContext context = getServletContext();\nSystem.out.println(context.getInitParameter(\"lbwnb\"));\n```\n\n有关ServletContext其他的内容，我们需要完成后面内容的学习，才能理解。\n\n***\n\n## Cookie\n\n什么是Cookie？不是曲奇，它可以在浏览器中保存一些信息，并且在下次请求时，请求头中会携带这些信息。\n\n我们可以编写一个测试用例来看看：\n\n```java\nCookie cookie = new Cookie(\"test\", \"yyds\");\nresp.addCookie(cookie);\nresp.sendRedirect(\"time\");\n```\n\n```java\nfor (Cookie cookie : req.getCookies()) {\n    System.out.println(cookie.getName() + \": \" + cookie.getValue());\n}\n```\n\n我们可以观察一下，在`HttpServletResponse`中添加Cookie之后，浏览器的响应头中会包含一个`Set-Cookie`属性，同时，在重定向之后，我们的请求头中，会携带此Cookie作为一个属性，同时，我们可以直接通过`HttpServletRequest`来快速获取有哪些Cookie信息。\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.uml.org.cn%2Fxjs%2Fimages%2F2019032226.jpg\\&refer=http%3A%2F%2Fwww.uml.org.cn\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1640427806\\&t=a452f8b27a0769ca82d2269664e71a5e)\n\n还有这么神奇的事情吗？那么我们来看看，一个Cookie包含哪些信息：\n\n*   name - Cookie的名称，Cookie一旦创建，名称便不可更改\n*   value - Cookie的值，如果值为Unicode字符，需要为字符编码。如果为二进制数据，则需要使用BASE64编码\n*   maxAge - Cookie失效的时间，单位秒。如果为正数，则该Cookie在maxAge秒后失效。如果为负数，该Cookie为临时Cookie，关闭浏览器即失效，浏览器也不会以任何形式保存该Cookie。如果为0，表示删除该Cookie。默认为-1。\n*   secure - 该Cookie是否仅被使用安全协议传输。安全协议。安全协议有HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false。\n*   path - Cookie的使用路径。如果设置为“/sessionWeb/”，则只有contextPath为“/sessionWeb”的程序可以访问该Cookie。如果设置为“/”，则本域名下contextPath都可以访问该Cookie。注意最后一个字符必须为“/”。\n*   domain - 可以访问该Cookie的域名。如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”。\n*   comment - 该Cookie的用处说明，浏览器显示Cookie信息的时候显示该说明。\n*   version - Cookie使用的版本号。0表示遵循Netscape的Cookie规范，1表示遵循W3C的RFC 2109规范\n\n我们发现，最关键的其实是`name`、`value`、`maxAge`、`domain`属性。\n\n那么我们来尝试修改一下maxAge来看看失效时间：\n\n```java\ncookie.setMaxAge(20);\n```\n\n设定为20秒，我们可以直接看到，响应头为我们设定了20秒的过期时间。20秒内访问都会携带此Cookie，而超过20秒，Cookie消失。\n\n既然了解了Cookie的作用，我们就可以通过使用Cookie来实现记住我功能，我们可以将用户名和密码全部保存在Cookie中，如果访问我们的首页时携带了这些Cookie，那么我们就可以直接为用户进行登陆，如果登陆成功则直接跳转到首页，如果登陆失败，则清理浏览器中的Cookie。\n\n那么首先，我们先在前端页面的表单中添加一个勾选框：\n\n```html\n<div>\n    <label>\n        <input type=\"checkbox\" placeholder=\"记住我\" name=\"remember-me\">\n        记住我\n    </label>\n</div>\n```\n\n接着，我们在登陆成功时进行判断，如果用户勾选了记住我，那么就讲Cookie存储到本地：\n\n```java\nif(map.containsKey(\"remember-me\")){   //若勾选了勾选框，那么会此表单信息\n    Cookie cookie_username = new Cookie(\"username\", username);\n    cookie_username.setMaxAge(30);\n    Cookie cookie_password = new Cookie(\"password\", password);\n    cookie_password.setMaxAge(30);\n    resp.addCookie(cookie_username);\n    resp.addCookie(cookie_password);\n}\n```\n\n然后，我们修改一下默认的请求地址，现在一律通过`http://localhost:8080/yyds/login`进行登陆，那么我们需要添加GET请求的相关处理：\n\n```java\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    Cookie[] cookies = req.getCookies();\n    if(cookies != null){\n        String username = null;\n        String password = null;\n        for (Cookie cookie : cookies) {\n            if(cookie.getName().equals(\"username\")) username = cookie.getValue();\n            if(cookie.getName().equals(\"password\")) password = cookie.getValue();\n        }\n        if(username != null && password != null){\n            //登陆校验\n            try (SqlSession sqlSession = factory.openSession(true)){\n                UserMapper mapper = sqlSession.getMapper(UserMapper.class);\n                User user = mapper.getUser(username, password);\n                if(user != null){\n                    resp.sendRedirect(\"time\");\n                    return;   //直接返回\n                }\n            }\n        }\n    }\n    req.getRequestDispatcher(\"/\").forward(req, resp);   //正常情况还是转发给默认的Servlet帮我们返回静态页面\n}\n```\n\n现在，30秒内都不需要登陆，访问登陆页面后，会直接跳转到time页面。\n\n现在已经离我们理想的页面越来越接近了，但是仍然有一个问题，就是我们的首页，无论是否登陆，所有人都可以访问，那么，如何才可以实现只有登陆之后才能访问呢？这就需要用到Session了。\n\n***\n\n## Session\n\n由于HTTP是无连接的，那么如何能够辨别当前的请求是来自哪个用户发起的呢？Session就是用来处理这种问题的，每个用户的会话都会有一个自己的Session对象，来自同一个浏览器的所有请求，就属于同一个会话。\n\n但是HTTP协议是无连接的呀，那Session是如何做到辨别是否来自同一个浏览器呢？Session实际上是基于Cookie实现的，前面我们了解了Cookie，我们知道，服务端可以将Cookie保存到浏览器，当浏览器下次访问时，就会附带这些Cookie信息。\n\nSession也利用了这一点，它会给浏览器设定一个叫做`JSESSIONID`的Cookie，值是一个随机的排列组合，而此Cookie就对应了你属于哪一个对话，只要我们的浏览器携带此Cookie访问服务器，服务器就会通过Cookie的值进行辨别，得到对应的Session对象，因此，这样就可以追踪到底是哪一个浏览器在访问服务器。\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.xaecong.com%2Fuploadfile%2F2018-5%2F20180511113613649.gif\\&refer=http%3A%2F%2Fwww.xaecong.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1640433362\\&t=bbfd240d9a7ec60468840f01b097d2a2)\n\n那么现在，我们在用户登录成功之后，将用户对象添加到Session中，只要是此用户发起的请求，我们都可以从`HttpSession`中读取到存储在会话中的数据：\n\n```java\nHttpSession session = req.getSession();\nsession.setAttribute(\"user\", user);\n```\n\n同时，如果用户没有登录就去访问首页，那么我们将发送一个重定向请求，告诉用户，需要先进行登录才可以访问：\n\n```java\nHttpSession session = req.getSession();\nUser user = (User) session.getAttribute(\"user\");\nif(user == null) {\n    resp.sendRedirect(\"login\");\n    return;\n}\n```\n\n在访问的过程中，注意观察Cookie变化。\n\nSession并不是永远都存在的，它有着自己的过期时间，默认时间为30分钟，若超过此时间，Session将丢失，我们可以在配置文件中修改过期时间：\n\n```xml\n<session-config>\n    <session-timeout>1</session-timeout>\n</session-config>\n```\n\n我们也可以在代码中使用`invalidate`方法来使Session立即失效：\n\n```java\nsession.invalidate();\n```\n\n现在，通过Session，我们就可以更好地控制用户对于资源的访问，只有完成登陆的用户才有资格访问首页。\n\n## Filter\n\n有了Session之后，我们就可以很好地控制用户的登陆验证了，只有授权的用户，才可以访问一些页面，但是我们需要一个一个去进行配置，还是太过复杂，能否一次性地过滤掉没有登录验证的用户呢？\n\n过滤器相当于在所有访问前加了一堵墙，来自浏览器的所有访问请求都会首先经过过滤器，只有过滤器允许通过的请求，才可以顺利地到达对应的Servlet，而过滤器不允许的通过的请求，我们可以自由地进行控制是否进行重定向或是请求转发。并且过滤器可以添加很多个，就相当于添加了很多堵墙，我们的请求只有穿过层层阻碍，才能与Servlet相拥，像极了爱情。\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimages.cnitblog.com%2Fblog%2F150046%2F201501%2F072114593437292.png\\&refer=http%3A%2F%2Fimages.cnitblog.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1640479081\\&t=a1259950e28398b095ea7ce30c022904)\n\n添加一个过滤器非常简单，只需要实现Filter接口，并添加`@WebFilter`注解即可：\n\n```java\n@WebFilter(\"/*\")   //路径的匹配规则和Servlet一致，这里表示匹配所有请求\npublic class TestFilter implements Filter {\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        \n    }\n}\n```\n\n这样我们就成功地添加了一个过滤器，那么添加一句打印语句看看，是否所有的请求都会经过此过滤器：\n\n```java\nHttpServletRequest request = (HttpServletRequest) servletRequest;\nSystem.out.println(request.getRequestURL());\n```\n\n我们发现，现在我们发起的所有请求，一律需要经过此过滤器，并且所有的请求都没有任何的响应内容。\n\n那么如何让请求可以顺利地到达对应的Servlet，也就是说怎么让这个请求顺利通过呢？我们只需要在最后添加一句：\n\n```java\nfilterChain.doFilter(servletRequest, servletResponse);\n```\n\n那么这行代码是什么意思呢？\n\n由于我们整个应用程序可能存在多个过滤器，那么这行代码的意思实际上是将此请求继续传递给下一个过滤器，当没有下一个过滤器时，才会到达对应的Servlet进行处理，我们可以再来创建一个过滤器看看效果：\n\n```java\n@WebFilter(\"/*\")\npublic class TestFilter2 implements Filter {\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        System.out.println(\"我是2号过滤器\");\n        filterChain.doFilter(servletRequest, servletResponse);\n    }\n}\n```\n\n由于过滤器的过滤顺序是按照类名的自然排序进行的，因此我们将第一个过滤器命名进行调整。\n\n我们发现，在经过第一个过滤器之后，会继续前往第二个过滤器，只有两个过滤器全部经过之后，才会到达我们的Servlet中。\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimages.cnitblog.com%2Fblog%2F34303%2F201212%2F30153033-d9e09a9c8dfe403fb9f6303052ba4b6c.png\\&refer=http%3A%2F%2Fimages.cnitblog.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1640479150\\&t=d14eb2b4c2a3d6e987fc9cf6680a326f)\n\n实际上，当`doFilter`方法调用时，就会一直向下直到Servlet，在Servlet处理完成之后，又依次返回到最前面的Filter，类似于递归的结构，我们添加几个输出语句来判断一下：\n\n```java\n@Override\npublic void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n    System.out.println(\"我是2号过滤器\");\n    filterChain.doFilter(servletRequest, servletResponse);\n    System.out.println(\"我是2号过滤器，处理后\");\n}\n```\n\n```java\n@Override\npublic void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n    System.out.println(\"我是1号过滤器\");\n    filterChain.doFilter(servletRequest, servletResponse);\n    System.out.println(\"我是1号过滤器，处理后\");\n}\n```\n\n最后验证我们的结论。\n\n同Servlet一样，Filter也有对应的HttpFilter专用类，它针对HTTP请求进行了专门处理，因此我们可以直接使用HttpFilter来编写：\n\n```java\npublic abstract class HttpFilter extends GenericFilter {\n    private static final long serialVersionUID = 7478463438252262094L;\n\n    public HttpFilter() {\n    }\n\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n        if (req instanceof HttpServletRequest && res instanceof HttpServletResponse) {\n            this.doFilter((HttpServletRequest)req, (HttpServletResponse)res, chain);\n        } else {\n            throw new ServletException(\"non-HTTP request or response\");\n        }\n    }\n\n    protected void doFilter(HttpServletRequest req, HttpServletResponse res, FilterChain chain) throws IOException, ServletException {\n        chain.doFilter(req, res);\n    }\n}\n```\n\n那么现在，我们就可以给我们的应用程序添加一个过滤器，用户在未登录情况下，只允许静态资源和登陆页面请求通过，登陆之后畅行无阻：\n\n```java\n@WebFilter(\"/*\")\npublic class MainFilter extends HttpFilter {\n    @Override\n    protected void doFilter(HttpServletRequest req, HttpServletResponse res, FilterChain chain) throws IOException, ServletException {\n        String url = req.getRequestURL().toString();\n        //判断是否为静态资源\n        if(!url.endsWith(\".js\") && !url.endsWith(\".css\") && !url.endsWith(\".png\")){\n            HttpSession session = req.getSession();\n            User user = (User) session.getAttribute(\"user\");\n            //判断是否未登陆\n            if(user == null && !url.endsWith(\"login\")){\n                res.sendRedirect(\"login\");\n                return;\n            }\n        }\n        //交给过滤链处理\n        chain.doFilter(req, res);\n    }\n}\n```\n\n现在，我们的页面已经基本完善为我们想要的样子了。\n\n当然，可能跟着教程编写的项目比较乱，大家可以自己花费一点时间来重新编写一个Web应用程序，加深对之前讲解知识的理解。我们也会在之后安排一个编程实战进行深化练习。\n\n***\n\n## Listener\n\n监听器并不是我们学习的重点内容，那么什么是监听器呢？\n\n如果我们希望，在应用程序加载的时候，或是Session创建的时候，亦或是在Request对象创建的时候进行一些操作，那么这个时候，我们就可以使用监听器来实现。\n\n![img](https://img-blog.csdn.net/20180825212011379?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE1MjA0MTc5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\n默认为我们提供了很多类型的监听器，我们这里就演示一下监听Session的创建即可：\n\n```java\n@WebListener\npublic class TestListener implements HttpSessionListener {\n    @Override\n    public void sessionCreated(HttpSessionEvent se) {\n        System.out.println(\"有一个Session被创建了\");\n    }\n}\n```\n\n有关监听器相关内容，了解即可。\n\n***\n\n## 了解JSP页面与加载规则\n\n前面我们已经完成了整个Web应用程序生命周期中所有内容的学习，我们已经完全了解，如何编写一个Web应用程序，并放在Tomcat上部署运行，以及如何控制浏览器发来的请求，通过Session+Filter实现用户登陆验证，通过Cookie实现自动登陆等操作。到目前为止，我们已经具备编写一个完整Web网站的能力。\n\n在之前的教程中，我们的前端静态页面并没有与后端相结合，我们前端页面所需的数据全部需要单独向后端发起请求获取，并动态进行内容填充，这是一种典型的前后端分离写法，前端只负责要数据和显示数据，后端只负责处理数据和提供数据，这也是现在更流行的一种写法，让前端开发者和后端开发者各尽其责，更加专一，这才是我们所希望的开发模式。\n\nJSP并不是我们需要重点学习的内容，因为它已经过时了，使用JSP会导致前后端严重耦合，因此这里只做了解即可。\n\nJSP其实就是一种模板引擎，那么何谓模板引擎呢？顾名思义，它就是一个模板，而模板需要我们填入数据，才可以变成一个页面，也就是说，我们可以直接在前端页面中直接填写数据，填写后生成一个最终的HTML页面返回给前端。\n\n首先我们来创建一个新的项目，项目创建成功后，删除Java目录下的内容，只留下默认创建的jsp文件，我们发现，在webapp目录中，存在一个`index.jsp`文件，现在我们直接运行项目，会直接访问这个JSP页面。\n\n```jsp\n<%@ page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\" %>\n<!DOCTYPE html>\n<html>\n<head>\n    <title>JSP - Hello World</title>\n</head>\n<body>\n<h1><%= \"Hello World!\" %>\n</h1>\n<br/>\n<a href=\"hello-servlet\">Hello Servlet</a>\n</body>\n</html>\n```\n\n但是我们并没有编写对应的Servlet来解析啊，那么为什么这个JSP页面会被加载呢？\n\n实际上，我们一开始提到的两个Tomcat默认的Servlet中，一个是用于请求静态资源，还有一个就是用于处理jsp的：\n\n```xml\n<!-- The mappings for the JSP servlet -->\n    <servlet-mapping>\n        <servlet-name>jsp</servlet-name>\n        <url-pattern>*.jsp</url-pattern>\n        <url-pattern>*.jspx</url-pattern>\n    </servlet-mapping>\n```\n\n那么，JSP和普通HTML页面有什么区别呢，我们发现它的语法和普通HTML页面几乎一致，我们可以直接在JSP中编写Java代码，并在页面加载的时候执行，我们随便找个地方插入：\n\n```jsp\n<%\n    System.out.println(\"JSP页面被加载\");\n%>\n```\n\n我们发现，请求一次页面，页面就会加载一次，并执行我们填写的Java代码。也就是说，我们可以直接在此页面中执行Java代码来填充我们的数据，这样我们的页面就变成了一个动态页面，使用`<%= %>`来填写一个值：\n\n```jsp\n<h1><%= new Date() %></h1>\n```\n\n现在访问我们的网站，每次都会创建一个新的Date对象，因此每次访问获取的时间都不一样，我们的网站已经算是一个动态的网站的了。\n\n虽然这样在一定程度上上为我们提供了便利，但是这样的写法相当于整个页面既要编写前端代码，也要编写后端代码，随着项目的扩大，整个页面会显得难以阅读，并且现在都是前后端开发人员职责非常明确的，如果要编写JSP页面，那就必须要招一个既会前端也会后端的程序员，这样显然会导致不必要的开销。\n\n那么我们来研究一下，为什么JSP页面能够在加载的时候执行Java代码呢？\n\n首先我们将此项目打包，并在Tomcat服务端中运行，生成了一个文件夹并且可以正常访问。\n\n我们现在看到`work`目录，我们发现这个里面多了一个`index_jsp.java`和`index_jsp.class`，那么这些东西是干嘛的呢，我们来反编译一下就啥都知道了：\n\n```java\npublic final class index_jsp extends org.apache.jasper.runtime.HttpJspBase  //继承自HttpServlet\n    implements org.apache.jasper.runtime.JspSourceDependent,\n                 org.apache.jasper.runtime.JspSourceImports {\n\n ...\n\n  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)\n      throws java.io.IOException, jakarta.servlet.ServletException {\n\n    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {\n      final java.lang.String _jspx_method = request.getMethod();\n      if (\"OPTIONS\".equals(_jspx_method)) {\n        response.setHeader(\"Allow\",\"GET, HEAD, POST, OPTIONS\");\n        return;\n      }\n      if (!\"GET\".equals(_jspx_method) && !\"POST\".equals(_jspx_method) && !\"HEAD\".equals(_jspx_method)) {\n        response.setHeader(\"Allow\",\"GET, HEAD, POST, OPTIONS\");\n        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, \"JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS\");\n        return;\n      }\n    }\n\n    final jakarta.servlet.jsp.PageContext pageContext;\n    jakarta.servlet.http.HttpSession session = null;\n    final jakarta.servlet.ServletContext application;\n    final jakarta.servlet.ServletConfig config;\n    jakarta.servlet.jsp.JspWriter out = null;\n    final java.lang.Object page = this;\n    jakarta.servlet.jsp.JspWriter _jspx_out = null;\n    jakarta.servlet.jsp.PageContext _jspx_page_context = null;\n\n\n    try {\n      response.setContentType(\"text/html; charset=UTF-8\");\n      pageContext = _jspxFactory.getPageContext(this, request, response,\n             null, true, 8192, true);\n      _jspx_page_context = pageContext;\n      application = pageContext.getServletContext();\n      config = pageContext.getServletConfig();\n      session = pageContext.getSession();\n      out = pageContext.getOut();\n      _jspx_out = out;\n\n      out.write(\"\\n\");\n      out.write(\"\\n\");\n      out.write(\"<!DOCTYPE html>\\n\");\n      out.write(\"<html>\\n\");\n      out.write(\"<head>\\n\");\n      out.write(\"    <title>JSP - Hello World</title>\\n\");\n      out.write(\"</head>\\n\");\n      out.write(\"<body>\\n\");\n      out.write(\"<h1>\");\n      out.print( new Date() );\n      out.write(\"</h1>\\n\");\n\n    System.out.println(\"JSP页面被加载\");\n\n      out.write(\"\\n\");\n      out.write(\"<br/>\\n\");\n      out.write(\"<a href=\\\"hello-servlet\\\">Hello Servlet</a>\\n\");\n      out.write(\"</body>\\n\");\n      out.write(\"</html>\");\n    } catch (java.lang.Throwable t) {\n      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){\n        out = _jspx_out;\n        if (out != null && out.getBufferSize() != 0)\n          try {\n            if (response.isCommitted()) {\n              out.flush();\n            } else {\n              out.clearBuffer();\n            }\n          } catch (java.io.IOException e) {}\n        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);\n        else throw new ServletException(t);\n      }\n    } finally {\n      _jspxFactory.releasePageContext(_jspx_page_context);\n    }\n  }\n}\n```\n\n我们发现，它是继承自`HttpJspBase`类，我们可以反编译一下jasper.jar（它在tomcat的lib目录中）来看看:\n\n```java\npackage org.apache.jasper.runtime;\n\nimport jakarta.servlet.ServletConfig;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServlet;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.jsp.HttpJspPage;\nimport java.io.IOException;\nimport org.apache.jasper.compiler.Localizer;\n\npublic abstract class HttpJspBase extends HttpServlet implements HttpJspPage {\n    private static final long serialVersionUID = 1L;\n\n    protected HttpJspBase() {\n    }\n\n    public final void init(ServletConfig config) throws ServletException {\n        super.init(config);\n        this.jspInit();\n        this._jspInit();\n    }\n\n    public String getServletInfo() {\n        return Localizer.getMessage(\"jsp.engine.info\", new Object[]{\"3.0\"});\n    }\n\n    public final void destroy() {\n        this.jspDestroy();\n        this._jspDestroy();\n    }\n\n    public final void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        this._jspService(request, response);\n    }\n\n    public void jspInit() {\n    }\n\n    public void _jspInit() {\n    }\n\n    public void jspDestroy() {\n    }\n\n    protected void _jspDestroy() {\n    }\n\n    public abstract void _jspService(HttpServletRequest var1, HttpServletResponse var2) throws ServletException, IOException;\n}\n```\n\n实际上，Tomcat在加载JSP页面时，会将其动态转换为一个java类并编译为class进行加载，而生成的Java类，正是一个Servlet的子类，而页面的内容全部被编译为输出字符串，这便是JSP的加载原理，因此，JSP本质上依然是一个Servlet！\n\n![点击查看源网页](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.debugrun.com%2Fpic%2F2017%2F10%2F8%2F017e6d66d6d9589dfc7377a052ca8047.png\\&refer=http%3A%2F%2Fimg.debugrun.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1640487718\\&t=2656b55a2eb461b4a90afb1076aeb355)\n\n如果同学们感兴趣的话，可以查阅一下其他相关的教程，本教程不再讲解此技术。\n\n***\n\n## 使用Thymeleaf模板引擎\n\n虽然JSP为我们带来了便捷，但是其缺点也是显而易见的，那么有没有一种既能实现模板，又能兼顾前后端分离的模板引擎呢？\n\n**Thymeleaf**（百里香叶）是一个适用于Web和独立环境的现代化服务器端Java模板引擎，官方文档：[https://www.thymeleaf.org/documentation.html。](https://www.thymeleaf.org/documentation.html%E3%80%82)\n\n那么它和JSP相比，好在哪里呢，我们来看官网给出的例子：\n\n```html\n<table>\n  <thead>\n    <tr>\n      <th th:text=\"#{msgs.headers.name}\">Name</th>\n      <th th:text=\"#{msgs.headers.price}\">Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr th:each=\"prod: ${allProducts}\">\n      <td th:text=\"${prod.name}\">Oranges</td>\n      <td th:text=\"${#numbers.formatDecimal(prod.price, 1, 2)}\">0.99</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n我们可以在前端页面中填写占位符，而这些占位符的实际值则由后端进行提供，这样，我们就不用再像JSP那样前后端都写在一起了。\n\n那么我们来创建一个例子感受一下，首先还是新建一个项目，注意，在创建时，勾选Thymeleaf依赖。\n\n首先编写一个前端页面，名称为`test.html`，注意，是放在resource目录下，在html标签内部添加`xmlns:th=\"http://www.thymeleaf.org\"`引入Thymeleaf定义的标签属性：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <div th:text=\"${title}\"></div>\n</body>\n</html>\n```\n\n接着我们编写一个Servlet作为默认页面：\n\n```java\n@WebServlet(\"/index\")\npublic class HelloServlet extends HttpServlet {\n\n    TemplateEngine engine;\n    @Override\n    public void init() throws ServletException {\n        engine = new TemplateEngine();\n        ClassLoaderTemplateResolver r = new ClassLoaderTemplateResolver();\n        engine.setTemplateResolver(r);\n    }\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        Context context = new Context();\n        context.setVariable(\"title\", \"我是标题\");\n        engine.process(\"test.html\", context, resp.getWriter());\n    }\n}\n```\n\n我们发现，浏览器得到的页面，就是已经经过模板引擎解析好的页面，而我们的代码依然是后端处理数据，前端展示数据，因此使用Thymeleaf就能够使得当前Web应用程序的前后端划分更加清晰。\n\n虽然Thymeleaf在一定程度上分离了前后端，但是其依然是在后台渲染HTML页面并发送给前端，并不是真正意义上的前后端分离。\n\n### Thymeleaf语法基础\n\n那么，如何使用Thymeleaf呢？\n\n首先我们看看后端部分，我们需要通过`TemplateEngine`对象来将模板文件渲染为最终的HTML页面：\n\n```java\nTemplateEngine engine;\n@Override\npublic void init() throws ServletException {\n    engine = new TemplateEngine();\n  \t//设定模板解析器决定了从哪里获取模板文件，这里直接使用ClassLoaderTemplateResolver表示加载内部资源文件\n    ClassLoaderTemplateResolver r = new ClassLoaderTemplateResolver();\n    engine.setTemplateResolver(r);\n}\n```\n\n由于此对象只需要创建一次，之后就可以一直使用了。接着我们来看如何使用模板引擎进行解析：\n\n```java\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    //创建上下文，上下文中包含了所有需要替换到模板中的内容\n    Context context = new Context();\n    context.setVariable(\"title\", \"<h1>我是标题</h1>\");\n    //通过此方法就可以直接解析模板并返回响应\n    engine.process(\"test.html\", context, resp.getWriter());\n}\n```\n\n操作非常简单，只需要简单几步配置就可以实现模板的解析。接下来我们就可以在前端页面中通过上下文提供的内容，来将Java代码中的数据解析到前端页面。\n\n接着我们来了解Thymeleaf如何为普通的标签添加内容，比如我们示例中编写的：\n\n```html\n<div th:text=\"${title}\"></div>\n```\n\n我们使用了`th:text`来为当前标签指定内部文本，注意任何内容都会变成普通文本，即使传入了一个HTML代码，如果我希望向内部添加一个HTML文本呢？我们可以使用`th:utext`属性：\n\n```html\n<div th:utext=\"${title}\"></div>\n```\n\n并且，传入的title属性，不仅仅只是一个字符串的值，而是一个字符串的引用，我们可以直接通过此引用调用相关的方法：\n\n```html\n<div th:text=\"${title.toLowerCase()}\"></div>\n```\n\n这样看来，Thymeleaf既能保持JSP为我们带来的便捷，也能兼顾前后端代码的界限划分。\n\n除了替换文本，它还支持替换一个元素的任意属性，我们发现，`th:`能够拼接几乎所有的属性，一旦使用`th:属性名称`，那么属性的值就可以通过后端提供了，比如我们现在想替换一个图片的链接：\n\n```java\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    Context context = new Context();\n    context.setVariable(\"url\", \"http://n.sinaimg.cn/sinakd20121/600/w1920h1080/20210727/a700-adf8480ff24057e04527bdfea789e788.jpg\");\n  \tcontext.setVariable(\"alt\", \"图片就是加载不出来啊\");\n    engine.process(\"test.html\", context, resp.getWriter());\n}\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <img width=\"700\" th:src=\"${url}\" th:alt=\"${alt}\">\n</body>\n</html>\n```\n\n现在访问我们的页面，就可以看到替换后的结果了。\n\nThymeleaf还可以进行一些算术运算，几乎Java中的运算它都可以支持：\n\n```html\n<div th:text=\"${value % 2}\"></div>\n```\n\n同样的，它还支持三元运算：\n\n```html\n<div th:text=\"${value % 2 == 0 ? 'yyds' : 'lbwnb'}\"></div>\n```\n\n多个属性也可以通过`+`进行拼接，就像Java中的字符串拼接一样，这里要注意一下，字符串不能直接写，要添加单引号：\n\n```html\n<div th:text=\"${name}+' 我是文本 '+${value}\"></div>\n```\n\n### Thymeleaf流程控制语法\n\n除了一些基本的操作，我们还可以使用Thymeleaf来处理流程控制语句，当然，不是直接编写Java代码的形式，而是添加一个属性即可。\n\n首先我们来看if判断语句，如果if条件满足，则此标签留下，若if条件不满足，则此标签自动被移除：\n\n```java\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    Context context = new Context();\n    context.setVariable(\"eval\", true);\n    engine.process(\"test.html\", context, resp.getWriter());\n}\n```\n\n```html\n<div th:if=\"${eval}\">我是判断条件标签</div>\n```\n\n`th:if`会根据其中传入的值或是条件表达式的结果进行判断，只有满足的情况下，才会显示此标签，具体的判断规则如下：\n\n*   如果值不是空的：\n    *   如果值是布尔值并且为`true`。\n    *   如果值是一个数字，并且是非零\n    *   如果值是一个字符，并且是非零\n    *   如果值是一个字符串，而不是“错误”、“关闭”或“否”\n    *   如果值不是布尔值、数字、字符或字符串。\n*   如果值为空，th:if将计算为false\n\n`th:if`还有一个相反的属性`th:unless`，效果完全相反，这里就不演示了。\n\n我们接着来看多分支条件判断，我们可以使用`th:switch`属性来实现：\n\n```html\n<div th:switch=\"${eval}\">\n    <div th:case=\"1\">我是1</div>\n    <div th:case=\"2\">我是2</div>\n    <div th:case=\"3\">我是3</div>\n</div>\n```\n\n只不过没有default属性，但是我们可以使用`th:case=\"*\"`来代替：\n\n```html\n<div th:case=\"*\">我是Default</div>\n```\n\n最后我们再来看看，它如何实现遍历，假如我们有一个存放书籍信息的List需要显示，那么如何快速生成一个列表呢？我们可以使用`th:each`来进行遍历操作：\n\n```java\n@Override\nprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n    Context context = new Context();\n    context.setVariable(\"list\", Arrays.asList(\"伞兵一号的故事\", \"倒一杯卡布奇诺\", \"玩游戏要啸着玩\", \"十七张牌前的电脑屏幕\"));\n    engine.process(\"test.html\", context, resp.getWriter());\n}\n```\n\n```html\n<ul>\n    <li th:each=\"title : ${list}\" th:text=\"'《'+${title}+'》'\"></li>\n</ul>\n```\n\n`th:each`中需要填写 \"单个元素名称 : ${列表}\"，这样，所有的列表项都可以使用遍历的单个元素，只要使用了`th:each`，都会被循环添加。因此最后生成的结果为：\n\n```html\n<ul>\n        <li>《伞兵一号的故事》</li>\n        <li>《倒一杯卡布奇诺》</li>\n        <li>《玩游戏要啸着玩》</li>\n        <li>《十七张牌前的电脑屏幕》</li>\n    </ul>\n```\n\n我们还可以获取当前循环的迭代状态，只需要在最后添加`iterStat`即可，从中可以获取很多信息，比如当前的顺序：\n\n```html\n<ul>\n    <li th:each=\"title, iterStat : ${list}\" th:text=\"${iterStat.index}+'.《'+${title}+'》'\"></li>\n</ul>\n```\n\n状态变量在`th:each`属性中定义，并包含以下数据：\n\n*   当前*迭代索引*，以0开头。这是`index`属性。\n*   当前*迭代索引*，以1开头。这是`count`属性。\n*   迭代变量中的元素总量。这是`size`属性。\n*   每个迭代的*迭代变量*。这是`current`属性。\n*   当前迭代是偶数还是奇数。这些是`even/odd`布尔属性。\n*   当前迭代是否是第一个迭代。这是`first`布尔属性。\n*   当前迭代是否是最后一个迭代。这是`last`布尔属性。\n\n通过了解了流程控制语法，现在我们就可以很轻松地使用Thymeleaf来快速替换页面中的内容了。\n\n### Thymeleaf模板布局\n\n在某些网页中，我们会发现，整个网站的页面，除了中间部分的内容会随着我们的页面跳转而变化外，有些部分是一直保持一个状态的，比如打开小破站，我们翻动评论或是切换视频分P的时候，变化的仅仅是对应区域的内容，实际上，其他地方的内容会无论内部页面如何跳转，都不会改变。\n\nThymeleaf就可以轻松实现这样的操作，我们只需要将不会改变的地方设定为模板布局，并在不同的页面中插入这些模板布局，就无需每个页面都去编写同样的内容了。现在我们来创建两个页面：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <div class=\"head\">\n        <div>\n            <h1>我是标题内容，每个页面都有</h1>\n        </div>\n        <hr>\n    </div>\n    <div class=\"body\">\n        <ul>\n            <li th:each=\"title, iterStat : ${list}\" th:text=\"${iterStat.index}+'.《'+${title}+'》'\"></li>\n        </ul>\n    </div>\n</body>\n</html>\n```\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n    <div class=\"head\">\n        <div>\n            <h1>我是标题内容，每个页面都有</h1>\n        </div>\n        <hr>\n    </div>\n    <div class=\"body\">\n        <div>这个页面的样子是这样的</div>\n    </div>\n</body>\n</html>\n```\n\n接着将模板引擎写成工具类的形式：\n\n```java\npublic class ThymeleafUtil {\n\n    private static final TemplateEngine engine;\n    static  {\n        engine = new TemplateEngine();\n        ClassLoaderTemplateResolver r = new ClassLoaderTemplateResolver();\n        engine.setTemplateResolver(r);\n    }\n\n    public static TemplateEngine getEngine() {\n        return engine;\n    }\n}\n```\n\n```java\n@WebServlet(\"/index2\")\npublic class HelloServlet2 extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        Context context = new Context();\n        ThymeleafUtil.getEngine().process(\"test2.html\", context, resp.getWriter());\n    }\n}\n```\n\n现在就有两个Servlet分别对应两个页面了，但是这两个页面实际上是存在重复内容的，我们要做的就是将这些重复内容提取出来。\n\n我们单独编写一个`head.html`来存放重复部分：\n\n```html\n<!DOCTYPE html>\n<html xmlns:th=\"http://www.thymeleaf.org\" lang=\"en\">\n<body>\n    <div class=\"head\" th:fragment=\"head-title\">\n        <div>\n            <h1>我是标题内容，每个页面都有</h1>\n        </div>\n        <hr>\n    </div>\n</body>\n</html>\n```\n\n现在，我们就可以直接将页面中的内容快速替换：\n\n```html\n<div th:include=\"head.html::head-title\"></div>\n<div class=\"body\">\n    <ul>\n        <li th:each=\"title, iterStat : ${list}\" th:text=\"${iterStat.index}+'.《'+${title}+'》'\"></li>\n    </ul>\n</div>\n```\n\n我们可以使用`th:insert`和`th:replace`和`th:include`这三种方法来进行页面内容替换，那么`th:insert`和`th:replace`（和`th:include`，自3.0年以来不推荐）有什么区别？\n\n*   `th:insert`最简单：它只会插入指定的片段作为标签的主体。\n*   `th:replace`实际上将标签直接*替换*为指定的片段。\n*   `th:include`和`th:insert`相似，但它没有插入片段，而是只插入此片段*的内容*。\n\n你以为这样就完了吗？它还支持参数传递，比如我们现在希望插入二级标题，并且由我们的子页面决定：\n\n```html\n<div class=\"head\" th:fragment=\"head-title\">\n    <div>\n        <h1>我是标题内容，每个页面都有</h1>\n        <h2>我是二级标题</h2>\n    </div>\n    <hr>\n</div>\n```\n\n稍加修改，就像JS那样添加一个参数名称：\n\n```html\n<div class=\"head\" th:fragment=\"head-title(sub)\">\n    <div>\n        <h1>我是标题内容，每个页面都有</h1>\n        <h2 th:text=\"${sub}\"></h2>\n    </div>\n    <hr>\n</div>\n```\n\n现在直接在替换位置添加一个参数即可：\n\n```html\n<div th:include=\"head.html::head-title('这个是第1个页面的二级标题')\"></div>\n<div class=\"body\">\n    <ul>\n        <li th:each=\"title, iterStat : ${list}\" th:text=\"${iterStat.index}+'.《'+${title}+'》'\"></li>\n    </ul>\n</div>\n```\n\n这样，不同的页面还有着各自的二级标题。\n\n***\n\n## 探讨Tomcat类加载机制\n\n有关JavaWeb的内容，我们就聊到这里，在最后，我们还是来看一下Tomcat到底是如何加载和运行我们的Web应用程序的。\n\nTomcat服务器既然要同时运行多个Web应用程序，那么就必须要实现不同应用程序之间的隔离，也就是说，Tomcat需要分别去加载不同应用程序的类以及依赖，还必须保证应用程序之间的类无法相互访问，而传统的类加载机制无法做到这一点，同时每个应用程序都有自己的依赖，如果两个应用程序使用了同一个版本的同一个依赖，那么还有必要去重新加载吗，带着诸多问题，Tomcat服务器编写了一套自己的类加载机制。\n\n![img](https://images2018.cnblogs.com/blog/137084/201805/137084-20180526104342525-959933190.png)\n\n首先我们要知道，Tomcat本身也是一个Java程序，它要做的是去动态加载我们编写的Web应用程序中的类，而要解决以上提到的一些问题，就出现了几个新的类加载器，我们来看看各个加载器的不同之处：\n\n*   Common ClassLoader：Tomcat最基本的类加载器，加载路径中的class可以被Tomcat容器本身以及各个Web应用程序访问。\n*   Catalina ClassLoader：Tomcat容器私有的类加载器，加载路径中的class对于Web应用程序不可见。\n*   Shared ClassLoader：各个Web应用程序共享的类加载器，加载路径中的class对于所有Web应用程序可见，但是对于Tomcat容器不可见。\n*   Webapp ClassLoader：各个Web应用程序私有的类加载器，加载路径中的class只对当前Web应用程序可见，每个Web应用程序都有一个自己的类加载器，此加载器可能存在多个实例。\n*   JasperLoader：JSP类加载器，每个JSP文件都有一个自己的类加载器，也就是说，此加载器可能会存在多个实例。\n\n通过这样进行划分，就很好地解决了我们上面所提到的问题，但是我们发现，这样的类加载机制，破坏了JDK的`双亲委派机制`（在JavaSE阶段讲解过），比如Webapp ClassLoader，它只加载自己的class文件，它没有将类交给父类加载器进行加载，也就是说，我们可以随意创建和JDK同包同名的类，岂不是就出问题了？\n\n难道Tomcat的开发团队没有考虑到这个问题吗？\n\n![img](https://images0.cnblogs.com/blog2015/449064/201506/141304597074685.jpg)\n\n实际上，WebAppClassLoader的加载机制是这样的：WebAppClassLoader 加载类的时候，绕开了 AppClassLoader，直接先使用 ExtClassLoader 来加载类。这样的话，如果定义了同包同名的类，就不会被加载，而如果是自己定义 的类，由于该类并不是JDK内部或是扩展类，所有不会被加载，而是再次回到WebAppClassLoader进行加载，如果还失败，再使用AppClassloader进行加载。\n\n***\n\n## 实战：编写图书管理系统\n\n图书管理系统需要再次迎来升级，现在，我们可以直接访问网站来操作图书，这里我们给大家提供一个前端模板直接编写，省去编写前端的时间。\n\n本次实战使用到的框架：Servlet+Mybatis+Thymeleaf\n\n注意在编写的时候，为了使得整体的代码简洁高效，我们严格遵守三层架构模式：\n\n![img](https://www.runoob.com/wp-content/uploads/2018/08/1535337833-4838-1359192395-1143.png)\n\n就是说，表示层只做UI，包括接受请求和相应，给模板添加上下文，以及进行页面的解析，最后响应给浏览器；业务逻辑层才是用于进行数据处理的地方，表示层需要向逻辑层索要数据，才能将数据添加到模板的上下文中；数据访问层一般就是连接数据库，包括增删改查等基本的数据库操作，业务逻辑层如果需要从数据库取数据，就需要向数据访问层请求数据。\n\n当然，贯穿三大层次的当属实体类了，我们还需要创建对应的实体类进行数据的封装，以便于在三层架构中进行数据传递。\n\n接下来，明确我们要实现的功能，也就是项目需求：\n\n*   图书管理员的登陆和退出（只有登陆之后才能进入管理页面）\n*   图书的列表浏览（包括书籍是否被借出的状态也要进行显示）以及图书的添加和删除\n*   学生的列表浏览\n*   查看所有的借阅列表，添加借阅信息\n\n***\n\n## 结束语\n\n首先祝贺各位顺利完成了JavaWeb相关知识的学习。\n\n本教程创作的动力离不开各位观众姥爷们的支持，我们也会在后面为大家录制更多的Java技术栈教程，如果您喜欢本系列视频的话，直接用三连狠狠的砸向UP主吧！\n\n虽然我们现在已经学会了如何去编写一个网站，但是实际上，这样的开发模式已经过时（不过拿去当毕设当期末设计直接无敌好吧），我们还需要继续深入了解更加现代化的开发模式，这样我们才有机会参与到企业的项目开发当中。\n\n希望在后续的视频中，还能看到各位的身影，完结撒花！\n","categories":["Java","JavaWeb笔记"]},{"title":"JavaWeb笔记（一）","url":"/2023/01/18/b79318accafa44dfaabad60dbbe8de4c/","content":"\n# Java网络编程\n\n在JavaSE阶段，我们学习了I/O流，既然I/O流如此强大，那么能否跨越不同的主机进行I/O操作呢？这就要提到Java的网络编程了。\n\n\\*\\*注意：\\*\\*本章会涉及到`计算机网络`相关内容（只会讲解大致内容，不会完整的讲解计算机网络知识）\n\n## 计算机网络基础\n\n利用通信线路和通信设备，将地理位置不同的、功能独立的多台计算机互连起来，以功能完善的网络软件来实现资源共享和信息传递，就构成了计算机网络系统。\n\n![img](https://pics2.baidu.com/feed/503d269759ee3d6d1356774cd59afe244e4ade3c.jpeg?token=f256bfddbd14418f8f3d3d4964ed4cf5)\n\n比如我们家里的路由器，通过将我们的设备（手机、平板、电脑、电视剧）连接到路由器，来实现对互联网的访问。实际上，我们的路由器连接在互联网上，而我们的设备又连接了路由器，这样我们的设备就可以通过路由器访问到互联网了。通过网络，我们可以直接访问互联网上的另一台主机，比如我们要把QQ的消息发送给我们的朋友，或是通过远程桌面管理来操作另一台电脑，也可以是连接本地网络上的打印机。\n\n既然我们可以通过网络访问其他计算机，那么如何区别不同的计算机呢？通过IP地址，我们就可以区分不同的计算机了：\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.it610.com%2Fimage%2Finfo5%2Facf4321f34144b69811bdde9bec045c8.jpg\\&refer=http%3A%2F%2Fimg.it610.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1637820816\\&t=955be58edb486e7a69cdea2381714252)\n\n每一台电脑在同一个网络上都有一个自己的IP地址，用于区别于其他的电脑，我们可以通过对方主机的IP地址对其进行访问。那么我手机连接的移动流量，能访问到连接家里路由器的电脑吗？（不能，因为他们不属于同一个网络）\n\n而我们的电脑上可能运行着大量的程序，每一个程序可能都需要通过网络来访问其他计算机，那这时该如何区分呢？我们可以通过端口号来区分：\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg2020.cnblogs.com%2Fblog%2F2068098%2F202008%2F2068098-20200808153937940-609503998.png\\&refer=http%3A%2F%2Fimg2020.cnblogs.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1637821431\\&t=9dfd5db6c6f75f843d1663f54b2ccb6c)\n\n因此，我们一般看到的是这样的：`192.168.0.11:8080`，通过`IP:端口`的形式来访问目标主机上的一个应用程序服务。注意端口号只能是0-65535之间的值！\n\nIP地址分为IPv4和IPv6，IPv4类似于`192.168.0.11`，我们上面提到的例子都是使用的IPv4，它一共有四组数字，每组数字占8个bit位，IPv4地址`0.0.0.0`表示为2进制就是：00000000.00000000.00000000.00000000，共32个bit，最大为`255.255.255.255`，实际上，IPv4能够表示的所有地址，早就已经被用完了。IPv6能够保存128个bit位，因此它也可以表示更多的IP地址，一个IPv6地址看起来像这样：`1030::C9B4:FF12:48AA:1A2B`，目前也正在向IPv6的阶段过度。\n\nTCP和UDP是两种不同的传输层协议：\n\n*   TCP：当一台计算机想要与另一台计算机通讯时，两台计算机之间的通信需要畅通且可靠（会进行三次握手，断开也会进行四次挥手），这样才能保证正确收发数据，因此TCP更适合一些可靠的数据传输场景。\n*   UDP：它是一种无连接协议，数据想发就发，而且不会建立可靠传输，也就是说传输过程中有可能会导致部分数据丢失，但是它比TCP传输更加简单高效，适合视频直播之类的。\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fq_70%2Cc_zoom%2Cw_640%2Fimages%2F20200212%2F0f3d7f77442643c099dddbb159a183f6.jpeg\\&refer=http%3A%2F%2F5b0988e595225.cdn.sohucs.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1637824557\\&t=b5d5cb0c013ae945e838e88a345edb9c)\n\n***\n\n## 了解Socket技术\n\n通过Socket技术（它是计算机之间进行**通信**的**一种约定**或一种方式），我们就可以实现两台计算机之间的通信，Socket也被翻译为`套接字`，是操作系统底层提供的一项通信技术，它支持TCP和UDP。而Java就对socket底层支持进行了一套完整的封装，我们可以通过Java来实现Socket通信。\n\n要实现Socket通信，我们必须创建一个数据发送者和一个数据接收者，也就是客户端和服务端，我们需要提前启动服务端，来等待客户端的连接，而客户端只需要随时启动去连接服务端即可！\n\n```java\n//服务端\npublic static void main(String[] args) {\n    try(ServerSocket server = new ServerSocket(8080)){    //将服务端创建在端口8080上\n        System.out.println(\"正在等待客户端连接...\");\n        Socket socket = server.accept();  //当没有客户端连接时，线程会阻塞，直到有客户端连接为止\n        System.out.println(\"客户端已连接，IP地址为：\"+socket.getInetAddress().getHostAddress());\n    }catch (IOException e){\n        e.printStackTrace();\n    }\n}\n```\n\n```java\n//客户端\npublic static void main(String[] args) {\n    try (Socket socket = new Socket(\"localhost\", 8080)){\n        System.out.println(\"已连接到服务端！\");\n    }catch (IOException e){\n        System.out.println(\"服务端连接失败！\");\n        e.printStackTrace();\n    }\n}\n```\n\n实际上它就是一个TCP连接的建立过程：\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.reader8.cn%2Fuploadfile%2Fjiaocheng%2F201401101%2F3039%2F2014013015391315977.jpg\\&refer=http%3A%2F%2Fwww.reader8.cn\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1637838562\\&t=a22f860adb01fda478ecb76f34c34252)\n\n一旦TCP连接建立，服务端和客户端之间就可以相互发送数据，直到客户端主动关闭连接。当然，服务端不仅仅只可以让一个客户端进行连接，我们可以尝试让服务端一直运行来不断接受客户端的连接：\n\n```java\npublic static void main(String[] args) {\n    try(ServerSocket server = new ServerSocket(8080)){    //将服务端创建在端口8080上\n        System.out.println(\"正在等待客户端连接...\");\n        while (true){   //无限循环等待客户端连接\n            Socket socket = server.accept();\n            System.out.println(\"客户端已连接，IP地址为：\"+socket.getInetAddress().getHostAddress());\n        }\n    }catch (IOException e){\n        e.printStackTrace();\n    }\n}\n```\n\n现在我们就可以多次去连接此服务端了。\n\n## 使用Socket进行数据传输\n\n通过Socket对象，我们就可以获取到对应的I/O流进行网络数据传输：\n\n```java\npublic static void main(String[] args) {\n        try (Socket socket = new Socket(\"localhost\", 8080);\n             Scanner scanner = new Scanner(System.in)){\n            System.out.println(\"已连接到服务端！\");\n            OutputStream stream = socket.getOutputStream();\n            OutputStreamWriter writer = new OutputStreamWriter(stream);  //通过转换流来帮助我们快速写入内容\n            System.out.println(\"请输入要发送给服务端的内容：\");\n            String text = scanner.nextLine();\n            writer.write(text+'\\n');   //因为对方是readLine()这里加个换行符\n            writer.flush();\n            System.out.println(\"数据已发送：\"+text);\n        }catch (IOException e){\n            System.out.println(\"服务端连接失败！\");\n            e.printStackTrace();\n        }finally {\n            System.out.println(\"客户端断开连接！\");\n        }\n    }\n}\n```\n\n```java\npublic static void main(String[] args) {\n    try(ServerSocket server = new ServerSocket(8080)){    //将服务端创建在端口8080上\n        System.out.println(\"正在等待客户端连接...\");\n        Socket socket = server.accept();\n        System.out.println(\"客户端已连接，IP地址为：\"+socket.getInetAddress().getHostAddress());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));  //通过\n        System.out.print(\"接收到客户端数据：\");\n        System.out.println(reader.readLine());\n      \tsocket.close();   //和服务端TCP连接完成之后，记得关闭socket\n    }catch (IOException e){\n        e.printStackTrace();\n    }\n}\n```\n\n同理，既然服务端可以读取客户端的内容，客户端也可以在发送后等待服务端给予响应：\n\n```java\npublic static void main(String[] args) {\n    try (Socket socket = new Socket(\"localhost\", 8080);\n         Scanner scanner = new Scanner(System.in)){\n        System.out.println(\"已连接到服务端！\");\n        OutputStream stream = socket.getOutputStream();\n        OutputStreamWriter writer = new OutputStreamWriter(stream);  //通过转换流来帮助我们快速写入内容\n        System.out.println(\"请输入要发送给服务端的内容：\");\n        String text = scanner.nextLine();\n        writer.write(text+'\\n');   //因为对方是readLine()这里加个换行符\n        writer.flush();\n        System.out.println(\"数据已发送：\"+text);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        System.out.println(\"收到服务器返回：\"+reader.readLine());\n    }catch (IOException e){\n        System.out.println(\"服务端连接失败！\");\n        e.printStackTrace();\n    }finally {\n        System.out.println(\"客户端断开连接！\");\n    }\n}\n```\n\n```java\npublic static void main(String[] args) {\n    try(ServerSocket server = new ServerSocket(8080)){    //将服务端创建在端口8080上\n        System.out.println(\"正在等待客户端连接...\");\n        Socket socket = server.accept();\n        System.out.println(\"客户端已连接，IP地址为：\"+socket.getInetAddress().getHostAddress());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));  //通过\n        System.out.print(\"接收到客户端数据：\");\n        System.out.println(reader.readLine());\n        OutputStreamWriter writer = new OutputStreamWriter(socket.getOutputStream());\n        writer.write(\"已收到！\");\n        writer.flush();\n    }catch (IOException e){\n        e.printStackTrace();\n    }\n}\n```\n\n我们可以手动关闭单向的流：\n\n```java\nsocket.shutdownOutput();  //关闭输出方向的流\nsocket.shutdownInput();  //关闭输入方向的流\n```\n\n如果我们不希望服务端等待太长的时间，我们可以通过调用`setSoTimeout()`方法来设定IO超时时间：\n\n```java\nsocket.setSoTimeout(3000);\n```\n\n当超过设定时间都依然没有收到客户端或是服务端的数据时，会抛出异常：\n\n```java\njava.net.SocketTimeoutException: Read timed out\n\tat java.net.SocketInputStream.socketRead0(Native Method)\n\tat java.net.SocketInputStream.socketRead(SocketInputStream.java:116)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:171)\n\tat java.net.SocketInputStream.read(SocketInputStream.java:141)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:184)\n\tat java.io.BufferedReader.fill(BufferedReader.java:161)\n\tat java.io.BufferedReader.readLine(BufferedReader.java:324)\n\tat java.io.BufferedReader.readLine(BufferedReader.java:389)\n\tat com.test.Main.main(Main.java:41)\n```\n\n我们之前使用的都是通过构造方法直接连接服务端，那么是否可以等到我们想要的时候再去连接呢？\n\n```java\ntry (Socket socket = new Socket(); //调用无参构造不会自动连接\n     Scanner scanner = new Scanner(System.in)){ \n    socket.connect(new InetSocketAddress(\"localhost\", 8080), 1000);  //手动调用connect方法进行连接\n```\n\n如果连接的双方发生意外而通知不到对方，导致一方还持有连接，这样就会占用资源，因此我们可以使用`setKeepAlive()`方法来防止此类情况发生：\n\n```java\nsocket.setKeepAlive(true);\n```\n\n当客户端连接后，如果设置了keeplive为 true，当对方没有发送任何数据过来，超过一个时间(看系统内核参数配置)，那么我们这边会发送一个ack探测包发到对方，探测双方的TCP/IP连接是否有效。\n\nTCP在传输过程中，实际上会有一个缓冲区用于数据的发送和接收：\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fpic1.zhimg.com%2Fv2-72f5d4bebca1242a163cbd1ebff3cdbc_b.jpg\\&refer=http%3A%2F%2Fpic1.zhimg.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1637902504\\&t=2b8dead347f9d2a5bd72e703fc11b987)\n\n此缓冲区大小为：8192，我们可以手动调整其大小来优化传输效率：\n\n```java\nsocket.setReceiveBufferSize(25565);   //TCP接收缓冲区\nsocket.setSendBufferSize(25565);    //TCP发送缓冲区\n```\n\n## 使用Socket传输文件\n\n既然Socket为我们提供了IO流便于数据传输，那么我们就可以轻松地实现文件传输了。\n\n## 使用浏览器访问Socket服务器\n\n在了解了如何使用Socket传输文件后，我们来看看，浏览器是如何向服务器发起请求的：\n\n```java\npublic static void main(String[] args) {\n        try(ServerSocket server = new ServerSocket(8080)){    //将服务端创建在端口8080上\n            System.out.println(\"正在等待客户端连接...\");\n            Socket socket = server.accept();\n            System.out.println(\"客户端已连接，IP地址为：\"+socket.getInetAddress().getHostAddress());\n            InputStream in = socket.getInputStream();  //通过\n            System.out.println(\"接收到客户端数据：\");\n            while (true){\n                int i = in.read();\n                if(i == -1) break;\n                System.out.print((char) i);\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n```\n\n我们现在打开浏览器，输入<http://localhost:8080或是http://127.0.0.1:8080/，来连接我们本地开放的服务器。>\n\n我们发现浏览器是无法打开这个链接的，但是我们服务端却收到了不少的信息：\n\n```properties\nGET / HTTP/1.1\nHost: 127.0.0.1:8080\nConnection: keep-alive\nCache-Control: max-age=0\nsec-ch-ua: \"Chromium\";v=\"94\", \"Google Chrome\";v=\"94\", \";Not A Brand\";v=\"99\"\nsec-ch-ua-mobile: ?0\nsec-ch-ua-platform: \"macOS\"\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: none\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,und;q=0.8,en;q=0.7\n```\n\n实际上这些内容都是Http协议规定的请求头内容。HTTP是一种应用层协议，全称为超文本传输协议，它本质也是基于TCP协议进行数据传输，因此我们的服务端能够读取HTTP请求。但是Http协议并不会保持长连接，在得到我们响应的数据后会立即关闭TCP连接。\n\n既然使用的是Http连接，如果我们的服务器要支持响应HTTP请求，那么就需要按照HTTP协议的规则，返回一个规范的响应文本，首先是响应头，它至少要包含一个响应码：\n\n```properties\nHTTP/1.1 200 Accpeted\n```\n\n然后就是响应内容（注意一定要换行再写），我们尝试来编写一下支持HTTP协议的响应内容：\n\n```java\npublic static void main(String[] args) {\n    try(ServerSocket server = new ServerSocket(8080)){    //将服务端创建在端口8080上\n        System.out.println(\"正在等待客户端连接...\");\n        Socket socket = server.accept();\n        System.out.println(\"客户端已连接，IP地址为：\"+socket.getInetAddress().getHostAddress());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));  //通过\n        System.out.println(\"接收到客户端数据：\");\n        while (reader.ready()) System.out.println(reader.readLine());   //ready是判断当前流中是否还有可读内容\n        OutputStreamWriter writer = new OutputStreamWriter(socket.getOutputStream());\n        writer.write(\"HTTP/1.1 200 Accepted\\r\\n\");   //200是响应码，Http协议规定200为接受请求，400为错误的请求，404为找不到此资源（不止这些，还有很多）\n        writer.write(\"\\r\\n\");   //在请求头写完之后还要进行一次换行，然后写入我们的响应实体（会在浏览器上展示的内容）\n        writer.write(\"lbwnb!\");\n        writer.flush();\n    }catch (Exception e){\n        e.printStackTrace();\n    }\n}\n```\n\n我们可以打开浏览器的开发者模式（这里推荐使用Chrome/Edge浏览器，按下F12即可打开），我们来观察一下浏览器的实际请求过程。\n","tags":["java","javaweb"],"categories":["Java","JavaWeb笔记"]},{"title":"JavaWeb笔记（三）","url":"/2023/01/18/f795be55936d42ddafd17995abae6aa8/","content":"\n# Java与数据库\n\n通过Java如何去使用数据库来帮助我们存储数据呢，这将是本章节讨论的重点。\n\n## 初识JDBC\n\nJDBC是什么？JDBC英文名为：Java Data Base Connectivity(Java数据库连接)，官方解释它是Java编程语言和广泛的数据库之间独立于数据库的连接标准的Java API，根本上说JDBC是一种规范，它提供的接口，一套完整的，允许便捷式访问底层数据库。可以用JAVA来写不同类型的可执行文件：JAVA应用程序、JAVA Applets、Java Servlet、JSP等，不同的可执行文件都能通过JDBC访问数据库，又兼备存储的优势。简单说它就是Java与数据库的连接的桥梁或者插件，用Java代码就能操作数据库的增删改查、存储过程、事务等。\n\n我们可以发现，JDK自带了一个`java.sql`包，而这里面就定义了大量的接口，不同类型的数据库，都可以通过实现此接口，编写适用于自己数据库的实现类。而不同的数据库厂商实现的这套标准，我们称为`数据库驱动`。\n\n### 准备工作\n\n那么我们首先来进行一些准备工作，以便开始JDBC的学习：\n\n*   将idea连接到我们的数据库，以便以后调试。\n*   将mysql驱动jar依赖导入到项目中（推荐6.0版本以上，这里用到是8.0）\n*   向Jetbrians申请一个学生/教师授权，用于激活idea终极版（进行JavaWeb开发需要用到，一般申请需要3-7天时间审核）不是大学生的话...emmm...懂的都懂。\n*   教育授权申请地址：<https://www.jetbrains.com/shop/eform/students>\n\n一个Java程序并不是一个人的战斗，我们可以在别人开发的基础上继续向上开发，其他的开发者可以将自己编写的Java代码打包为`jar`，我们只需要导入这个`jar`作为依赖，即可直接使用别人的代码，就像我们直接去使用JDK提供的类一样。\n\n### 使用JDBC连接数据库\n\n\\*\\*注意：\\*\\*6.0版本以上，不用手动加载驱动，我们直接使用即可！\n\n```java\n//1. 通过DriverManager来获得数据库连接\ntry (Connection connection = DriverManager.getConnection(\"连接URL\",\"用户名\",\"密码\");\n     //2. 创建一个用于执行SQL的Statement对象\n     Statement statement = connection.createStatement()){   //注意前两步都放在try()中，因为在最后需要释放资源！\n    //3. 执行SQL语句，并得到结果集\n    ResultSet set = statement.executeQuery(\"select * from 表名\");\n    //4. 查看结果\n    while (set.next()){\n        ...\n    }\n}catch (SQLException e){\n    e.printStackTrace();\n}\n//5. 释放资源，try-with-resource语法会自动帮助我们close\n```\n\n其中，连接的URL如果记不住格式，我们可以打开idea的数据库连接配置，复制一份即可。（其实idea本质也是使用的JDBC，整个idea程序都是由Java编写的，实际上idea就是一个Java程序）\n\n### 了解DriverManager\n\n我们首先来了解一下DriverManager是什么东西，它其实就是管理我们的数据库驱动的：\n\n```java\npublic static synchronized void registerDriver(java.sql.Driver driver,\n        DriverAction da)\n    throws SQLException {\n\n    /* Register the driver if it has not already been added to our list */\n    if(driver != null) {\n        registeredDrivers.addIfAbsent(new DriverInfo(driver, da));    //在刚启动时，mysql实现的驱动会被加载，我们可以断点调试一下。\n    } else {\n        // This is for compatibility with the original DriverManager\n        throw new NullPointerException();\n    }\n\n    println(\"registerDriver: \" + driver);\n\n}\n```\n\n我们可以通过调用getConnection()来进行数据库的链接：\n\n```java\n@CallerSensitive\npublic static Connection getConnection(String url,\n    String user, String password) throws SQLException {\n    java.util.Properties info = new java.util.Properties();\n\n    if (user != null) {\n        info.put(\"user\", user);\n    }\n    if (password != null) {\n        info.put(\"password\", password);\n    }\n\n    return (getConnection(url, info, Reflection.getCallerClass()));   //内部有实现\n}\n```\n\n我们可以手动为驱动管理器添加一个日志打印：\n\n```java\nstatic {\n    DriverManager.setLogWriter(new PrintWriter(System.out));   //这里直接设定为控制台输出\n}\n```\n\n现在我们执行的数据库操作日志会在控制台实时打印。\n\n### 了解Connection\n\nConnection是数据库的连接对象，可以通过连接对象来创建一个Statement用于执行SQL语句：\n\n```java\nStatement createStatement() throws SQLException;\n```\n\n我们发现除了普通的Statement，还存在PreparedStatement：\n\n```java\nPreparedStatement prepareStatement(String sql)\n    throws SQLException;\n```\n\n在后面我们会详细介绍PreparedStatement的使用，它能够有效地预防SQL注入式攻击。\n\n它还支持事务的处理，也放到后面来详细进行讲解。\n\n### 了解Statement\n\n我们发现，我们之前使用了`executeQuery()`方法来执行`select`语句，此方法返回给我们一个ResultSet对象，查询得到的数据，就存放在ResultSet中！\n\nStatement除了执行这样的DQL语句外，我们还可以使用`executeUpdate()`方法来执行一个DML或是DDL语句，它会返回一个int类型，表示执行后受影响的行数，可以通过它来判断DML语句是否执行成功。\n\n也可以通过`excute()`来执行任意的SQL语句，它会返回一个`boolean`来表示执行结果是一个ResultSet还是一个int，我们可以通过使用`getResultSet()`或是`getUpdateCount()`来获取。\n\n### 执行DML操作\n\n我们通过几个例子来向数据库中插入数据。\n\n### 执行DQL操作\n\n执行DQL操作会返回一个ResultSet对象，我们来看看如何从ResultSet中去获取数据：\n\n```java\n//首先要明确，select返回的数据类似于一个excel表格\nwhile (set.next()){\n    //每调用一次next()就会向下移动一行，首次调用会移动到第一行\n}\n```\n\n我们在移动行数后，就可以通过set中提供的方法，来获取每一列的数据。\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F202005062358238.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZ2lubw%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70\\&refer=http%3A%2F%2Fimg-blog.csdnimg.cn\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1638091193\\&t=bf37a5cb988d0a641d00c7e325d06ce7)\n\n### 执行批处理操作\n\n当我们要执行很多条语句时，可以不用一次一次地提交，而是一口气全部交给数据库处理，这样会节省很多的时间。\n\n```java\npublic static void main(String[] args) throws ClassNotFoundException {\n    try (Connection connection = DriverManager.getConnection();\n         Statement statement = connection.createStatement()){\n\n        statement.addBatch(\"insert into user values ('f', 1234)\");\n        statement.addBatch(\"insert into user values ('e', 1234)\");   //添加每一条批处理语句\n        statement.executeBatch();   //一起执行\n\n    }catch (SQLException e){\n        e.printStackTrace();\n    }\n}\n```\n\n### 将查询结果映射为对象\n\n既然我们现在可以从数据库中获取数据了，那么现在就可以将这些数据转换为一个类来进行操作，首先定义我们的实体类：\n\n```java\npublic class Student {\n    Integer sid;\n    String name;\n    String sex;\n\n    public Student(Integer sid, String name, String sex) {\n        this.sid = sid;\n        this.name = name;\n        this.sex = sex;\n    }\n\n    public void say(){\n        System.out.println(\"我叫：\"+name+\"，学号为：\"+sid+\"，我的性别是：\"+sex);\n    }\n}\n```\n\n现在我们来进行一个转换：\n\n```java\nwhile (set.next()){\n    Student student = new Student(set.getInt(1), set.getString(2), set.getString(3));\n    student.say();\n}\n```\n\n\\*\\*注意：\\*\\*列的下标是从1开始的。\n\n我们也可以利用反射机制来将查询结果映射为对象，使用反射的好处是，无论什么类型都可以通过我们的方法来进行实体类型映射：\n\n```java\nprivate static <T> T convert(ResultSet set, Class<T> clazz){\n    try {\n        Constructor<T> constructor = clazz.getConstructor(clazz.getConstructors()[0].getParameterTypes());   //默认获取第一个构造方法\n        Class<?>[] param = constructor.getParameterTypes();  //获取参数列表\n        Object[] object = new Object[param.length];  //存放参数\n        for (int i = 0; i < param.length; i++) {   //是从1开始的\n            object[i] = set.getObject(i+1);\n            if(object[i].getClass() != param[i])\n                throw new SQLException(\"错误的类型转换：\"+object[i].getClass()+\" -> \"+param[i]);\n        }\n        return constructor.newInstance(object);\n    } catch (ReflectiveOperationException | SQLException e) {\n        e.printStackTrace();\n        return null;\n    }\n}\n```\n\n现在我们就可以通过我们的方法来将查询结果转换为一个对象了：\n\n```java\nwhile (set.next()){\n    Student student = convert(set, Student.class);\n    if(student != null) student.say();\n}\n```\n\n实际上，在后面我们会学习Mybatis框架，它对JDBC进行了深层次的封装，而它就进行类似上面反射的操作来便于我们对数据库数据与实体类的转换。\n\n### 实现登陆与SQL注入攻击\n\n在使用之前，我们先来看看如果我们想模拟登陆一个用户，我们该怎么去写：\n\n```java\ntry (Connection connection = DriverManager.getConnection(\"URL\",\"用户名\",\"密码\");\n     Statement statement = connection.createStatement();\n     Scanner scanner = new Scanner(System.in)){\n    ResultSet res = statement.executeQuery(\"select * from user where username='\"+scanner.nextLine()+\"'and pwd='\"+scanner.nextLine()+\"';\");\n    while (res.next()){\n        String username = res.getString(1);\n        System.out.println(username+\" 登陆成功！\");\n    }\n}catch (SQLException e){\n    e.printStackTrace();\n}\n```\n\n用户可以通过自己输入用户名和密码来登陆，乍一看好像没啥问题，那如果我输入的是以下内容呢：\n\n```sql\nTest\n1111' or 1=1; -- \n# Test 登陆成功！\n```\n\n1=1一定是true，那么我们原本的SQL语句会变为：\n\n```sql\nselect * from user where username='Test' and pwd='1111' or 1=1; -- '\n```\n\n我们发现，如果允许这样的数据插入，那么我们原有的SQL语句结构就遭到了破坏，使得用户能够随意登陆别人的账号。因此我们可能需要限制用户的输入来防止用户输入一些SQL语句关键字，但是关键字非常多，这并不是解决问题的最好办法。\n\n### 使用PreparedStatement\n\n我们发现，如果单纯地使用Statement来执行SQL命令，会存在严重的SQL注入攻击漏洞！而这种问题，我们可以使用PreparedStatement来解决：\n\n```java\npublic static void main(String[] args) throws ClassNotFoundException {\n    try (Connection connection = DriverManager.getConnection(\"URL\",\"用户名\",\"密码\");\n         PreparedStatement statement = connection.prepareStatement(\"select * from user where username= ? and pwd=?;\");\n         Scanner scanner = new Scanner(System.in)){\n\n        statement.setString(1, scanner.nextLine());\n        statement.setString(2, scanner.nextLine());\n        System.out.println(statement);    //打印查看一下最终执行的\n        ResultSet res = statement.executeQuery();\n        while (res.next()){\n            String username = res.getString(1);\n            System.out.println(username+\" 登陆成功！\");\n        }\n    }catch (SQLException e){\n        e.printStackTrace();\n    }\n}\n```\n\n我们发现，我们需要提前给到PreparedStatement一个SQL语句，并且使用`?`作为占位符，它会预编译一个SQL语句，通过直接将我们的内容进行替换的方式来填写数据。使用这种方式，我们之前的例子就失效了！我们来看看实际执行的SQL语句是什么：\n\n    com.mysql.cj.jdbc.ClientPreparedStatement: select * from user where username= 'Test' and pwd='123456'' or 1=1; -- ';\n\n我们发现，我们输入的参数一旦出现`'`时，会被变为转义形式`\\'`，而最外层有一个真正的`'`来将我们输入的内容进行包裹，因此它能够有效地防止SQL注入攻击！\n\n### 管理事务\n\nJDBC默认的事务处理行为是自动提交，所以前面我们执行一个SQL语句就会被直接提交（相当于没有启动事务），所以JDBC需要进行事务管理时，首先要通过Connection对象调用setAutoCommit(false) 方法, 将SQL语句的提交（commit）由驱动程序转交给应用程序负责。\n\n```java\ncon.setAutoCommit();   //关闭自动提交后相当于开启事务。\n// SQL语句\n// SQL语句\n// SQL语句\ncon.commit();或 con.rollback();\n```\n\n一旦关闭自动提交，那么现在执行所有的操作如果在最后不进行`commit()`来提交事务的话，那么所有的操作都会丢失，只有提交之后，所有的操作才会被保存！也可以使用`rollback()`来手动回滚之前的全部操作！\n\n```java\npublic static void main(String[] args) throws ClassNotFoundException {\n    try (Connection connection = DriverManager.getConnection(\"URL\",\"用户名\",\"密码\");\n         Statement statement = connection.createStatement()){\n\n        connection.setAutoCommit(false);  //关闭自动提交，现在将变为我们手动提交\n        statement.executeUpdate(\"insert into user values ('a', 1234)\");\n        statement.executeUpdate(\"insert into user values ('b', 1234)\");\n        statement.executeUpdate(\"insert into user values ('c', 1234)\");\n\n        connection.commit();   //如果前面任何操作出现异常，将不会执行commit()，之前的操作也就不会生效\n    }catch (SQLException e){\n        e.printStackTrace();\n    }\n}\n```\n\n我们来接着尝试一下使用回滚操作：\n\n```java\npublic static void main(String[] args) throws ClassNotFoundException {\n    try (Connection connection = DriverManager.getConnection(\"URL\",\"用户名\",\"密码\");\n         Statement statement = connection.createStatement()){\n\n        connection.setAutoCommit(false);  //关闭自动提交，现在将变为我们手动提交\n        statement.executeUpdate(\"insert into user values ('a', 1234)\");\n        statement.executeUpdate(\"insert into user values ('b', 1234)\");\n\n        connection.rollback();   //回滚，撤销前面全部操作\n\n        statement.executeUpdate(\"insert into user values ('c', 1234)\");\n\n        connection.commit();   //提交事务（注意，回滚之前的内容都没了）\n\n    }catch (SQLException e){\n        e.printStackTrace();\n    }\n}\n```\n\n同样的，我们也可以去创建一个回滚点来实现定点回滚：\n\n```java\npublic static void main(String[] args) throws ClassNotFoundException {\n    try (Connection connection = DriverManager.getConnection(\"URL\",\"用户名\",\"密码\");\n         Statement statement = connection.createStatement()){\n\n        connection.setAutoCommit(false);  //关闭自动提交，现在将变为我们手动提交\n        statement.executeUpdate(\"insert into user values ('a', 1234)\");\n        \n        Savepoint savepoint = connection.setSavepoint();   //创建回滚点\n        statement.executeUpdate(\"insert into user values ('b', 1234)\");\n\n        connection.rollback(savepoint);   //回滚到回滚点，撤销前面全部操作\n\n        statement.executeUpdate(\"insert into user values ('c', 1234)\");\n\n        connection.commit();   //提交事务（注意，回滚之前的内容都没了）\n\n    }catch (SQLException e){\n        e.printStackTrace();\n    }\n}\n```\n\n通过开启事务，我们就可以更加谨慎地进行一些操作了，如果我们想从事务模式切换为原有的自动提交模式，我们可以直接将其设置回去：\n\n```java\npublic static void main(String[] args) throws ClassNotFoundException {\n    try (Connection connection = DriverManager.getConnection(\"URL\",\"用户名\",\"密码\");\n         Statement statement = connection.createStatement()){\n\n        connection.setAutoCommit(false);  //关闭自动提交，现在将变为我们手动提交\n        statement.executeUpdate(\"insert into user values ('a', 1234)\");\n        connection.setAutoCommit(true);   //重新开启自动提交，开启时把之前的事务模式下的内容给提交了\n        statement.executeUpdate(\"insert into user values ('d', 1234)\");\n        //没有commit也成功了！\n    }catch (SQLException e){\n        e.printStackTrace();\n    }\n\n```\n\n通过学习JDBC，我们现在就可以通过Java来访问和操作我们的数据库了！为了更好地衔接，我们还会接着讲解主流持久层框架——Mybatis，加深JDBC的记忆。\n\n***\n\n## 使用Lombok\n\n我们发现，在以往编写项目时，尤其是在类进行类内部成员字段封装时，需要编写大量的get/set方法，这不仅使得我们类定义中充满了get和set方法，同时如果字段名称发生改变，又要挨个进行修改，甚至当字段变得很多时，构造方法的编写会非常麻烦！\n\n通过使用Lombok（小辣椒）就可以解决这样的问题！\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_bt%2F0%2F14004711543%2F1000\\&refer=http%3A%2F%2Finews.gtimg.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1638080575\\&t=91a3937a42d14fe8129b3761bbdef82c)\n\n我们来看看，使用原生方式和小辣椒方式编写类的区别，首先是传统方式：\n\n```java\npublic class Student {\n    private Integer sid;\n    private String name;\n    private String sex;\n\n    public Student(Integer sid, String name, String sex) {\n        this.sid = sid;\n        this.name = name;\n        this.sex = sex;\n    }\n\n    public Integer getSid() {             //长！\n        return sid;\n    }\n\n    public void setSid(Integer sid) {     //到！\n        this.sid = sid;\n    }\n\n    public String getName() {             //爆！\n        return name;\n    }\n\n    public void setName(String name) {    //炸！\n        this.name = name;\n    }\n\n    public String getSex() {\n        return sex;\n    }\n\n    public void setSex(String sex) {\n        this.sex = sex;\n    }\n}\n```\n\n而使用Lombok之后：\n\n```java\n@Getter\n@Setter\n@AllArgsConstructor\npublic class Student {\n    private Integer sid;\n    private String name;\n    private String sex;\n}\n```\n\n我们发现，使用Lombok之后，只需要添加几个注解，就能够解决掉我们之前长长的一串代码！\n\n### 配置Lombok\n\n*   首先我们需要导入Lombok的jar依赖，和jdbc依赖是一样的，放在项目目录下直接导入就行了。可以在这里进行下载：<https://projectlombok.org/download>\n*   然后我们要安装一下Lombok插件，由于IDEA默认都安装了Lombok的插件，因此直接导入依赖后就可以使用了。\n*   重启IDEA\n\nLombok是一种插件化注解API，是通过添加注解来实现的，然后在javac进行编译的时候，进行处理。\n\nJava的编译过程可以分成三个阶段：\n\n![img](https://imgconvert.csdnimg.cn/aHR0cDovL29wZW5qZGsuamF2YS5uZXQvZ3JvdXBzL2NvbXBpbGVyL2RvYy9jb21waWxhdGlvbi1vdmVydmlldy9qYXZhYy1mbG93LnBuZw?x-oss-process=image/format,png)\n\n1.  所有源文件会被解析成语法树。\n2.  调用注解处理器。如果注解处理器产生了新的源文件，新文件也要进行编译。\n3.  最后，语法树会被分析并转化成类文件。\n\n实际上在上述的第二阶段，会执行\\*[lombok.core.AnnotationProcessor](https://github.com/rzwitserloot/lombok/blob/master/src/core/lombok/core/AnnotationProcessor.java)\\*，它所做的工作就是我们上面所说的，修改语法树。\n\n### 使用Lombok\n\n我们通过实战来演示一下Lombok的实用注解：\n\n*   我们通过添加`@Getter`和`@Setter`来为当前类的所有字段生成get/set方法，他们可以添加到类或是字段上，注意静态字段不会生成，final字段无法生成set方法。\n    *   我们还可以使用@Accessors来控制生成Getter和Setter的样式。\n*   我们通过添加`@ToString`来为当前类生成预设的toString方法。\n*   我们可以通过添加`@EqualsAndHashCode`来快速生成比较和哈希值方法。\n*   我们可以通过添加`@AllArgsConstructor`和`@NoArgsConstructor`来快速生成全参构造和无参构造。\n*   我们可以添加`@RequiredArgsConstructor`来快速生成参数只包含`final`或被标记为`@NonNull`的成员字段。\n*   使用`@Data`能代表`@Setter`、`@Getter`、`@RequiredArgsConstructor`、`@ToString`、`@EqualsAndHashCode`全部注解。\n    *   一旦使用`@Data`就不建议此类有继承关系，因为`equal`方法可能不符合预期结果（尤其是仅比较子类属性）。\n*   使用`@Value`与`@Data`类似，但是并不会生成setter并且成员属性都是final的。\n*   使用`@SneakyThrows`来自动生成try-catch代码块。\n*   使用`@Cleanup`作用与局部变量，在最后自动调用其`close()`方法（可以自由更换）\n*   使用`@Builder`来快速生成建造者模式。\n    *   通过使用`@Builder.Default`来指定默认值。\n    *   通过使用`@Builder.ObtainVia`来指定默认值的获取方式。\n\n***\n\n## 认识Mybatis\n\n在前面JDBC的学习中，虽然我们能够通过JDBC来连接和操作数据库，但是哪怕只是完成一个SQL语句的执行，都需要编写大量的代码，更不用说如果我还需要进行实体类映射，将数据转换为我们可以直接操作的实体类型，JDBC很方便，但是还不够方便，我们需要一种更加简洁高效的方式来和数据库进行交互。\n\n\\*\\*再次强调：\\*\\*学习厉害的框架或是厉害的技术，并不是为了一定要去使用它，而是它们能够使得我们在不同的开发场景下，合理地使用这些技术，以灵活地应对需要解决的问题。\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F26720164-60462fc7927f8784.jpg\\&refer=http%3A%2F%2Fupload-images.jianshu.io\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1638550660\\&t=a0923b35afbaed1a168b74eb45ad2b4f)\n\nMyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。\n\n我们依然使用传统的jar依赖方式，从最原始开始讲起，不使用Maven，有关Maven内容我们会在后面统一讲解！全程围绕官方文档讲解！\n\n这一块内容很多很杂，再次强调要多实践！\n\n### XML语言概述\n\n在开始介绍Mybatis之前，XML语言发明最初是用于数据的存储和传输，它可以长这样：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<outer>\n  <name>阿伟</name>\n  <desc>怎么又在玩电动啊</desc>\n\t<inner type=\"1\">\n    <age>10</age>\n    <sex>男</sex>\n  </inner>\n</outer>\n```\n\n如果你学习过前端知识，你会发现它和HTML几乎长得一模一样！但是请注意，虽然它们长得差不多，但是他们的意义却不同，HTML主要用于通过编排来展示数据，而XML主要是存放数据，它更像是一个配置文件！当然，浏览器也是可以直接打开XML文件的。\n\n一个XML文件存在以下的格式规范：\n\n*   必须存在一个根节点，将所有的子标签全部包含。\n*   可以但不必须包含一个头部声明（主要是可以设定编码格式）\n*   所有的标签必须成对出现，可以嵌套但不能交叉嵌套\n*   区分大小写。\n*   标签中可以存在属性，比如上面的`type=\"1\"`就是`inner`标签的一个属性，属性的值由单引号或双引号包括。\n\nXML文件也可以使用注释：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!-- 注释内容 -->\n```\n\n通过IDEA我们可以使用`Ctrl`+`/`来快速添加注释文本（不仅仅适用于XML，还支持很多种类型的文件）\n\n那如果我们的内容中出现了`<`或是`>`字符，那该怎么办呢？我们就可以使用XML的转义字符来代替：\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.jxdoc.com%2Fpic%2F28d1ff67caaedd3383c4d358%2F1-332-jpg_6_0_______-505-0-0-505.jpg\\&refer=http%3A%2F%2Fimg.jxdoc.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1639322216\\&t=88d1ea1adb9cbf1611eaf4c9fa16b8b0)\n\n如果嫌一个一个改太麻烦，也可以使用CD来快速创建不解析区域：\n\n```xml\n<test>\n    <name><![CDATA[我看你<><><>是一点都不懂哦>>>]]></name>\n</test>\n```\n\n那么，我们现在了解了XML文件的定义，现在该如何去解析一个XML文件呢？比如我们希望将定义好的XML文件读取到Java程序中，这时该怎么做呢？\n\nJDK为我们内置了一个叫做`org.w3c`的XML解析库，我们来看看如何使用它来进行XML文件内容解析：\n\n```java\n// 创建DocumentBuilderFactory对象\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n// 创建DocumentBuilder对象\ntry {\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document d = builder.parse(\"file:mappers/test.xml\");\n    // 每一个标签都作为一个节点\n    NodeList nodeList = d.getElementsByTagName(\"test\");  // 可能有很多个名字为test的标签\n    Node rootNode = nodeList.item(0); // 获取首个\n\n    NodeList childNodes = rootNode.getChildNodes(); // 一个节点下可能会有很多个节点，比如根节点下就囊括了所有的节点\n    //节点可以是一个带有内容的标签（它内部就还有子节点），也可以是一段文本内容\n\n    for (int i = 0; i < childNodes.getLength(); i++) {\n        Node child = childNodes.item(i);\n        if(child.getNodeType() == Node.ELEMENT_NODE)  //过滤换行符之类的内容，因为它们都被认为是一个文本节点\n        System.out.println(child.getNodeName() + \"：\" +child.getFirstChild().getNodeValue());\n        // 输出节点名称，也就是标签名称，以及标签内部的文本（内部的内容都是子节点，所以要获取内部的节点）\n    }\n} catch (Exception e) {\n    e.printStackTrace();\n}\n```\n\n当然，学习和使用XML只是为了更好地去认识Mybatis的工作原理，以及如何使用XML来作为Mybatis的配置文件，这是在开始之前必须要掌握的内容（使用Java读取XML内容不要求掌握，但是需要知道Mybatis就是通过这种方式来读取配置文件的）\n\n不仅仅是Mybatis，包括后面的Spring等众多框架都会用到XML来作为框架的配置文件！\n\n### 初次使用Mybatis\n\n那么我们首先来感受一下Mybatis给我们带来的便捷，就从搭建环境开始，中文文档网站：<https://mybatis.org/mybatis-3/zh/configuration.html>\n\n我们需要导入Mybatis的依赖，Jar包需要在github上下载，如果卡得一匹，连不上可以在视频简介处从分享的文件中获取。同样地放入到项目的根目录下，右键作为依赖即可！（依赖变多之后，我们可以将其放到一个单独的文件夹，不然会很繁杂）\n\n依赖导入完成后，我们就可以编写Mybatis的配置文件了（现在不是在Java代码中配置了，而是通过一个XML文件去配置，这样就使得硬编码的部分大大减少，项目后期打包成Jar运行不方便修复，但是通过配置文件，我们随时都可以去修改，就变得很方便了，同时代码量也大幅度减少，配置文件填写完成后，我们只需要关心项目的业务逻辑而不是如何去读取配置文件）我们按照官方文档给定的提示，在项目根目录下新建名为`mybatis-config.xml`的文件，并填写以下内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n  <environments default=\"development\">\n    <environment id=\"development\">\n      <transactionManager type=\"JDBC\"/>\n      <dataSource type=\"POOLED\">\n        <property name=\"driver\" value=\"${驱动类（含包名）}\"/>\n        <property name=\"url\" value=\"${数据库连接URL}\"/>\n        <property name=\"username\" value=\"${用户名}\"/>\n        <property name=\"password\" value=\"${密码}\"/>\n      </dataSource>\n    </environment>\n  </environments>\n</configuration>\n```\n\n我们发现，在最上方还引入了一个叫做DTD（文档类型定义）的东西，它提前帮助我们规定了一些标签，我们就需要使用Mybatis提前帮助我们规定好的标签来进行配置（因为只有这样Mybatis才能正确识别我们配置的内容）\n\n通过进行配置，我们就告诉了Mybatis我们链接数据库的一些信息，包括URL、用户名、密码等，这样Mybatis就知道该链接哪个数据库、使用哪个账号进行登陆了（也可以不使用配置文件，这里不做讲解，还请各位小伙伴自行阅读官方文档）\n\n配置文件完成后，我们需要在Java程序启动时，让Mybatis对配置文件进行读取并得到一个`SqlSessionFactory`对象：\n\n```java\npublic static void main(String[] args) throws FileNotFoundException {\n    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(new FileInputStream(\"mybatis-config.xml\"));\n    try (SqlSession sqlSession = sqlSessionFactory.openSession(true)){\n\t\t\t//暂时还没有业务\n    }\n}\n```\n\n直接运行即可，虽然没有干什么事情，但是不会出现错误，如果之前的配置文件编写错误，直接运行会产生报错！那么现在我们来看看，`SqlSessionFactory`对象是什么东西：\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.h5w3.com%2Fwp-content%2Fuploads%2F2021%2F01%2F1460000039107464.png\\&refer=http%3A%2F%2Fwww.h5w3.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1639372889\\&t=f37deb63f29f0dc2f8b6a3517a68b86c)\n\n每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的，我们可以通过`SqlSessionFactory`来创建多个新的会话，`SqlSession`对象，每个会话就相当于我不同的地方登陆一个账号去访问数据库，你也可以认为这就是之前JDBC中的`Statement`对象，会话之间相互隔离，没有任何关联。\n\n而通过`SqlSession`就可以完成几乎所有的数据库操作，我们发现这个接口中定义了大量数据库操作的方法，因此，现在我们只需要通过一个对象就能完成数据库交互了，极大简化了之前的流程。\n\n我们来尝试一下直接读取实体类，读取实体类肯定需要一个映射规则，比如类中的哪个字段对应数据库中的哪个字段，在查询语句返回结果后，Mybatis就会自动将对应的结果填入到对象的对应字段上。首先编写实体类，，直接使用Lombok是不是就很方便了：\n\n```java\nimport lombok.Data;\n\n@Data\npublic class Student {\n    int sid;   //名称最好和数据库字段名称保持一致，不然可能会映射失败导致查询结果丢失\n    String name;\n    String sex;\n}\n```\n\n在根目录下重新创建一个mapper文件夹，新建名为`TestMapper.xml`的文件作为我们的映射器，并填写以下内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n        PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"TestMapper\">\n    <select id=\"selectStudent\" resultType=\"com.test.entity.Student\">\n        select * from student\n    </select>\n</mapper>\n```\n\n其中namespace就是命名空间，每个Mapper都是唯一的，因此需要用一个命名空间来区分，它还可以用来绑定一个接口。我们在里面写入了一个select标签，表示添加一个select操作，同时id作为操作的名称，resultType指定为我们刚刚定义的实体类，表示将数据库结果映射为`Student`类，然后就在标签中写入我们的查询语句即可。\n\n编写好后，我们在配置文件中添加这个Mapper映射器：\n\n```xml\n<mappers>\n    <mapper url=\"file:mappers/TestMapper.xml\"/>\n    <!--    这里用的是url，也可以使用其他类型，我们会在后面讲解    -->\n</mappers>\n```\n\n最后在程序中使用我们定义好的Mapper即可：\n\n```java\npublic static void main(String[] args) throws FileNotFoundException {\n    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(new FileInputStream(\"mybatis-config.xml\"));\n    try (SqlSession sqlSession = sqlSessionFactory.openSession(true)){\n        List<Student> student = sqlSession.selectList(\"selectStudent\");\n        student.forEach(System.out::println);\n    }\n}\n```\n\n我们会发现，Mybatis非常智能，我们只需要告诉一个映射关系，就能够直接将查询结果转化为一个实体类！\n\n### 配置Mybatis\n\n在了解了Mybatis为我们带来的便捷之后，现在我们就可以正式地去学习使用Mybatis了！\n\n由于`SqlSessionFactory`一般只需要创建一次，因此我们可以创建一个工具类来集中创建`SqlSession`，这样会更加方便一些：\n\n```java\npublic class MybatisUtil {\n\n    //在类加载时就进行创建\n    private static SqlSessionFactory sqlSessionFactory;\n    static {\n        try {\n            sqlSessionFactory = new SqlSessionFactoryBuilder().build(new FileInputStream(\"mybatis-config.xml\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 获取一个新的会话\n     * @param autoCommit 是否开启自动提交（跟JDBC是一样的，如果不自动提交，则会变成事务操作）\n     * @return SqlSession对象\n     */\n    public static SqlSession getSession(boolean autoCommit){\n        return sqlSessionFactory.openSession(autoCommit);\n    }\n}\n```\n\n现在我们只需要在main方法中这样写即可查询结果了：\n\n```java\npublic static void main(String[] args) {\n    try (SqlSession sqlSession = MybatisUtil.getSession(true)){\n        List<Student> student = sqlSession.selectList(\"selectStudent\");\n        student.forEach(System.out::println);\n    }\n}\n```\n\n之前我们演示了，如何创建一个映射器来将结果快速转换为实体类，但是这样可能还是不够方便，我们每次都需要去找映射器对应操作的名称，而且还要知道对应的返回类型，再通过`SqlSession`来执行对应的方法，能不能再方便一点呢？\n\n现在，我们可以通过`namespace`来绑定到一个接口上，利用接口的特性，我们可以直接指明方法的行为，而实际实现则是由Mybatis来完成。\n\n```java\npublic interface TestMapper {\n    List<Student> selectStudent();\n}\n```\n\n将Mapper文件的命名空间修改为我们的接口，建议同时将其放到同名包中，作为内部资源：\n\n```xml\n<mapper namespace=\"com.test.mapper.TestMapper\">\n    <select id=\"selectStudent\" resultType=\"com.test.entity.Student\">\n        select * from student\n    </select>\n</mapper>\n```\n\n作为内部资源后，我们需要修改一下配置文件中的mapper定义，不使用url而是resource表示是Jar内部的文件：\n\n```xml\n<mappers>\n    <mapper resource=\"com/test/mapper/TestMapper.xml\"/>\n</mappers>\n```\n\n现在我们就可以直接通过`SqlSession`获取对应的实现类，通过接口中定义的行为来直接获取结果：\n\n```java\npublic static void main(String[] args) {\n    try (SqlSession sqlSession = MybatisUtil.getSession(true)){\n        TestMapper testMapper = sqlSession.getMapper(TestMapper.class);\n        List<Student> student = testMapper.selectStudent();\n        student.forEach(System.out::println);\n    }\n}\n```\n\n那么肯定有人好奇，TestMapper明明是一个我们自己定义接口啊，Mybatis也不可能提前帮我们写了实现类啊，那这接口怎么就出现了一个实现类呢？我们可以通过调用`getClass()`方法来看看实现类是个什么：\n\n```java\nTestMapper testMapper = sqlSession.getMapper(TestMapper.class);\nSystem.out.println(testMapper.getClass());\n```\n\n我们发现，实现类名称很奇怪，名称为`com.sun.proxy.$Proxy4`，它是通过动态代理生成的，相当于动态生成了一个实现类，而不是预先定义好的，有关Mybatis这一部分的原理，我们放在最后一节进行讲解。\n\n接下来，我们再来看配置文件，之前我们并没有对配置文件进行一个详细的介绍：\n\n```java\n<configuration>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/study\"/>\n                <property name=\"username\" value=\"test\"/>\n                <property name=\"password\" value=\"123456\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <mapper resource=\"com/test/mapper/TestMapper.xml\"/>\n    </mappers>\n</configuration>\n```\n\n首先就从`environments`标签说起，一般情况下，我们在开发中，都需要指定一个数据库的配置信息，包含连接URL、用户、密码等信息，而`environment`就是用于进行这些配置的！实际情况下可能会不止有一个数据库连接信息，比如开发过程中我们一般会使用本地的数据库，而如果需要将项目上传到服务器或是防止其他人的电脑上运行时，我们可能就需要配置另一个数据库的信息，因此，我们可以提前定义好所有的数据库信息，该什么时候用什么即可！\n\n在`environments`标签上有一个default属性，来指定默认的环境，当然如果我们希望使用其他环境，可以修改这个默认环境，也可以在创建工厂时选择环境：\n\n```java\nsqlSessionFactory = new SqlSessionFactoryBuilder()\n        .build(new FileInputStream(\"mybatis-config.xml\"), \"环境ID\");\n```\n\n我们还可以给类型起一个别名，以简化Mapper的编写：\n\n```java\n<!-- 需要在environments的上方 -->\n<typeAliases>\n    <typeAlias type=\"com.test.entity.Student\" alias=\"Student\"/>\n</typeAliases>\n```\n\n现在Mapper就可以直接使用别名了：\n\n```xml\n<mapper namespace=\"com.test.mapper.TestMapper\">\n    <select id=\"selectStudent\" resultType=\"Student\">\n        select * from student\n    </select>\n</mapper>\n```\n\n如果这样还是很麻烦，我们也可以直接让Mybatis去扫描一个包，并将包下的所有类自动起别名（别名为首字母小写的类名）\n\n```java\n<typeAliases>\n    <package name=\"com.test.entity\"/>\n</typeAliases>\n```\n\n也可以为指定实体类添加一个注解，来指定别名：\n\n```java\n@Data\n@Alias(\"lbwnb\")\npublic class Student {\n    private int sid;\n    private String name;\n    private String sex;\n}\n```\n\n当然，Mybatis也包含许多的基础配置，通过使用：\n\n```xml\n<settings>\n    <setting name=\"\" value=\"\"/>\n</settings>\n```\n\n所有的配置项可以在中文文档处查询，本文不会进行详细介绍，在后面我们会提出一些比较重要的配置项。\n\n有关配置文件的介绍就暂时到这里为止，我们讨论的重心应该是Mybatis的应用，而不是配置文件，所以省略了一部分内容的讲解。\n\n### 增删改查\n\n在了解了Mybatis的一些基本配置之后，我们就可以正式来使用Mybatis来进行数据库操作了！\n\n在前面我们演示了如何快速进行查询，我们只需要编写一个对应的映射器既可以了：\n\n```xml\n<mapper namespace=\"com.test.mapper.TestMapper\">\n    <select id=\"studentList\" resultType=\"Student\">\n        select * from student\n    </select>\n</mapper>\n```\n\n当然，如果你不喜欢使用实体类，那么这些属性还可以被映射到一个Map上：\n\n```xml\n<select id=\"selectStudent\" resultType=\"Map\">\n    select * from student\n</select>\n```\n\n```java\npublic interface TestMapper {\n    List<Map> selectStudent();\n}\n```\n\nMap中就会以键值对的形式来存放这些结果了。\n\n通过设定一个`resultType`属性，让Mybatis知道查询结果需要映射为哪个实体类，要求字段名称保持一致。那么如果我们不希望按照这样的规则来映射呢？我们可以自定义`resultMap`来设定映射规则：\n\n```xml\n<resultMap id=\"Test\" type=\"Student\">\n    <result column=\"sid\" property=\"sid\"/>\n    <result column=\"sex\" property=\"name\"/>\n    <result column=\"name\" property=\"sex\"/>\n</resultMap>\n```\n\n通过指定映射规则，我们现在名称和性别一栏就发生了交换，因为我们将其映射字段进行了交换。\n\n如果一个类中存在多个构造方法，那么很有可能会出现这样的错误：\n\n```java\n### Exception in thread \"main\" org.apache.ibatis.exceptions.PersistenceException: \n### Error querying database.  Cause: org.apache.ibatis.executor.ExecutorException: No constructor found in com.test.entity.Student matching [java.lang.Integer, java.lang.String, java.lang.String]\n### The error may exist in com/test/mapper/TestMapper.xml\n### The error may involve com.test.mapper.TestMapper.getStudentBySid\n### The error occurred while handling results\n### SQL: select * from student where sid = ?\n### Cause: org.apache.ibatis.executor.ExecutorException: No constructor found in com.test.entity.Student matching [java.lang.Integer, java.lang.String, java.lang.String]\n\tat org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)\n\t...\n```\n\n这时就需要使用`constructor`标签来指定构造方法：\n\n```xml\n<resultMap id=\"test\" type=\"Student\">\n    <constructor>\n        <arg column=\"sid\" javaType=\"Integer\"/>\n        <arg column=\"name\" javaType=\"String\"/>\n    </constructor>\n</resultMap>\n```\n\n值得注意的是，指定构造方法后，若此字段被填入了构造方法作为参数，将不会通过反射给字段单独赋值，而构造方法中没有传入的字段，依然会被反射赋值，有关`resultMap`的内容，后面还会继续讲解。\n\n如果数据库中存在一个带下划线的字段，我们可以通过设置让其映射为以驼峰命名的字段，比如`my_test`映射为`myTest`\n\n```xml\n<settings>\n    <setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n</settings>\n```\n\n如果不设置，默认为不开启，也就是默认需要名称保持一致。\n\n我们接着来看看条件查询，既然是条件查询，那么肯定需要我们传入查询条件，比如现在我们想通过sid字段来通过学号查找信息：\n\n```java\nStudent getStudentBySid(int sid);\n```\n\n```xml\n<select id=\"getStudentBySid\" parameterType=\"int\" resultType=\"Student\">\n    select * from student where sid = #{sid}\n</select>\n```\n\n我们通过使用`#{xxx}`或是`${xxx}`来填入我们给定的属性，实际上Mybatis本质也是通过`PreparedStatement`首先进行一次预编译，有效地防止SQL注入问题，但是如果使用`${xxx}`就不再是通过预编译，而是直接传值，因此我们一般都使用`#{xxx}`来进行操作。\n\n使用`parameterType`属性来指定参数类型（非必须，可以不用，推荐不用）\n\n接着我们来看插入、更新和删除操作，其实与查询操作差不多，不过需要使用对应的标签，比如插入操作：\n\n```xml\n<insert id=\"addStudent\" parameterType=\"Student\">\n    insert into student(name, sex) values(#{name}, #{sex})\n</insert>\n```\n\n```java\nint addStudent(Student student);\n```\n\n我们这里使用的是一个实体类，我们可以直接使用实体类里面对应属性替换到SQL语句中，只需要填写属性名称即可，和条件查询是一样的。\n\n### 复杂查询\n\n一个老师可以教授多个学生，那么能否一次性将老师的学生全部映射给此老师的对象呢，比如：\n\n```java\n@Data\npublic class Teacher {\n    int tid;\n    String name;\n    List<Student> studentList;\n}\n```\n\n映射为Teacher对象时，同时将其教授的所有学生一并映射为List列表，显然这是一种一对多的查询，那么这时就需要进行复杂查询了。而我们之前编写的都非常简单，直接就能完成映射，因此我们现在需要使用`resultMap`来自定义映射规则：\n\n```xml\n<select id=\"getTeacherByTid\" resultMap=\"asTeacher\">\n        select *, teacher.name as tname from student inner join teach on student.sid = teach.sid\n                              inner join teacher on teach.tid = teacher.tid where teach.tid = #{tid}\n</select>\n\n<resultMap id=\"asTeacher\" type=\"Teacher\">\n    <id column=\"tid\" property=\"tid\"/>\n    <result column=\"tname\" property=\"name\"/>\n    <collection property=\"studentList\" ofType=\"Student\">\n        <id property=\"sid\" column=\"sid\"/>\n        <result column=\"name\" property=\"name\"/>\n        <result column=\"sex\" property=\"sex\"/>\n    </collection>\n</resultMap>\n```\n\n可以看到，我们的查询结果是一个多表联查的结果，而联查的数据就是我们需要映射的数据（比如这里是一个老师有N个学生，联查的结果也是这一个老师对应N个学生的N条记录），其中`id`标签用于在多条记录中辨别是否为同一个对象的数据，比如上面的查询语句得到的结果中，`tid`这一行始终为`1`，因此所有的记录都应该是`tid=1`的教师的数据，而不应该变为多个教师的数据，如果不加id进行约束，那么会被识别成多个教师的数据！\n\n通过使用collection来表示将得到的所有结果合并为一个集合，比如上面的数据中每个学生都有单独的一条记录，因此tid相同的全部学生的记录就可以最后合并为一个List，得到最终的映射结果，当然，为了区分，最好也设置一个id，只不过这个例子中可以当做普通的`result`使用。\n\n了解了一对多，那么多对一又该如何查询呢，比如每个学生都有一个对应的老师，现在Student新增了一个Teacher对象，那么现在又该如何去处理呢？\n\n```java\n@Data\n@Accessors(chain = true)\npublic class Student {\n    private int sid;\n    private String name;\n    private String sex;\n    private Teacher teacher;\n}\n\n@Data\npublic class Teacher {\n    int tid;\n    String name;\n}\n```\n\n现在我们希望的是，每次查询到一个Student对象时都带上它的老师，同样的，我们也可以使用`resultMap`来实现（先修改一下老师的类定义，不然会很麻烦）：\n\n```xml\n<resultMap id=\"test2\" type=\"Student\">\n    <id column=\"sid\" property=\"sid\"/>\n    <result column=\"name\" property=\"name\"/>\n    <result column=\"sex\" property=\"sex\"/>\n    <association property=\"teacher\" javaType=\"Teacher\">\n        <id column=\"tid\" property=\"tid\"/>\n        <result column=\"tname\" property=\"name\"/>\n    </association>\n</resultMap>\n<select id=\"selectStudent\" resultMap=\"test2\">\n    select *, teacher.name as tname from student left join teach on student.sid = teach.sid\n                                                 left join teacher on teach.tid = teacher.tid\n</select>\n```\n\n通过使用`association`进行关联，形成多对一的关系，实际上和一对多是同理的，都是对查询结果的一种处理方式罢了。\n\n### 事务操作\n\n我们可以在获取`SqlSession`关闭自动提交来开启事务模式，和JDBC其实都差不多：\n\n```java\npublic static void main(String[] args) {\n    try (SqlSession sqlSession = MybatisUtil.getSession(false)){\n        TestMapper testMapper = sqlSession.getMapper(TestMapper.class);\n\n        testMapper.addStudent(new Student().setSex(\"男\").setName(\"小王\"));\n\n        testMapper.selectStudent().forEach(System.out::println);\n    }\n}\n```\n\n我们发现，在关闭自动提交后，我们的内容是没有进入到数据库的，现在我们来试一下在最后提交事务：\n\n```java\nsqlSession.commit();\n```\n\n在事务提交后，我们的内容才会被写入到数据库中。现在我们来试试看回滚操作：\n\n```java\ntry (SqlSession sqlSession = MybatisUtil.getSession(false)){\n    TestMapper testMapper = sqlSession.getMapper(TestMapper.class);\n\n    testMapper.addStudent(new Student().setSex(\"男\").setName(\"小王\"));\n\n    testMapper.selectStudent().forEach(System.out::println);\n    sqlSession.rollback();\n    sqlSession.commit();\n}\n```\n\n回滚操作也印证成功。\n\n### 动态SQL\n\n动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。\n\n我们直接使用官网的例子进行讲解。\n\n### 缓存机制\n\nMyBatis 内置了一个强大的事务性查询缓存机制，它可以非常方便地配置和定制。\n\n其实缓存机制我们在之前学习IO流的时候已经提及过了，我们可以提前将一部分内容放入缓存，下次需要获取数据时，我们就可以直接从缓存中读取，这样的话相当于直接从内存中获取而不是再去向数据库索要数据，效率会更高。\n\n因此Mybatis内置了一个缓存机制，我们查询时，如果缓存中存在数据，那么我们就可以直接从缓存中获取，而不是再去向数据库进行请求。\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fresource.shangmayuan.com%2Fdroxy-blog%2F2021%2F03%2F02%2F071d25e4f9d841e0ac9df54038d98fd0-2.png\\&refer=http%3A%2F%2Fresource.shangmayuan.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1639463836\\&t=38cf5a85386f76cfd22ca3c6dcc5b6bb)\n\nMybatis存在一级缓存和二级缓存，我们首先来看一下一级缓存，默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存（一级缓存无法关闭，只能调整），我们来看看下面这段代码：\n\n```java\npublic static void main(String[] args) throws InterruptedException {\n    try (SqlSession sqlSession = MybatisUtil.getSession(true)){\n        TestMapper testMapper = sqlSession.getMapper(TestMapper.class);\n        Student student1 = testMapper.getStudentBySid(1);\n        Student student2 = testMapper.getStudentBySid(1);\n        System.out.println(student1 == student2);\n    }\n}\n```\n\n我们发现，两次得到的是同一个Student对象，也就是说我们第二次查询并没有重新去构造对象，而是直接得到之前创建好的对象。如果还不是很明显，我们可以修改一下实体类：\n\n```java\n@Data\n@Accessors(chain = true)\npublic class Student {\n\n    public Student(){\n        System.out.println(\"我被构造了\");\n    }\n\n    private int sid;\n    private String name;\n    private String sex;\n}\n```\n\n我们通过前面的学习得知Mybatis在映射为对象时，在只有一个构造方法的情况下，无论你构造方法写成什么样子，都会去调用一次构造方法，如果存在多个构造方法，那么就会去找匹配的构造方法。我们可以通过查看构造方法来验证对象被创建了几次。\n\n结果显而易见，只创建了一次，也就是说当第二次进行同样的查询时，会直接使用第一次的结果，因为第一次的结果已经被缓存了。\n\n那么如果我修改了数据库中的内容，缓存还会生效吗：\n\n```java\npublic static void main(String[] args) throws InterruptedException {\n    try (SqlSession sqlSession = MybatisUtil.getSession(true)){\n        TestMapper testMapper = sqlSession.getMapper(TestMapper.class);\n        Student student1 = testMapper.getStudentBySid(1);\n        testMapper.addStudent(new Student().setName(\"小李\").setSex(\"男\"));\n        Student student2 = testMapper.getStudentBySid(1);\n        System.out.println(student1 == student2);\n    }\n}\n```\n\n我们发现，当我们进行了插入操作后，缓存就没有生效了，我们再次进行查询得到的是一个新创建的对象。\n\n也就是说，一级缓存，在进行DML操作后，会使得缓存失效，也就是说Mybatis知道我们对数据库里面的数据进行了修改，所以之前缓存的内容可能就不是当前数据库里面最新的内容了。还有一种情况就是，当前会话结束后，也会清理全部的缓存，因为已经不会再用到了。但是一定注意，一级缓存只针对于单个会话，多个会话之间不相通。\n\n```java\npublic static void main(String[] args) {\n    try (SqlSession sqlSession = MybatisUtil.getSession(true)){\n        TestMapper testMapper = sqlSession.getMapper(TestMapper.class);\n\n        Student student2;\n        try(SqlSession sqlSession2 = MybatisUtil.getSession(true)){\n            TestMapper testMapper2 = sqlSession2.getMapper(TestMapper.class);\n            student2 = testMapper2.getStudentBySid(1);\n        }\n\n        Student student1 = testMapper.getStudentBySid(1);\n        System.out.println(student1 == student2);\n    }\n}\n```\n\n\\*\\*注意：\\*\\*一个会话DML操作只会重置当前会话的缓存，不会重置其他会话的缓存，也就是说，其他会话缓存是不会更新的！\n\n一级缓存给我们提供了很高速的访问效率，但是它的作用范围实在是有限，如果一个会话结束，那么之前的缓存就全部失效了，但是我们希望缓存能够扩展到所有会话都能使用，因此我们可以通过二级缓存来实现，二级缓存默认是关闭状态，要开启二级缓存，我们需要在映射器XML文件中添加：\n\n```xml\n<cache/>\n```\n\n可见二级缓存是Mapper级别的，也就是说，当一个会话失效时，它的缓存依然会存在于二级缓存中，因此如果我们再次创建一个新的会话会直接使用之前的缓存，我们首先根据官方文档进行一些配置：\n\n```xml\n<cache\n  eviction=\"FIFO\"\n  flushInterval=\"60000\"\n  size=\"512\"\n  readOnly=\"true\"/>\n```\n\n我们来编写一个代码：\n\n```java\npublic static void main(String[] args) {\n    Student student;\n    try (SqlSession sqlSession = MybatisUtil.getSession(true)){\n        TestMapper testMapper = sqlSession.getMapper(TestMapper.class);\n        student = testMapper.getStudentBySid(1);\n    }\n\n    try (SqlSession sqlSession2 = MybatisUtil.getSession(true)){\n        TestMapper testMapper2 = sqlSession2.getMapper(TestMapper.class);\n        Student student2 = testMapper2.getStudentBySid(1);\n        System.out.println(student2 == student);\n    }\n}\n```\n\n我们可以看到，上面的代码中首先是第一个会话在进行读操作，完成后会结束会话，而第二个操作重新创建了一个新的会话，再次执行了同样的查询，我们发现得到的依然是缓存的结果。\n\n那么如果我不希望某个方法开启缓存呢？我们可以添加useCache属性来关闭缓存：\n\n```xml\n<select id=\"getStudentBySid\" resultType=\"Student\" useCache=\"false\">\n    select * from student where sid = #{sid}\n</select>\n```\n\n我们也可以使用flushCache=\"false\"在每次执行后都清空缓存，通过这这个我们还可以控制DML操作完成之后不清空缓存。\n\n```xml\n<select id=\"getStudentBySid\" resultType=\"Student\" flushCache=\"true\">\n    select * from student where sid = #{sid}\n</select>\n```\n\n添加了二级缓存之后，会先从二级缓存中查找数据，当二级缓存中没有时，才会从一级缓存中获取，当一级缓存中都还没有数据时，才会请求数据库，因此我们再来执行上面的代码：\n\n```java\npublic static void main(String[] args) {\n    try (SqlSession sqlSession = MybatisUtil.getSession(true)){\n        TestMapper testMapper = sqlSession.getMapper(TestMapper.class);\n\n        Student student2;\n        try(SqlSession sqlSession2 = MybatisUtil.getSession(true)){\n            TestMapper testMapper2 = sqlSession2.getMapper(TestMapper.class);\n            student2 = testMapper2.getStudentBySid(1);\n        }\n\n        Student student1 = testMapper.getStudentBySid(1);\n        System.out.println(student1 == student2);\n    }\n}\n```\n\n得到的结果就会是同一个对象了，因为现在是优先从二级缓存中获取。\n\n读取顺序：二级缓存 => 一级缓存 => 数据库\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fupload-images.jianshu.io%2Fupload_images%2F2176079-2e6599c454e7af19.png\\&refer=http%3A%2F%2Fupload-images.jianshu.io\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1639471352\\&t=c7c1d6b11de1ad9af91e092590c58d83)\n\n虽然缓存机制给我们提供了很大的性能提升，但是缓存存在一个问题，我们之前在`计算机组成原理`中可能学习过缓存一致性问题，也就是说当多个CPU在操作自己的缓存时，可能会出现各自的缓存内容不同步的问题，而Mybatis也会这样，我们来看看这个例子：\n\n```java\npublic static void main(String[] args) throws InterruptedException {\n    try (SqlSession sqlSession = MybatisUtil.getSession(true)){\n        TestMapper testMapper = sqlSession.getMapper(TestMapper.class);\n        while (true){\n            Thread.sleep(3000);\n            System.out.println(testMapper.getStudentBySid(1));\n        }\n    }\n}\n```\n\n我们现在循环地每三秒读取一次，而在这个过程中，我们使用IDEA手动修改数据库中的数据，将1号同学的学号改成100，那么理想情况下，下一次读取将无法获取到小明，因为小明的学号已经发生变化了。\n\n但是结果却是依然能够读取，并且sid并没有发生改变，这也证明了Mybatis的缓存在生效，因为我们是从外部进行修改，Mybatis不知道我们修改了数据，所以依然在使用缓存中的数据，但是这样很明显是不正确的，因此，如果存在多台服务器或者是多个程序都在使用Mybatis操作同一个数据库，并且都开启了缓存，需要解决这个问题，要么就得关闭Mybatis的缓存来保证一致性：\n\n```xml\n<settings>\n    <setting name=\"cacheEnabled\" value=\"false\"/>\n</settings>\n```\n\n```xml\n<select id=\"getStudentBySid\" resultType=\"Student\" useCache=\"false\" flushCache=\"true\">\n    select * from student where sid = #{sid}\n</select>\n```\n\n要么就需要实现缓存共用，也就是让所有的Mybatis都使用同一个缓存进行数据存取，在后面，我们会继续学习Redis、Ehcache、Memcache等缓存框架，通过使用这些工具，就能够很好地解决缓存一致性问题。\n\n### 使用注解开发\n\n在之前的开发中，我们已经体验到Mybatis为我们带来的便捷了，我们只需要编写对应的映射器，并将其绑定到一个接口上，即可直接通过该接口执行我们的SQL语句，极大的简化了我们之前JDBC那样的代码编写模式。那么，能否实现无需xml映射器配置，而是直接使用注解在接口上进行配置呢？答案是可以的，也是现在推荐的一种方式（也不是说XML就不要去用了，由于Java 注解的表达能力和灵活性十分有限，可能相对于XML配置某些功能实现起来会不太好办，但是在大部分场景下，直接使用注解开发已经绰绰有余了）\n\n首先我们来看一下，使用XML进行映射器编写时，我们需要现在XML中定义映射规则和SQL语句，然后再将其绑定到一个接口的方法定义上，然后再使用接口来执行：\n\n```xml\n<insert id=\"addStudent\">\n    insert into student(name, sex) values(#{name}, #{sex})\n</insert>\n```\n\n```java\nint addStudent(Student student);\n```\n\n而现在，我们可以直接使用注解来实现，每个操作都有一个对应的注解：\n\n```java\n@Insert(\"insert into student(name, sex) values(#{name}, #{sex})\")\nint addStudent(Student student);\n```\n\n当然，我们还需要修改一下配置文件中的映射器注册：\n\n```java\n<mappers>\n    <mapper class=\"com.test.mapper.MyMapper\"/>\n    <!--  也可以直接注册整个包下的 <package name=\"com.test.mapper\"/>  -->\n</mappers>\n```\n\n通过直接指定Class，来让Mybatis知道我们这里有一个通过注解实现的映射器。\n\n我们接着来看一下，如何使用注解进行自定义映射规则：\n\n```java\n@Results({\n        @Result(id = true, column = \"sid\", property = \"sid\"),\n        @Result(column = \"sex\", property = \"name\"),\n        @Result(column = \"name\", property = \"sex\")\n})\n@Select(\"select * from student\")\nList<Student> getAllStudent();\n```\n\n直接通过`@Results`注解，就可以直接进行配置了，此注解的value是一个`@Result`注解数组，每个`@Result`注解都都一个单独的字段配置，其实就是我们之前在XML映射器中写的：\n\n```xml\n<resultMap id=\"test\" type=\"Student\">\n    <id property=\"sid\" column=\"sid\"/>\n    <result column=\"name\" property=\"sex\"/>    \n  \t<result column=\"sex\" property=\"name\"/>\n</resultMap>\n```\n\n现在我们就可以通过注解来自定义映射规则了。那么如何使用注解来完成复杂查询呢？我们还是使用一个老师多个学生的例子：\n\n```java\n@Results({\n        @Result(id = true, column = \"tid\", property = \"tid\"),\n        @Result(column = \"name\", property = \"name\"),\n        @Result(column = \"tid\", property = \"studentList\", many =\n            @Many(select = \"getStudentByTid\")\n        )\n})\n@Select(\"select * from teacher where tid = #{tid}\")\nTeacher getTeacherBySid(int tid);\n\n@Select(\"select * from student inner join teach on student.sid = teach.sid where tid = #{tid}\")\nList<Student> getStudentByTid(int tid);\n```\n\n我们发现，多出了一个子查询，而这个子查询是单独查询该老师所属学生的信息，而子查询结果作为`@Result`注解的一个many结果，代表子查询的所有结果都归入此集合中（也就是之前的collection标签）\n\n```xml\n<resultMap id=\"asTeacher\" type=\"Teacher\">\n    <id column=\"tid\" property=\"tid\"/>\n    <result column=\"tname\" property=\"name\"/>\n    <collection property=\"studentList\" ofType=\"Student\">\n        <id property=\"sid\" column=\"sid\"/>\n        <result column=\"name\" property=\"name\"/>\n        <result column=\"sex\" property=\"sex\"/>\n    </collection>\n</resultMap>\n```\n\n同理，`@Result`也提供了`@One`子注解来实现一对一的关系表示，类似于之前的`assocation`标签：\n\n```java\n@Results({\n        @Result(id = true, column = \"sid\", property = \"sid\"),\n        @Result(column = \"sex\", property = \"name\"),\n        @Result(column = \"name\", property = \"sex\"),\n        @Result(column = \"sid\", property = \"teacher\", one =\n            @One(select = \"getTeacherBySid\")\n        )\n})\n@Select(\"select * from student\")\nList<Student> getAllStudent();\n```\n\n如果现在我希望直接使用注解编写SQL语句但是我希望映射规则依然使用XML来实现，这时该怎么办呢？\n\n```java\n@ResultMap(\"test\")\n@Select(\"select * from student\")\nList<Student> getAllStudent();\n```\n\n提供了`@ResultMap`注解，直接指定ID即可，这样我们就可以使用XML中编写的映射规则了，这里就不再演示了。\n\n那么如果出现之前的两个构造方法的情况，且没有任何一个构造方法匹配的话，该怎么处理呢？\n\n```java\n@Data\n@Accessors(chain = true)\npublic class Student {\n\n    public Student(int sid){\n        System.out.println(\"我是一号构造方法\"+sid);\n    }\n\n    public Student(int sid, String name){\n        System.out.println(\"我是二号构造方法\"+sid+name);\n    }\n\n    private int sid;\n    private String name;\n    private String sex;\n}\n```\n\n我们可以通过`@ConstructorArgs`注解来指定构造方法：\n\n```java\n@ConstructorArgs({\n        @Arg(column = \"sid\", javaType = int.class),\n        @Arg(column = \"name\", javaType = String.class)\n})\n@Select(\"select * from student where sid = #{sid} and sex = #{sex}\")\nStudent getStudentBySidAndSex(@Param(\"sid\") int sid, @Param(\"sex\") String sex);\n```\n\n得到的结果和使用`constructor`标签效果一致，这里就不多做讲解了。\n\n我们发现，当参数列表中出现两个以上的参数时，会出现错误：\n\n```java\n@Select(\"select * from student where sid = #{sid} and sex = #{sex}\")\nStudent getStudentBySidAndSex(int sid, String sex);\n```\n\n```java\nException in thread \"main\" org.apache.ibatis.exceptions.PersistenceException: \n### Error querying database.  Cause: org.apache.ibatis.binding.BindingException: Parameter 'sid' not found. Available parameters are [arg1, arg0, param1, param2]\n### Cause: org.apache.ibatis.binding.BindingException: Parameter 'sid' not found. Available parameters are [arg1, arg0, param1, param2]\n\tat org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)\n\tat org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:153)\n\tat org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)\n\tat org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)\n\tat org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76)\n\tat org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:87)\n\tat org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)\n\tat org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)\n\tat com.sun.proxy.$Proxy6.getStudentBySidAndSex(Unknown Source)\n\tat com.test.Main.main(Main.java:16)\n```\n\n原因是Mybatis不明确到底哪个参数是什么，因此我们可以添加`@Param`来指定参数名称：\n\n```java\n@Select(\"select * from student where sid = #{sid} and sex = #{sex}\")\nStudent getStudentBySidAndSex(@Param(\"sid\") int sid, @Param(\"sex\") String sex);\n```\n\n\\*\\*探究：\\*\\*要是我两个参数一个是基本类型一个是对象类型呢？\n\n```java\nSystem.out.println(testMapper.addStudent(100, new Student().setName(\"小陆\").setSex(\"男\")));\n```\n\n```java\n@Insert(\"insert into student(sid, name, sex) values(#{sid}, #{name}, #{sex})\")\nint addStudent(@Param(\"sid\") int sid, @Param(\"student\")  Student student);\n```\n\n那么这个时候，就出现问题了，Mybatis就不能明确这些属性是从哪里来的：\n\n```java\n### SQL: insert into student(sid, name, sex) values(?, ?, ?)\n### Cause: org.apache.ibatis.binding.BindingException: Parameter 'name' not found. Available parameters are [student, param1, sid, param2]\n\tat org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30)\n\tat org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:196)\n\tat org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:181)\n\tat org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)\n\tat org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)\n\tat org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)\n\tat com.sun.proxy.$Proxy6.addStudent(Unknown Source)\n\tat com.test.Main.main(Main.java:16)\n```\n\n那么我们就通过参数名称.属性的方式去让Mybatis知道我们要用的是哪个属性：\n\n```java\n@Insert(\"insert into student(sid, name, sex) values(#{sid}, #{student.name}, #{student.sex})\")\nint addStudent(@Param(\"sid\") int sid, @Param(\"student\")  Student student);\n```\n\n那么如何通过注解控制缓存机制呢？\n\n```java\n@CacheNamespace(readWrite = false)\npublic interface MyMapper {\n\n    @Select(\"select * from student\")\n    @Options(useCache = false)\n    List<Student> getAllStudent();\n```\n\n使用`@CacheNamespace`注解直接定义在接口上即可，然后我们可以通过使用`@Options`来控制单个操作的缓存启用。\n\n### 探究Mybatis的动态代理机制\n\n在探究动态代理机制之前，我们要先聊聊什么是代理：其实顾名思义，就好比我开了个大棚，里面栽种的西瓜，那么西瓜成熟了是不是得去卖掉赚钱，而我们的西瓜非常多，一个人肯定卖不过来，肯定就要去多找几个开水果摊的帮我们卖，这就是一种代理。实际上是由水果摊老板在帮我们卖瓜，我们只告诉老板卖多少钱，而至于怎么卖的是由水果摊老板决定的。\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F2020112311143434.png%3Fx-oss-process%26%2361%3Bimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hhdHR5MTkyMA%26%2361%3B%26%2361%3B%2Csize_16%2Ccolor_FFFFFF%2Ct_7\\&refer=http%3A%2F%2Fimg-blog.csdnimg.cn\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1639472394\\&t=b5590551c75049e91fc497b9920bdb83)\n\n那么现在我们来尝试实现一下这样的类结构，首先定义一个接口用于规范行为：\n\n```java\npublic interface Shopper {\n\n    //卖瓜行为\n    void saleWatermelon(String customer);\n}\n```\n\n然后需要实现一下卖瓜行为，也就是我们要告诉老板卖多少钱，这里就直接写成成功出售：\n\n```java\npublic class ShopperImpl implements Shopper{\n\n    //卖瓜行为的实现\n    @Override\n    public void saleWatermelon(String customer) {\n        System.out.println(\"成功出售西瓜给 ===> \"+customer);\n    }\n}\n```\n\n最后老板代理后肯定要用自己的方式去出售这些西瓜，成交之后再按照我们告诉老板的价格进行出售：\n\n```java\npublic class ShopperProxy implements Shopper{\n\n    private final Shopper impl;\n\n    public ShopperProxy(Shopper impl){\n        this.impl = impl;\n    }\n\n    //代理卖瓜行为\n    @Override\n    public void saleWatermelon(String customer) {\n        //首先进行 代理商讨价还价行为\n        System.out.println(customer + \"：哥们，这瓜多少钱一斤啊？\");\n        System.out.println(\"老板：两块钱一斤。\");\n        System.out.println(customer + \"：你这瓜皮子是金子做的，还是瓜粒子是金子做的？\");\n        System.out.println(\"老板：你瞅瞅现在哪有瓜啊，这都是大棚的瓜，你嫌贵我还嫌贵呢。\");\n        System.out.println(customer + \"：给我挑一个。\");\n\n        impl.saleWatermelon(customer);   //讨价还价成功，进行我们告诉代理商的卖瓜行为\n    }\n}\n```\n\n现在我们来试试看：\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Shopper shopper = new ShopperProxy(new ShopperImpl());\n        shopper.saleWatermelon(\"小强\");\n    }\n}\n```\n\n这样的操作称为静态代理，也就是说我们需要提前知道接口的定义并进行实现才可以完成代理，而Mybatis这样的是无法预知代理接口的，我们就需要用到动态代理。\n\nJDK提供的反射框架就为我们很好地解决了动态代理的问题，在这里相当于对JavaSE阶段反射的内容进行一个补充。\n\n```java\npublic class ShopperProxy implements InvocationHandler {\n\n    Object target;\n    public ShopperProxy(Object target){\n        this.target = target;\n    }\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        String customer = (String) args[0];\n        System.out.println(customer + \"：哥们，这瓜多少钱一斤啊？\");\n        System.out.println(\"老板：两块钱一斤。\");\n        System.out.println(customer + \"：你这瓜皮子是金子做的，还是瓜粒子是金子做的？\");\n        System.out.println(\"老板：你瞅瞅现在哪有瓜啊，这都是大棚的瓜，你嫌贵我还嫌贵呢。\");\n        System.out.println(customer + \"：行，给我挑一个。\");\n        return method.invoke(target, args);\n    }\n}\n```\n\n通过实现InvocationHandler来成为一个动态代理，我们发现它提供了一个invoke方法，用于调用被代理对象的方法并完成我们的代理工作。现在就可以通过` Proxy.newProxyInstance`来生成一个动态代理类：\n\n```java\npublic static void main(String[] args) {\n    Shopper impl = new ShopperImpl();\n    Shopper shopper = (Shopper) Proxy.newProxyInstance(impl.getClass().getClassLoader(),\n            impl.getClass().getInterfaces(), new ShopperProxy(impl));\n    shopper.saleWatermelon(\"小强\");\n  \tSystem.out.println(shopper.getClass());\n}\n```\n\n通过打印类型我们发现，就是我们之前看到的那种奇怪的类：`class com.sun.proxy.$Proxy0`，因此Mybatis其实也是这样的来实现的（肯定有人问了：Mybatis是直接代理接口啊，你这个不还是要把接口实现了吗？）那我们来改改，现在我们不代理任何类了，直接做接口实现：\n\n```java\npublic class ShopperProxy implements InvocationHandler {\n\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        String customer = (String) args[0];\n        System.out.println(customer + \"：哥们，这瓜多少钱一斤啊？\");\n        System.out.println(\"老板：两块钱一斤。\");\n        System.out.println(customer + \"：你这瓜皮子是金子做的，还是瓜粒子是金子做的？\");\n        System.out.println(\"老板：你瞅瞅现在哪有瓜啊，这都是大棚的瓜，你嫌贵我还嫌贵呢。\");\n        System.out.println(customer + \"：行，给我挑一个。\");\n        return null;\n    }\n}\n```\n\n```java\npublic static void main(String[] args) {\n    Shopper shopper = (Shopper) Proxy.newProxyInstance(Shopper.class.getClassLoader(),\n            new Class[]{ Shopper.class },   //因为本身就是接口，所以直接用就行\n            new ShopperProxy());\n    shopper.saleWatermelon(\"小强\");\n    System.out.println(shopper.getClass());\n}\n```\n\n我们可以去看看Mybatis的源码。\n\nMybatis的学习差不多就到这里为止了，不过，同样类型的框架还有很多，Mybatis属于半自动框架，SQL语句依然需要我们自己编写，虽然存在一定的麻烦，但是会更加灵活，而后面我们还会学习JPA，它是全自动的框架，你几乎见不到SQL的影子！\n\n***\n\n## 使用JUnit进行单元测试\n\n首先一问：我们为什么需要单元测试？\n\n随着我们的项目逐渐变大，比如我们之前编写的图书管理系统，我们都是边在写边在测试，而我们当时使用的测试方法，就是直接在主方法中运行测试，但是，在很多情况下，我们的项目可能会很庞大，不可能每次都去完整地启动一个项目来测试某一个功能，这样显然会降低我们的开发效率，因此，我们需要使用单元测试来帮助我们针对于某个功能或是某个模块单独运行代码进行测试，而不是启动整个项目。\n\n同时，在我们项目的维护过程中，难免会涉及到一些原有代码的修改，很有可能出现改了代码导致之前的功能出现问题（牵一发而动全身），而我们又不一定能立即察觉到，因此，我们可以提前保存一些测试用例，每次完成代码后都可以跑一遍测试用例，来确保之前的功能没有因为后续的修改而出现问题。\n\n我们还可以利用单元测试来评估某个模块或是功能的耗时和性能，快速排查导致程序运行缓慢的问题，这些都可以通过单元测试来完成，可见单元测试对于开发的重要性。\n\n### 尝试JUnit\n\n首先需要导入JUnit依赖，我们在这里使用Junit4进行介绍，最新的Junit5放到Maven板块一起讲解，Jar包已经放在视频下方简介中，直接去下载即可。同时IDEA需要安装JUnit插件（默认是已经捆绑安装的，因此无需多余配置）\n\n现在我们创建一个新的类，来编写我们的单元测试用例：\n\n```java\npublic class TestMain {\n    @Test\n    public void method(){\n        System.out.println(\"我是测试用例1\");\n    }\n\n    @Test\n    public void method2(){\n        System.out.println(\"我是测试用例2\");\n    }\n}\n```\n\n我们可以点击类前面的测试按钮，或是单个方法前的测试按钮，如果点击类前面的测试按钮，会执行所有的测试用例。\n\n运行测试后，我们发现控制台得到了一个测试结果，显示为绿色表示测试通过。\n\n只需要通过打上`@Test`注解，即可将一个方法标记为测试案例，我们可以直接运行此测试案例，但是我们编写的测试方法有以下要求：\n\n*   方法必须是public的\n*   不能是静态方法\n*   返回值必须是void\n*   必须是没有任何参数的方法\n\n对于一个测试案例来说，我们肯定希望测试的结果是我们所期望的一个值，因此，如果测试的结果并不是我们所期望的结果，那么这个测试就应该没有成功通过！\n\n我们可以通过断言工具类来进行判定：\n\n```java\npublic class TestMain {\n    @Test\n    public void method(){\n        System.out.println(\"我是测试案例！\");\n        Assert.assertEquals(1, 2);    //参数1是期盼值，参数2是实际测试结果值\n    }\n}\n```\n\n通过运行代码后，我们发现测试过程中抛出了一个错误，并且IDEA给我们显示了期盼结果和测试结果，那么现在我们来测试一个案例，比如我们想查看冒泡排序的编写是否正确：\n\n```java\n@Test\npublic void method(){\n    int[] arr = {0, 4, 5, 2, 6, 9, 3, 1, 7, 8};\n\n    //错误的冒泡排序\n    for (int i = 0; i < arr.length - 1; i++) {\n        for (int j = 0; j < arr.length - 1 - i; j++) {\n            if(arr[j] > arr[j + 1]){\n                int tmp = arr[j];\n                arr[j] = arr[j+1];\n                // arr[j+1] = tmp;\n            }\n        }\n    }\n\n    Assert.assertArrayEquals(new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, arr);\n}\n```\n\n通过测试，我们发现得到的结果并不是我们想要的结果，因此现在我们需要去修改为正确的冒泡排序，修改后，测试就能正确通过了。我们还可以再通过一个案例来更加深入地了解测试，现在我们想测试从数据库中取数据是否为我们预期的数据：\n\n```java\n@Test\npublic void method(){\n    try (SqlSession sqlSession = MybatisUtil.getSession(true)){\n        TestMapper mapper = sqlSession.getMapper(TestMapper.class);\n        Student student = mapper.getStudentBySidAndSex(1, \"男\");\n\n        Assert.assertEquals(new Student().setName(\"小明\").setSex(\"男\").setSid(1), student);\n    }\n}\n```\n\n那么如果我们在进行所有的测试之前需要做一些前置操作该怎么办呢，一种办法是在所有的测试用例前面都加上前置操作，但是这样显然是很冗余的，因为一旦发生修改就需要挨个进行修改，因此我们需要更加智能的方法，我们可以通过`@Before`注解来添加测试用例开始之前的前置操作：\n\n```java\npublic class TestMain {\n\n    private SqlSessionFactory sqlSessionFactory;\n    @Before\n    public void before(){\n        System.out.println(\"测试前置正在初始化...\");\n        try {\n            sqlSessionFactory = new SqlSessionFactoryBuilder()\n                    .build(new FileInputStream(\"mybatis-config.xml\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"测试初始化完成，正在开始测试案例...\");\n    }\n\n    @Test\n    public void method1(){\n        try (SqlSession sqlSession = sqlSessionFactory.openSession(true)){\n            TestMapper mapper = sqlSession.getMapper(TestMapper.class);\n            Student student = mapper.getStudentBySidAndSex(1, \"男\");\n\n            Assert.assertEquals(new Student().setName(\"小明\").setSex(\"男\").setSid(1), student);\n            System.out.println(\"测试用例1通过！\");\n        }\n    }\n\n    @Test\n    public void method2(){\n        try (SqlSession sqlSession = sqlSessionFactory.openSession(true)){\n            TestMapper mapper = sqlSession.getMapper(TestMapper.class);\n            Student student = mapper.getStudentBySidAndSex(2, \"女\");\n\n            Assert.assertEquals(new Student().setName(\"小红\").setSex(\"女\").setSid(2), student);\n            System.out.println(\"测试用例2通过！\");\n        }\n    }\n}\n```\n\n同理，在所有的测试完成之后，我们还想添加一个收尾的动作，那么只需要使用`@After`注解即可添加结束动作：\n\n```java\n@After\npublic void after(){\n    System.out.println(\"测试结束，收尾工作正在进行...\");\n}\n```\n\n有关JUnit的使用我们就暂时只介绍这么多。\n\n***\n\n## JUL日志系统\n\n首先一问：我们为什么需要日志系统？\n\n我们之前一直都在使用`System.out.println`来打印信息，但是，如果项目中存在大量的控制台输出语句，会显得很凌乱，而且日志的粒度是不够细的，假如我们现在希望，项目只在debug的情况下打印某些日志，而在实际运行时不打印日志，采用直接输出的方式就很难实现了，因此我们需要使用日志框架来规范化日志输出。\n\n而JDK为我们提供了一个自带的日志框架，位于`java.util.logging`包下，我们可以使用此框架来实现日志的规范化打印，使用起来非常简单：\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n      \t// 首先获取日志打印器\n        Logger logger = Logger.getLogger(Main.class.getName());\n      \t// 调用info来输出一个普通的信息，直接填写字符串即可\n        logger.info(\"我是普通的日志\");\n    }\n}\n```\n\n我们可以在主类中使用日志打印，得到日志的打印结果：\n\n```tex\n十一月 15, 2021 12:55:37 下午 com.test.Main main\n信息: 我是普通的日志\n```\n\n我们发现，通过日志输出的结果会更加规范。\n\n### JUL日志讲解\n\n日志分为7个级别，详细信息我们可以在Level类中查看：\n\n*   SEVERE（最高值）- 一般用于代表严重错误\n*   WARNING  - 一般用于表示某些警告，但是不足以判断为错误\n*   INFO （默认级别）  -  常规消息\n*   CONFIG\n*   FINE\n*   FINER\n*   FINEST（最低值）\n\n我们之前通过`info`方法直接输出的结果就是使用的默认级别的日志，我们可以通过`log`方法来设定该条日志的输出级别：\n\n```java\npublic static void main(String[] args) {\n    Logger logger = Logger.getLogger(Main.class.getName());\n    logger.log(Level.SEVERE, \"严重的错误\", new IOException(\"我就是错误\"));\n    logger.log(Level.WARNING, \"警告的内容\");\n    logger.log(Level.INFO, \"普通的信息\");\n    logger.log(Level.CONFIG, \"级别低于普通信息\");\n}\n```\n\n我们发现，级别低于默认级别的日志信息，无法输出到控制台，我们可以通过设置来修改日志的打印级别：\n\n```java\npublic static void main(String[] args) {\n    Logger logger = Logger.getLogger(Main.class.getName());\n\n    //修改日志级别\n    logger.setLevel(Level.CONFIG);\n    //不使用父日志处理器\n    logger.setUseParentHandlers(false);\n    //使用自定义日志处理器\n    ConsoleHandler handler = new ConsoleHandler();\n    handler.setLevel(Level.CONFIG);\n    logger.addHandler(handler);\n\n    logger.log(Level.SEVERE, \"严重的错误\", new IOException(\"我就是错误\"));\n    logger.log(Level.WARNING, \"警告的内容\");\n    logger.log(Level.INFO, \"普通的信息\");\n    logger.log(Level.CONFIG, \"级别低于普通信息\");\n}\n```\n\n每个`Logger`都有一个父日志打印器，我们可以通过`getParent()`来获取：\n\n```java\npublic static void main(String[] args) throws IOException {\n    Logger logger = Logger.getLogger(Main.class.getName());\n    System.out.println(logger.getParent().getClass());\n}\n```\n\n我们发现，得到的是`java.util.logging.LogManager$RootLogger`这个类，它默认使用的是ConsoleHandler，且日志级别为INFO，由于每一个日志打印器都会直接使用父类的处理器，因此我们之前需要关闭父类然后使用我们自己的处理器。\n\n我们通过使用自己日志处理器来自定义级别的信息打印到控制台，当然，日志处理器不仅仅只有控制台打印，我们也可以使用文件处理器来处理日志信息，我们继续添加一个处理器：\n\n```java\n//添加输出到本地文件\nFileHandler fileHandler = new FileHandler(\"test.log\");\nfileHandler.setLevel(Level.WARNING);\nlogger.addHandler(fileHandler);\n```\n\n注意，这个时候就有两个日志处理器了，因此控制台和文件的都会生效。如果日志的打印格式我们不喜欢，我们还可以自定义打印格式，比如我们控制台处理器就默认使用的是`SimpleFormatter`，而文件处理器则是使用的`XMLFormatter`，我们可以自定义：\n\n```java\n//使用自定义日志处理器(控制台)\nConsoleHandler handler = new ConsoleHandler();\nhandler.setLevel(Level.CONFIG);\nhandler.setFormatter(new XMLFormatter());\nlogger.addHandler(handler);\n```\n\n我们可以直接配置为想要的打印格式，如果这些格式还不能满足你，那么我们也可以自行实现：\n\n```java\npublic static void main(String[] args) throws IOException {\n    Logger logger = Logger.getLogger(Main.class.getName());\n    logger.setUseParentHandlers(false);\n\n    //为了让颜色变回普通的颜色，通过代码块在初始化时将输出流设定为System.out\n    ConsoleHandler handler = new ConsoleHandler(){{\n        setOutputStream(System.out);\n    }};\n    //创建匿名内部类实现自定义的格式\n    handler.setFormatter(new Formatter() {\n        @Override\n        public String format(LogRecord record) {\n            SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n            String time = format.format(new Date(record.getMillis()));  //格式化日志时间\n            String level = record.getLevel().getName();  // 获取日志级别名称\n            // String level = record.getLevel().getLocalizedName();   // 获取本地化名称（语言跟随系统）\n            String thread = String.format(\"%10s\", Thread.currentThread().getName());  //线程名称（做了格式化处理，留出10格空间）\n            long threadID = record.getThreadID();   //线程ID\n            String className = String.format(\"%-20s\", record.getSourceClassName());  //发送日志的类名\n            String msg = record.getMessage();   //日志消息\n\n          //\\033[33m作为颜色代码，30~37都有对应的颜色，38是没有颜色，IDEA能显示，但是某些地方可能不支持\n            return \"\\033[38m\" + time + \"  \\033[33m\" + level + \" \\033[35m\" + threadID\n                    + \"\\033[38m --- [\" + thread + \"] \\033[36m\" + className + \"\\033[38m : \" + msg + \"\\n\";\n        }\n    });\n    logger.addHandler(handler);\n\n    logger.info(\"我是测试消息1...\");\n    logger.log(Level.INFO, \"我是测试消息2...\");\n    logger.log(Level.WARNING, \"我是测试消息3...\");\n}\n```\n\n日志可以设置过滤器，如果我们不希望某些日志信息被输出，我们可以配置过滤规则：\n\n```java\npublic static void main(String[] args) throws IOException {\n    Logger logger = Logger.getLogger(Main.class.getName());\n\n    //自定义过滤规则\n    logger.setFilter(record -> !record.getMessage().contains(\"普通\"));\n\n    logger.log(Level.SEVERE, \"严重的错误\", new IOException(\"我就是错误\"));\n    logger.log(Level.WARNING, \"警告的内容\");\n    logger.log(Level.INFO, \"普通的信息\");\n}\n```\n\n实际上，整个日志的输出流程如下：\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20210310214730384.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4NjIzMzc1%2Csize_16%2Ccolor_FFFFFF%2Ct_70\\&refer=http%3A%2F%2Fimg-blog.csdnimg.cn\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1639566412\\&t=aec06446b8338134a3dbddfaba9bde69)\n\n### Properties配置文件\n\nProperties文件是Java的一种配置文件，我们之前学习了XML，但是我们发现XML配置文件读取实在是太麻烦，那么能否有一种简单一点的配置文件呢？我们可以使用Properties文件：\n\n```properties\nname=Test\ndesc=Description\n```\n\n该文件配置很简单，格式为`配置项=配置值`，我们可以直接通过`Properties`类来将其读取为一个类似于Map一样的对象：\n\n```java\npublic static void main(String[] args) throws IOException {\n    Properties properties = new Properties();\n    properties.load(new FileInputStream(\"test.properties\"));\n    System.out.println(properties);\n}\n```\n\n我们发现，`Properties`类是继承自`Hashtable`，而`Hashtable`是实现的Map接口，也就是说，`Properties`本质上就是一个Map一样的结构，它会把所有的配置项映射为一个Map，这样我们就可以快速地读取对应配置的值了。\n\n我们也可以将已经存在的Properties对象放入输出流进行保存，我们这里就不保存文件了，而是直接打印到控制台，我们只需要提供输出流即可：\n\n```java\npublic static void main(String[] args) throws IOException {\n    Properties properties = new Properties();\n  \t// properties.setProperty(\"test\", \"lbwnb\");  //和put效果一样\n    properties.put(\"test\", \"lbwnb\");\n    properties.store(System.out, \"????\");\n  \t//properties.storeToXML(System.out, \"????\");  保存为XML格式\n}\n```\n\n我们可以通过`System.getProperties()`获取系统的参数，我们来看看：\n\n```java\npublic static void main(String[] args) throws IOException {\n    System.getProperties().store(System.out, \"系统信息：\");\n}\n```\n\n### 编写日志配置文件\n\n我们可以通过进行配置文件来规定日志打印器的一些默认值：\n\n```properties\n# RootLogger 的默认处理器为\nhandlers= java.util.logging.ConsoleHandler\n# RootLogger 的默认的日志级别\n.level= CONFIG\n```\n\n我们来尝试使用配置文件来进行配置：\n\n```java\npublic static void main(String[] args) throws IOException {\n    //获取日志管理器\n    LogManager manager = LogManager.getLogManager();\n    //读取我们自己的配置文件\n    manager.readConfiguration(new FileInputStream(\"logging.properties\"));\n    //再获取日志打印器\n    Logger logger = Logger.getLogger(Main.class.getName());\n    logger.log(Level.CONFIG, \"我是一条日志信息\");   //通过自定义配置文件，我们发现默认级别不再是INFO了\n}\n```\n\n我们也可以去修改`ConsoleHandler`的默认配置：\n\n```properties\n# 指定默认日志级别\njava.util.logging.ConsoleHandler.level = ALL\n# 指定默认日志消息格式\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n# 指定默认的字符集\njava.util.logging.ConsoleHandler.encoding = UTF-8\n```\n\n其实，我们阅读`ConsoleHandler`的源码就会发现，它就是通过读取配置文件来进行某些参数设置：\n\n```java\n// Private method to configure a ConsoleHandler from LogManager\n// properties and/or default values as specified in the class\n// javadoc.\nprivate void configure() {\n    LogManager manager = LogManager.getLogManager();\n    String cname = getClass().getName();\n\n    setLevel(manager.getLevelProperty(cname +\".level\", Level.INFO));\n    setFilter(manager.getFilterProperty(cname +\".filter\", null));\n    setFormatter(manager.getFormatterProperty(cname +\".formatter\", new SimpleFormatter()));\n    try {\n        setEncoding(manager.getStringProperty(cname +\".encoding\", null));\n    } catch (Exception ex) {\n        try {\n            setEncoding(null);\n        } catch (Exception ex2) {\n            // doing a setEncoding with null should always work.\n            // assert false;\n        }\n    }\n}\n```\n\n### 使用Lombok快速开启日志\n\n我们发现，如果我们现在需要全面使用日志系统，而不是传统的直接打印，那么就需要在每个类都去编写获取Logger的代码，这样显然是很冗余的，能否简化一下这个流程呢？\n\n前面我们学习了Lombok，我们也体会到Lombok给我们带来的便捷，我们可以通过一个注解快速生成构造方法、Getter和Setter，同样的，Logger也是可以使用Lombok快速生成的。\n\n```java\n@Log\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"自动生成的Logger名称：\"+log.getName());\n        log.info(\"我是日志信息\");\n    }\n}\n```\n\n只需要添加一个`@Log`注解即可，添加后，我们可以直接使用一个静态变量log，而它就是自动生成的Logger。我们也可以手动指定名称：\n\n```java\n@Log(topic = \"打工是不可能打工的\")\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"自动生成的Logger名称：\"+log.getName());\n        log.info(\"我是日志信息\");\n    }\n}\n```\n\n### Mybatis日志系统\n\nMybatis也有日志系统，它详细记录了所有的数据库操作等，但是我们在前面的学习中没有开启它，现在我们学习了日志之后，我们就可以尝试开启Mybatis的日志系统，来监控所有的数据库操作，要开启日志系统，我们需要进行配置：\n\n```xml\n<setting name=\"logImpl\" value=\"STDOUT_LOGGING\" />\n```\n\n`logImpl`包括很多种配置项，包括 SLF4J | LOG4J | LOG4J2 | JDK\\_LOGGING | COMMONS\\_LOGGING | STDOUT\\_LOGGING | NO\\_LOGGING，而默认情况下是未配置，也就是说不打印。我们这里将其设定为STDOUT\\_LOGGING表示直接使用标准输出将日志信息打印到控制台，我们编写一个测试案例来看看效果：\n\n```java\npublic class TestMain {\n\n    private SqlSessionFactory sqlSessionFactory;\n    @Before\n    public void before(){\n        try {\n            sqlSessionFactory = new SqlSessionFactoryBuilder()\n                    .build(new FileInputStream(\"mybatis-config.xml\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    public void test(){\n        try(SqlSession sqlSession = sqlSessionFactory.openSession(true)){\n            TestMapper mapper = sqlSession.getMapper(TestMapper.class);\n            System.out.println(mapper.getStudentBySidAndSex(1, \"男\"));\n            System.out.println(mapper.getStudentBySidAndSex(1, \"男\"));\n        }\n    }\n}\n```\n\n我们发现，两次获取学生信息，只有第一次打开了数据库连接，而第二次并没有。\n\n现在我们学习了日志系统，那么我们来尝试使用日志系统输出Mybatis的日志信息：\n\n```xml\n<setting name=\"logImpl\" value=\"JDK_LOGGING\" />\n```\n\n将其配置为JDK\\_LOGGING表示使用JUL进行日志打印，因为Mybatis的日志级别都比较低，因此我们需要设置一下`logging.properties`默认的日志级别：\n\n```properties\nhandlers= java.util.logging.ConsoleHandler\n.level= ALL\njava.util.logging.ConsoleHandler.level = ALL\n```\n\n代码编写如下：\n\n```java\n@Log\npublic class TestMain {\n\n    private SqlSessionFactory sqlSessionFactory;\n    @Before\n    public void before(){\n        try {\n            sqlSessionFactory = new SqlSessionFactoryBuilder()\n                    .build(new FileInputStream(\"mybatis-config.xml\"));\n            LogManager manager = LogManager.getLogManager();\n            manager.readConfiguration(new FileInputStream(\"logging.properties\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Test\n    public void test(){\n        try(SqlSession sqlSession = sqlSessionFactory.openSession(true)){\n            TestMapper mapper = sqlSession.getMapper(TestMapper.class);\n            log.info(mapper.getStudentBySidAndSex(1, \"男\").toString());\n            log.info(mapper.getStudentBySidAndSex(1, \"男\").toString());\n        }\n    }\n}\n```\n\n但是我们发现，这样的日志信息根本没法看，因此我们需要修改一下日志的打印格式，我们自己创建一个格式化类：\n\n```java\npublic class TestFormatter extends Formatter {\n    @Override\n    public String format(LogRecord record) {\n        SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n        String time = format.format(new Date(record.getMillis()));  //格式化日志时间\n        return time + \" : \" + record.getMessage() + \"\\n\";\n    }\n}\n```\n\n现在再来修改一下默认的格式化实现：\n\n```properties\nhandlers= java.util.logging.ConsoleHandler\n.level= ALL\njava.util.logging.ConsoleHandler.level = ALL\njava.util.logging.ConsoleHandler.formatter = com.test.TestFormatter\n```\n\n现在就好看多了，当然，我们还可以继续为Mybatis添加文件日志，这里就不做演示了。\n\n***\n\n## 使用Maven管理项目\n\n\\*\\*注意：\\*\\*开始之前，看看你C盘空间够不够，最好预留2GB空间以上！\n\n\\*\\*吐槽：\\*\\*很多电脑预装系统C盘都给得巨少，就算不装软件，一些软件的缓存文件也能给你塞满，建议有时间重装一下系统重新分配一下磁盘空间。\n\nMaven 翻译为\"专家\"、\"内行\"，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。\n\n通过Maven，可以帮助我们做：\n\n*   项目的自动构建，包括代码的编译、测试、打包、安装、部署等操作。\n*   依赖管理，项目使用到哪些依赖，可以快速完成导入。\n\n我们之前并没有讲解如何将我们的项目打包为Jar文件运行，同时，我们导入依赖的时候，每次都要去下载对应的Jar包，这样其实是很麻烦的，并且还有可能一个Jar包依赖于另一个Jar包，就像之前使用JUnit一样，因此我们需要一个更加方便的包管理机制。\n\nMaven也需要安装环境，但是IDEA已经自带了Maven环境，因此我们不需要再去进行额外的环境安装（无IDEA也能使用Maven，但是配置过程很麻烦，并且我们现在使用的都是IDEA的集成开发环境，所以这里就不讲解Maven命令行操作了）我们直接创建一个新的Maven项目即可。\n\n### Maven项目结构\n\n我们可以来看一下，一个Maven项目和我们普通的项目有什么区别：\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F910235ebc812ba94abb0f762e3914f67.png\\&refer=http%3A%2F%2Fimg-blog.csdnimg.cn\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1639621411\\&t=2a62e7ef9b056d8cbe772e34fea0cc6f)\n\n那么首先，我们需要了解一下POM文件，它相当于是我们整个Maven项目的配置文件，它也是使用XML编写的：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>MavenTest</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n    </properties>\n\n</project>\n```\n\n我们可以看到，Maven的配置文件是以`project`为根节点，而`modelVersion`定义了当前模型的版本，一般是4.0.0，我们不用去修改。\n\n`groupId`、`artifactId`、`version`这三个元素合在一起，用于唯一区别每个项目，别人如果需要将我们编写的代码作为依赖，那么就必须通过这三个元素来定位我们的项目，我们称为一个项目的基本坐标，所有的项目一般都有自己的Maven坐标，因此我们通过Maven导入其他的依赖只需要填写这三个基本元素就可以了，无需再下载Jar文件，而是Maven自动帮助我们下载依赖并导入。\n\n*   `groupId` 一般用于指定组名称，命名规则一般和包名一致，比如我们这里使用的是`org.example`，一个组下面可以有很多个项目。\n*   `artifactId` 一般用于指定项目在当前组中的唯一名称，也就是说在组中用于区分于其他项目的标记。\n*   `version` 代表项目版本，随着我们项目的开发和改进，版本号也会不断更新，就像LOL一样，每次赛季更新都会有一个大版本更新，我们的Maven项目也是这样，我们可以手动指定当前项目的版本号，其他人使用我们的项目作为依赖时，也可以根本版本号进行选择（这里的SNAPSHOT代表快照，一般表示这是一个处于开发中的项目，正式发布项目一般只带版本号）\n\n`properties`中一般都是一些变量和选项的配置，我们这里指定了JDK的源代码和编译版本为1.8，无需进行修改。\n\n### Maven依赖导入\n\n现在我们尝试使用Maven来帮助我们快速导入依赖，我们需要导入之前的JDBC驱动依赖、JUnit依赖、Mybatis依赖、Lombok依赖，那么如何使用Maven来管理依赖呢？\n\n我们可以创建一个`dependencies`节点：\n\n```xml\n<dependencies>\n    //里面填写的就是所有的依赖\n</dependencies>\n```\n\n那么现在就可以向节点中填写依赖了，那么我们如何知道每个依赖的坐标呢？我们可以在：<https://mvnrepository.com/> 进行查询（可能打不开，建议用流量，或是直接百度某个项目的Maven依赖），我们直接搜索lombok即可，打开后可以看到已经给我们写出了依赖的坐标：\n\n```xml\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <version>1.18.22</version>\n    <scope>provided</scope>\n</dependency>\n```\n\n我们直接将其添加到`dependencies`节点中即可，现在我们来编写一个测试用例看看依赖导入成功了没有：\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        Student student = new Student(\"小明\", 18);\n        System.out.println(student);\n    }\n}\n```\n\n```java\n@Data\n@AllArgsConstructor\npublic class Student {\n    String name;\n    int age;\n}\n```\n\n项目运行成功，表示成功导入了依赖。那么，Maven是如何进行依赖管理呢，以致于如此便捷的导入依赖，我们来看看Maven项目的依赖管理流程：\n\n![img](https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimage.bubuko.com%2Finfo%2F201901%2F20190106202802893827.png\\&refer=http%3A%2F%2Fimage.bubuko.com\\&app=2002\\&size=f9999,10000\\&q=a80\\&n=0\\&g=0n\\&fmt=jpeg?sec=1639624645\\&t=75fdf146baa915fbba88918895f92b81)\n\n通过流程图我们得知，一个项目依赖一般是存储在中央仓库中，也有可能存储在一些其他的远程仓库（私服），几乎所有的依赖都被放到了中央仓库中，因此，Maven可以直接从中央仓库中下载大部分的依赖（Maven第一次导入依赖是需要联网的），远程仓库中下载之后 ，会暂时存储在本地仓库，我们会发现我们本地存在一个`.m2`文件夹，这就是Maven本地仓库文件夹，默认建立在C盘，如果你C盘空间不足，会出现问题！\n\n在下次导入依赖时，如果Maven发现本地仓库中就已经存在某个依赖，那么就不会再去远程仓库下载了。\n\n可能在导入依赖时，小小伙伴们会出现卡顿的问题，我们建议配置一下IDEA自带的Maven插件远程仓库地址，我们打开IDEA的安装目录，找到`安装根目录/plugins/maven/lib/maven3/conf`文件夹，找到`settings.xml`文件，打开编辑：\n\n找到mirros标签，添加以下内容：\n\n```xml\n<mirror>\n      <id>nexus-aliyun</id>\n      <mirrorOf>*</mirrorOf>\n      <name>Nexus aliyun</name>\n      <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n</mirror> \n```\n\n这样，我们就将默认的远程仓库地址（国外），配置为国内的阿里云仓库地址了（依赖的下载速度就会快起来了）\n\n### Maven依赖作用域\n\n除了三个基本的属性用于定位坐标外，依赖还可以添加以下属性：\n\n*   **type**：依赖的类型，对于项目坐标定义的packaging。大部分情况下，该元素不必声明，其默认值为jar\n*   **scope**：依赖的范围（作用域，着重讲解）\n*   **optional**：标记依赖是否可选\n*   **exclusions**：用来排除传递性依赖（一个项目有可能依赖于其他项目，就像我们的项目，如果别人要用我们的项目作为依赖，那么就需要一起下载我们项目的依赖，如Lombok）\n\n我们着重来讲解一下`scope`属性，它决定了依赖的作用域范围：\n\n*   **compile** ：为默认的依赖有效范围。如果在定义依赖关系的时候，没有明确指定依赖有效范围的话，则默认采用该依赖有效范围。此种依赖，在编译、运行、测试时均有效。\n*   **provided** ：在编译、测试时有效，但是在运行时无效，也就是说，项目在运行时，不需要此依赖，比如我们上面的Lombok，我们只需要在编译阶段使用它，编译完成后，实际上已经转换为对应的代码了，因此Lombok不需要在项目运行时也存在。\n*   **runtime** ：在运行、测试时有效，但是在编译代码时无效。比如我们如果需要自己写一个JDBC实现，那么肯定要用到JDK为我们指定的接口，但是实际上在运行时是不用自带JDK的依赖，因此只保留我们自己写的内容即可。\n*   **test** ：只在测试时有效，例如：JUnit，我们一般只会在测试阶段使用JUnit，而实际项目运行时，我们就用不到测试了，那么我们来看看，导入JUnit的依赖：\n\n同样的，我们可以在网站上搜索Junit的依赖，我们这里导入最新的JUnit5作为依赖：\n\n```xml\n<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter</artifactId>\n    <version>5.8.1</version>\n    <scope>test</scope>\n</dependency>\n```\n\n我们所有的测试用例全部编写到Maven项目给我们划分的test目录下，位于此目录下的内容不会在最后被打包到项目中，只用作开发阶段测试使用：\n\n```java\npublic class MainTest {\n\n    @Test\n    public void test(){\n        System.out.println(\"测试\");\n      \t//Assert在JUnit5时名称发生了变化Assertions\n        Assertions.assertArrayEquals(new int[]{1, 2, 3}, new int[]{1, 2});\n    }\n}\n```\n\n因此，一般仅用作测试的依赖如JUnit只保留在测试中即可，那么现在我们再来添加JDBC和Mybatis的依赖：\n\n```xml\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.27</version>\n</dependency>\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>3.5.7</version>\n</dependency>\n```\n\n我们发现，Maven还给我们提供了一个`resource`文件夹，我们可以将一些静态资源，比如配置文件，放入到这个文件夹中，项目在打包时会将资源文件夹中文件一起打包的Jar中，比如我们在这里编写一个Mybatis的配置文件：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n        PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n    <settings>\n        <setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/>\n        <setting name=\"cacheEnabled\" value=\"true\"/>\n        <setting name=\"logImpl\" value=\"JDK_LOGGING\" />\n    </settings>\n    <!-- 需要在environments的上方 -->\n    <typeAliases>\n        <package name=\"com.test.entity\"/>\n    </typeAliases>\n    <environments default=\"development\">\n        <environment id=\"development\">\n            <transactionManager type=\"JDBC\"/>\n            <dataSource type=\"POOLED\">\n                <property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/>\n                <property name=\"url\" value=\"jdbc:mysql://localhost:3306/study\"/>\n                <property name=\"username\" value=\"test\"/>\n                <property name=\"password\" value=\"123456\"/>\n            </dataSource>\n        </environment>\n    </environments>\n    <mappers>\n        <mapper class=\"com.test.mapper.TestMapper\"/>\n    </mappers>\n</configuration>\n```\n\n现在我们创建一下测试用例，顺便带大家了解一下Junit5的一些比较方便的地方：\n\n```java\npublic class MainTest {\n\n    //因为配置文件位于内部，我们需要使用Resources类的getResourceAsStream来获取内部的资源文件\n    private static SqlSessionFactory factory;\n\n    //在JUnit5中@Before被废弃，它被细分了：\n    @BeforeAll // 一次性开启所有测试案例只会执行一次 (方法必须是static)\n    // @BeforeEach 一次性开启所有测试案例每个案例开始之前都会执行一次\n    @SneakyThrows\n    public static void before(){\n        factory = new SqlSessionFactoryBuilder()\n                .build(Resources.getResourceAsStream(\"mybatis.xml\"));\n    }\n\n\n    @DisplayName(\"Mybatis数据库测试\")  //自定义测试名称\n    @RepeatedTest(3)  //自动执行多次测试\n    public void test(){\n        try (SqlSession sqlSession = factory.openSession(true)){\n            TestMapper testMapper = sqlSession.getMapper(TestMapper.class);\n            System.out.println(testMapper.getStudentBySid(1));\n        }\n    }\n}\n```\n\n那么就有人提问了，如果我需要的依赖没有上传的远程仓库，而是只有一个Jar怎么办呢？我们可以使用第四种作用域：\n\n*   **system**：作用域和provided是一样的，但是它不是从远程仓库获取，而是直接导入本地Jar包：\n\n```xml\n<dependency>\n     <groupId>javax.jntm</groupId>\n     <artifactId>lbwnb</artifactId>\n     <version>2.0</version>\n     <scope>system</scope>\n     <systemPath>C://学习资料/4K高清无码/test.jar</systemPath>\n</dependency>\n```\n\n比如上面的例子，如果scope为system，那么我们需要添加一个systemPath来指定jar文件的位置，这里就不再演示了。\n\n### Maven可选依赖\n\n当项目中的某些依赖不希望被使用此项目作为依赖的项目使用时，我们可以给依赖添加`optional`标签表示此依赖是可选的，默认在导入依赖时，不会导入可选的依赖：\n\n```xml\n<optional>true</optional>\n```\n\n比如Mybatis的POM文件中，就存在大量的可选依赖：\n\n```xml\n<dependency>\n  <groupId>org.slf4j</groupId>\n  <artifactId>slf4j-api</artifactId>\n  <version>1.7.30</version>\n  <optional>true</optional>\n</dependency>\n<dependency>\n  <groupId>org.slf4j</groupId>\n  <artifactId>slf4j-log4j12</artifactId>\n  <version>1.7.30</version>\n  <optional>true</optional>\n</dependency>\n<dependency>\n  <groupId>log4j</groupId>\n  <artifactId>log4j</artifactId>\n  <version>1.2.17</version>\n  <optional>true</optional>\n</dependency>\n ...\n```\n\n由于Mybatis要支持多种类型的日志，需要用到很多种不同的日志框架，因此需要导入这些依赖来做兼容，但是我们项目中并不一定会使用这些日志框架作为Mybatis的日志打印器，因此这些日志框架仅Mybatis内部做兼容需要导入使用，而我们可以选择不使用这些框架或是选择其中一个即可，也就是说我们导入Mybatis之后想用什么日志框架再自己加就可以了。\n\n### Maven排除依赖\n\n我们了解了可选依赖，现在我们可以让使用此项目作为依赖的项目默认不使用可选依赖，但是如果存在那种不是可选依赖，但是我们导入此项目有不希望使用此依赖该怎么办呢，这个时候我们就可以通过排除依赖来防止添加不必要的依赖：\n\n```xml\n<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter</artifactId>\n    <version>5.8.1</version>\n    <scope>test</scope>\n    <exclusions>\n        <exclusion>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\n我们这里演示了排除JUnit的一些依赖，我们可以在外部库中观察排除依赖之后和之前的效果。\n\n### Maven继承关系\n\n一个Maven项目可以继承自另一个Maven项目，比如多个子项目都需要父项目的依赖，我们就可以使用继承关系来快速配置。\n\n我们右键左侧栏，新建一个模块，来创建一个子项目：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <parent>\n        <artifactId>MavenTest</artifactId>\n        <groupId>org.example</groupId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>ChildModel</artifactId>\n\n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n    </properties>\n\n</project>\n```\n\n我们可以看到，IDEA默认给我们添加了一个parent节点，表示此Maven项目是父Maven项目的子项目，子项目直接继承父项目的`groupId`，子项目会直接继承父项目的所有依赖，除非依赖添加了optional标签，我们来编写一个测试用例尝试一下:\n\n```java\nimport lombok.extern.java.Log;\n\n@Log\npublic class Main {\n    public static void main(String[] args) {\n        log.info(\"我是日志信息\");\n    }\n}\n```\n\n可以看到，子项目也成功继承了Lombok依赖。\n\n我们还可以让父Maven项目统一管理所有的依赖，包括版本号等，子项目可以选取需要的作为依赖，而版本全由父项目管理，我们可以将`dependencies`全部放入`dependencyManagement`节点，这样父项目就完全作为依赖统一管理。\n\n```xml\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.18.22</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter</artifactId>\n            <version>5.8.1</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.27</version>\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis</groupId>\n            <artifactId>mybatis</artifactId>\n            <version>3.5.7</version>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n我们发现，子项目的依赖失效了，因为现在父项目没有依赖，而是将所有的依赖进行集中管理，子项目需要什么再拿什么即可，同时子项目无需指定版本，所有的版本全部由父项目决定，子项目只需要使用即可：\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n        <scope>provided</scope>\n    </dependency>\n</dependencies>\n```\n\n当然，父项目如果还存在dependencies节点的话，里面的内依赖依然是直接继承：\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.junit.jupiter</groupId>\n        <artifactId>junit-jupiter</artifactId>\n        <version>5.8.1</version>\n        <scope>test</scope>\n    </dependency>\n</dependencies>\n\n<dependencyManagement>\n    <dependencies>\n      ...\n```\n\n### Maven常用命令\n\n我们可以看到在IDEA右上角Maven板块中，每个Maven项目都有一个生命周期，实际上这些是Maven的一些插件，每个插件都有各自的功能，比如：\n\n*   `clean`命令，执行后会清理整个`target`文件夹，在之后编写Springboot项目时可以解决一些缓存没更新的问题。\n*   `validate`命令可以验证项目的可用性。\n*   `compile`命令可以将项目编译为.class文件。\n*   `install`命令可以将当前项目安装到本地仓库，以供其他项目导入作为依赖使用\n*   `verify`命令可以按顺序执行每个默认生命周期阶段（`validate`，`compile`，`package`等）\n\n### Maven测试项目\n\n通过使用`test`命令，可以一键测试所有位于test目录下的测试案例，请注意有以下要求：\n\n*   测试类的名称必须是以`Test`结尾，比如`MainTest`\n*   测试方法上必须标注`@Test`注解，实测`@RepeatedTest`无效\n\n这是由于JUnit5比较新，我们需要重新配置插件升级到高版本，才能完美的兼容Junit5：\n\n```xml\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-surefire-plugin</artifactId>\n            <!-- JUnit 5 requires Surefire version 2.22.0 or higher -->\n            <version>2.22.0</version>\n        </plugin>\n    </plugins>\n</build>\n```\n\n现在`@RepeatedTest`、`@BeforeAll`也能使用了。\n\n### Maven打包项目\n\n我们的项目在编写完成之后，要么作为Jar依赖，供其他模型使用，要么就作为一个可以执行的程序，在控制台运行，我们只需要直接执行`package`命令就可以直接对项目的代码进行打包，生成jar文件。\n\n当然，以上方式仅适用于作为Jar依赖的情况，如果我们需要打包一个可执行文件，那么我不仅需要将自己编写的类打包到Jar中，同时还需要将依赖也一并打包到Jar中，因为我们使用了别人为我们通过的框架，自然也需要运行别人的代码，我们需要使用另一个插件来实现一起打包：\n\n```xml\n<plugin>\n    <artifactId>maven-assembly-plugin</artifactId>\n    <version>3.1.0</version>\n    <configuration>\n        <descriptorRefs>\n            <descriptorRef>jar-with-dependencies</descriptorRef>\n        </descriptorRefs>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n                <mainClass>com.test.Main</mainClass>\n            </manifest>\n        </archive>\n    </configuration>\n    <executions>\n        <execution>\n            <id>make-assembly</id>\n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n在打包之前也会执行一次test命令，来保证项目能够正常运行，当测试出现问题时，打包将无法完成，我们也可以手动跳过，选择`执行Maven目标`来手动执行Maven命令，输入`mvn package -Dmaven.test.skip=true `来以跳过测试的方式进行打包。\n\n最后得到我们的Jar文件，在同级目录下输入`java -jar xxxx.jar`来运行我们打包好的Jar可执行程序（xxx代表文件名称）\n\n*   `deploy`命令用于发布项目到本地仓库和远程仓库，一般情况下用不到，这里就不做讲解了。\n*   `site`命令用于生成当前项目的发布站点，暂时不需要了解。\n\n我们之前还讲解了多模块项目，那么多模块下父项目存在一个`packing`打包类型标签，所有的父级项目的packing都为pom，packing默认是jar类型，如果不作配置，maven会将该项目打成jar包。作为父级项目，还有一个重要的属性，那就是modules，通过modules标签将项目的所有子项目引用进来，在build父级项目时，会根据子模块的相互依赖关系整理一个build顺序，然后依次build。\n\n***\n\n## 实战：基于Mybatis+JUL+Lombok+Maven的图书管理系统（带单元测试）\n\n项目需求：\n\n*   在线录入学生信息和书籍信息\n*   查询书籍信息列表\n*   查询学生信息列表\n*   查询借阅信息列表\n*   完整的日志系统\n","categories":["Java","JavaWeb笔记"]}]