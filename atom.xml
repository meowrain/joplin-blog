<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识库</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-02-02T05:23:36.256Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Public</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>01 【less学习笔记】</title>
    <link href="http://example.com/2023/02/02/7750b9ec9e19421a805fe45697c0dc2d/"/>
    <id>http://example.com/2023/02/02/7750b9ec9e19421a805fe45697c0dc2d/</id>
    <published>2023-02-02T05:18:15.746Z</published>
    <updated>2023-02-02T05:23:36.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Less基础"><a href="#Less基础" class="headerlink" title="Less基础"></a>Less基础</h1><h2 id="1-维护CSS的弊端"><a href="#1-维护CSS的弊端" class="headerlink" title="1.维护CSS的弊端"></a>1.维护CSS的弊端</h2><p>CSS 是一门非程序式语言，没有变量、函数、SCOPE（作用域）等概念。</p><ul><li>CSS 需要书写大量看似没有逻辑的代码，CSS 冗余度是比较高的</li><li>不方便维护及扩展，不利于复用</li><li>CSS 没有很好的计算能力</li><li>非前端开发工程师来讲，往往会因为缺少 CSS 编写经验而很难写出组织良好且易于维护的 CSS 代码项目</li></ul><h2 id="2-Less介绍"><a href="#2-Less介绍" class="headerlink" title="2.Less介绍"></a>2.Less介绍</h2><p>Less（Leaner Style Sheets 的缩写）是一门 CSS 扩展语言，也称为 CSS 预处理器。</p><p>做为 CSS 的一种形式的扩展，它并没有减少 CSS 的功能，而是在现有的 CSS 语法上，为 CSS 加入程序式语言的特性。</p><p>它在 CSS 的语法基础上，引入了变量，Mixin（混入），运算以及函数等功能，大大简化了 CSS 的编写，并且降低了 CSS 的维护成本，就像它的名称所说的那样，Less 可以让我们用更少的代码做更多的事情。</p><p>Less 中文网址：<a href="https://less.bootcss.com/">Less 快速入门 | Less.js 中文文档 - Less 中文网 (bootcss.com)</a></p><p>常见的 CSS 预处理器：Sass、Less、Stylus</p><p>一句话：Less 是一门 CSS 预处理语言，它扩展了 CSS 的动态特性。</p><h2 id="3-Less安装（注意如果使用VSCode无需安装Less）"><a href="#3-Less安装（注意如果使用VSCode无需安装Less）" class="headerlink" title="3.Less安装（注意如果使用VSCode无需安装Less）"></a>3.Less安装（注意如果使用VSCode无需安装Less）</h2><p><strong>用node运行Less</strong></p><ol><li>安装 node.js，可选择版本（8.0），网址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></li><li>检查是否安装成功，使用 cmd 命令输入 <code>node -v</code> 查看版本即可</li><li>基于 node.js 在线安装 Less，使用 cmd 命令输入 <code>npm install -g less</code> 即可</li><li>检查是否安装成功，使用 cmd 命令 <code>lessc -v</code> 查看版本即可</li></ol><p><strong>vscode使用Less</strong></p><p>本质上，Less 包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的 CSS 文件。</p><p>所以，我们需要把我们的 Less 文件，编译生成为 CSS 文件，这样我们的 HTML 页面才能使用。</p><p>【VSCode Less 插件】</p><p>vscode 的 Easy LESS 插件</p><p>这个插件可以自动将<code>less</code>文件转义成<code>css</code>文件<br><strong>关于配置</strong></p><p><img src="https://i0.hdslb.com/bfs/album/414fbd1d48b8bce8313ae5ddc66469d7b3548974.png" alt="image-20220820200608896"></p><p><strong>settings.json配置如下</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;less.compile&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;compress&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// true =&gt; remove surplus whitespace</span></span><br><span class="line">        <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// true =&gt; generate source maps (.css.map files)将浏览器审查元素中css代码在css文件中的位置改成对应的less文件中的位置</span></span><br><span class="line">        <span class="attr">&quot;out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// false =&gt; DON&#x27;T output .css files (overridable per-file, see below)生成对应的css文件</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>只要保存一下 less 文件，会自动生成 CSS 文件。</p><h2 id="4-注释-Comments"><a href="#4-注释-Comments" class="headerlink" title="4.注释(Comments)"></a>4.注释(Comments)</h2><ul><li>多行注释保留</li><li>单行注释不被保留在编译生成的 CSS 中</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 一个块注释</span></span><br><span class="line"><span class="comment"> * style comment! </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一行被注释掉了！</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-变量-Variables"><a href="#5-变量-Variables" class="headerlink" title="5.变量(Variables)"></a>5.变量(Variables)</h2><p>变量是指没有固定值，可以改变的。因为我们 CSS 中的一些颜色和数值等经常使用。</p><p><code>@变量名: 值;</code></p><p>变量是指没有固定值，可以改变的。因为我们 CSS 中的一些颜色和数值等经常使用。</p><p><code>@变量名: 值;</code></p><h3 id="5-1-变量命名规范"><a href="#5-1-变量命名规范" class="headerlink" title="5.1 变量命名规范"></a>5.1 变量命名规范</h3><ul><li>必须有 <code>@</code> 为前缀</li><li>不能包含特殊字符</li><li>不能以数字开头</li><li>大小写敏感</li></ul><p><code>@color: pink;</code></p><h3 id="5-2-基本使用"><a href="#5-2-基本使用" class="headerlink" title="5.2 基本使用"></a>5.2 基本使用</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接使用</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-变量插值-Variable-Interpolation"><a href="#5-3-变量插值-Variable-Interpolation" class="headerlink" title="5.3 变量插值(Variable Interpolation)"></a>5.3 变量插值(Variable Interpolation)</h3><p>变量用于选择器名、属性名、URL、<code>@import</code>语句</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@my-selector:</span> banner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要添加 &#123;&#125;</span></span><br><span class="line"><span class="selector-class">.@&#123;my-selector&#125;</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@property:</span> color;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.widget</span> &#123;</span><br><span class="line">  @&#123;property&#125;: <span class="selector-id">#0ee</span>;</span><br><span class="line">  <span class="selector-tag">background-</span><span class="variable">@&#123;property&#125;</span>: <span class="selector-id">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Variables</span></span><br><span class="line"><span class="variable">@images:</span> <span class="string">&#x27;../img&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">&#x27;@&#123;images&#125;/white-sand.png&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Variables</span></span><br><span class="line"><span class="variable">@themes:</span> <span class="string">&#x27;../../src/themes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;@&#123;themes&#125;/tidal-wave.less&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="5-4-延迟加载-Lazy-Evaluation"><a href="#5-4-延迟加载-Lazy-Evaluation" class="headerlink" title="5.4 延迟加载(Lazy Evaluation)"></a>5.4 延迟加载(Lazy Evaluation)</h3><p>当一个变量被声明多次，会取最后一次的值，并从当前作用域往外寻找变量。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> <span class="number">0</span>;</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="variable">@var:</span> <span class="number">1</span>;</span><br><span class="line">  <span class="selector-class">.brass</span> &#123;</span><br><span class="line">    <span class="variable">@var:</span> <span class="number">2</span>;</span><br><span class="line">    three: @var;</span><br><span class="line">    <span class="variable">@var:</span> <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  one: @var;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译后</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  one: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class</span> <span class="selector-class">.brass</span> &#123;</span><br><span class="line">  three: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-属性名变量-Properties-as-Variables"><a href="#5-5-属性名变量-Properties-as-Variables" class="headerlink" title="5.5 属性名变量(Properties as Variables)"></a>5.5 属性名变量(Properties as Variables)</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.widget</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#efefef</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: $color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译后</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.widget</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#efefef</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-嵌套-Nesting"><a href="#6-嵌套-Nesting" class="headerlink" title="6.嵌套(Nesting)"></a>6.嵌套(Nesting)</h2><h3 id="6-1-基本使用"><a href="#6-1-基本使用" class="headerlink" title="6.1 基本使用"></a>6.1 基本使用</h3><p>Less 提供了使用嵌套(nesting)代替层叠或与层叠结合使用的能力</p><p>【我们经常用到选择器的嵌套】</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【less 嵌套写法】</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="selector-class">.logo</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用 Less 书写的代码更加简洁，并且模仿了 HTML 的组织结构。</p></blockquote><h3 id="6-2-父选择器-Parent-Selectors"><a href="#6-2-父选择器-Parent-Selectors" class="headerlink" title="6.2 父选择器 (Parent Selectors)"></a>6.2 父选择器 (Parent Selectors)</h3><p>在嵌套规则中， <code>&amp;</code> 表示父选择器，常用于给现有选择器添加伪类。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译后</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你还可以使用此方法将伪选择器（pseudo-selectors）与混合（mixins）一同使用。下面是一个经典的 clearfix 技巧，重写为一个混合（mixin） (&amp; 表示当前选择器的父级）：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  zoom: 1;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-混合-Mixins"><a href="#7-混合-Mixins" class="headerlink" title="7.混合(Mixins)"></a>7.混合(Mixins)</h2><p>混合(Mixin)是一种将一组属性从一个规则集包含(或混入)到另一个规则集的方式，可理解为复制粘贴。</p><h3 id="7-1-普通混合"><a href="#7-1-普通混合" class="headerlink" title="7.1 普通混合"></a>7.1 普通混合</h3><ol><li>定义了一个bordered类</li><li>如果希望在其它规则集中使用这些属性，只需像下面这样输入所需属性的类（class）名称即可</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bordered</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">  <span class="selector-class">.bordered</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="selector-class">.bordered</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bordered</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用类选择器时可以在选择器后边添加一个括号，这时我们实际上就创建了一个mixins</span></span><br><span class="line"><span class="comment">// 这种是不会被识别进css</span></span><br><span class="line"><span class="selector-class">.myMixin</span>() &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p4</span> &#123;</span><br><span class="line">  <span class="selector-class">.myMixin</span>; <span class="comment">//.myMixin();都可以</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-带参数的混合-Parametric-Mixins"><a href="#7-2-带参数的混合-Parametric-Mixins" class="headerlink" title="7.2 带参数的混合(Parametric Mixins)"></a>7.2 带参数的混合(Parametric Mixins)</h3><ol><li>混合带参数，参数需要按顺序传递</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@width</span>, <span class="variable">@style</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">@width</span> <span class="variable">@style</span> <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">1px</span>, solid, <span class="number">#ccc</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>混合带参数并有默认值</li></ol><p>需注意的是，就算有默认值，也要按顺序传递</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@width</span>, <span class="variable">@style</span>, <span class="variable">@color</span>: <span class="number">#ccc</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">@width</span> <span class="variable">@style</span> <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="number">1px</span>, solid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会出错</span></span><br><span class="line"><span class="selector-class">.border</span>(<span class="variable">@width</span>: <span class="number">1px</span>, <span class="variable">@style</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">@width</span> <span class="variable">@style</span> <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>(solid, <span class="number">#ccc</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-命名参数"><a href="#7-3-命名参数" class="headerlink" title="7.3 命名参数"></a>7.3 命名参数</h3><p>可以在向混合传参是指定参数名称，从而不需要按顺序传入</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(<span class="variable">@width</span>, <span class="variable">@style</span>, <span class="variable">@color</span>: <span class="number">#ccc</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">@width</span> <span class="variable">@style</span> <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.border</span>(<span class="variable">@style</span>: solid, <span class="variable">@color</span>: red, <span class="variable">@width</span>: <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-arguments-变量"><a href="#7-4-arguments-变量" class="headerlink" title="7.4 @arguments 变量"></a>7.4 @arguments 变量</h3><p><code>@arguments</code> 变量包含了传入的所有参数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-shadow</span>(<span class="variable">@x</span>: <span class="number">0</span>, <span class="variable">@y</span>: <span class="number">0</span>, <span class="variable">@blur</span>: <span class="number">1px</span>, <span class="variable">@color</span>: <span class="number">#000</span>) &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.big-block</span> &#123;</span><br><span class="line">  <span class="selector-class">.box-shadow</span>(<span class="number">2px</span>, <span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.big-block</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">5px</span> <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">5px</span> <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">5px</span> <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-匹配模式-Pattern-matching"><a href="#7-5-匹配模式-Pattern-matching" class="headerlink" title="7.5 匹配模式(Pattern-matching)"></a>7.5 匹配模式(Pattern-matching)</h3><p>在多个相同的混合中(参数个数必须相同)，匹配特定的混合。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>(dark, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">darken</span>(<span class="variable">@color</span>, <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span>(light, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">lighten</span>(<span class="variable">@color</span>, <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @_ 表示匹配所有</span></span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@_</span>, <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@switch:</span> light;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="variable">@switch</span>, <span class="number">#888</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a2a2a2</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-运算-Operations"><a href="#7-6-运算-Operations" class="headerlink" title="7.6 运算(Operations)"></a>7.6 运算(Operations)</h3><p>任何数字、颜色或者变量都可以参与运算。就是 Less 提供了加（+）、减（-）、乘（*）、除（&#x2F;）算术运算。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Less 里面写 */</span></span><br><span class="line"><span class="variable">@width:</span> <span class="number">10px</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="variable">@width</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Less 甚至还可以这样 */</span></span><br><span class="line"><span class="attribute">width</span>: (<span class="variable">@width</span> + <span class="number">5</span>) * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>【生成的 css】</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>乘号（*）和除号（&#x2F;）的写法要牢记</li><li>运算符中间左右必须有个空格隔开 <code>1px + 5</code></li><li>在新版本的 Less 中，除法有变动，应将 <code>100px / 10</code> 改为 <code>(100px / 10)</code>，否则没有效果</li><li>对于两个不同的单位的值之间的运算，运算结果的值取第一个值的单位</li><li>如果两个值之间只有一个值有单位，则运算结果就取该单位</li></ul><p>计算结果以操作数最左侧的单位类型为准</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@conversion-1:</span> <span class="number">5cm</span> + <span class="number">10mm</span>; <span class="comment">// 6cm</span></span><br><span class="line"><span class="variable">@conversion-2:</span> <span class="number">2</span> - <span class="number">3cm</span> - <span class="number">5mm</span>; <span class="comment">// -1.5cm</span></span><br><span class="line"><span class="variable">@conversion-3:</span> <span class="number">3.1</span> * <span class="number">2cm</span>; <span class="comment">// 6.2cm</span></span><br><span class="line"><span class="variable">@conversion-4:</span> <span class="number">4px</span> / <span class="number">2</span>; <span class="comment">// 4px / 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// conversion is impossible</span></span><br><span class="line"><span class="variable">@incompatible-units:</span> <span class="number">1cm</span> - <span class="number">1px</span>; <span class="comment">// 0.97354167cm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example with variables</span></span><br><span class="line"><span class="variable">@base:</span> <span class="number">5%</span>;</span><br><span class="line"><span class="variable">@filler:</span> <span class="variable">@base</span> * <span class="number">2</span>; <span class="comment">// 10%</span></span><br><span class="line"><span class="variable">@other:</span> <span class="variable">@base</span> + <span class="variable">@filler</span>; <span class="comment">// 15%</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@color:</span> <span class="number">#224488</span> / <span class="number">2</span>; <span class="comment">// #112244</span></span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#112244</span> + <span class="number">#111</span>; <span class="comment">// #223355</span></span><br></pre></td></tr></table></figure><h2 id="8-继承-Extend"><a href="#8-继承-Extend" class="headerlink" title="8.继承(Extend)"></a>8.继承(Extend)</h2><p>Extend Syntax</p><ul><li>继承可让多个选择器应用同一组属性，最终编译为并集选择器</li><li>其性能比混合高，但灵活性比混合低</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span>:<span class="selector-tag">extend</span>(.inline);</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inline</span>,</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-避免编译"><a href="#9-避免编译" class="headerlink" title="9.避免编译"></a>9.避免编译</h3><p>通过加引号可以避免 Less 编译，直接把内容输出到 CSS 中</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.inline</span> <span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="string">&#x27;100px + 100px&#x27;</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span> + <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.banner</span> <span class="selector-class">.inline</span> <span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="string">&#x27;100px + 100px&#x27;</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-函数（Functions）"><a href="#10-函数（Functions）" class="headerlink" title="10.函数（Functions）"></a>10.函数（Functions）</h2><p>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等。这些函数在Less 函数手册中有详细介绍。</p><p>函数的用法非常简单。下面这个例子将介绍如何利用 percentage 函数将 0.5 转换为 50%，将颜色饱和度增加 5%，以及颜色亮度降低 25% 并且色相值增加 8 等用法：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@base:</span> <span class="number">#f04615</span>;</span><br><span class="line"><span class="variable">@width:</span> <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">percentage</span>(<span class="variable">@width</span>); <span class="comment">// returns `50%`</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">saturate</span>(<span class="variable">@base</span>, <span class="number">5%</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">spin</span>(<span class="built_in">lighten</span>(<span class="variable">@base</span>, <span class="number">25%</span>), <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-导入（Importing）"><a href="#11-导入（Importing）" class="headerlink" title="11.导入（Importing）"></a>11.导入（Importing）</h2><p>你可以导入一个 .less 文件，此文件中的所有变量就可以全部使用了。如果导入的文件是 .less 扩展名，则可以将扩展名省略掉：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&quot;syntax.less&quot;</span>);<span class="comment">//url可以不加但是可能会有问题</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;library&quot;</span>; <span class="comment">// library.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;typo.css&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="12-导出"><a href="#12-导出" class="headerlink" title="12.导出"></a>12.导出</h2><p><strong>手动给每个less文件指定导出</strong></p><p>导出必须写到第一行</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// out: 路径/文件名</span></span><br><span class="line"><span class="comment">// out: ./mycss/pink.css</span></span><br></pre></td></tr></table></figure><p>设置导出：  当面目录下，创建一个 mycss 文件夹， 生成 一个 pink.css （做了改名）</p><hr><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// out: ./mycss/</span></span><br></pre></td></tr></table></figure><p>设置导出：  当面目录下，创建一个 mycss 文件夹， 生成 一个 跟less一样的文件名（原名）</p><p><strong>less 禁止导出</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// out: false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Less基础&quot;&gt;&lt;a href=&quot;#Less基础&quot; class=&quot;headerlink&quot; title=&quot;Less基础&quot;&gt;&lt;/a&gt;Less基础&lt;/h1&gt;&lt;h2 id=&quot;1-维护CSS的弊端&quot;&gt;&lt;a href=&quot;#1-维护CSS的弊端&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    <category term="css预处理语言" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
    <category term="less" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/less/"/>
    
    
  </entry>
  
  <entry>
    <title>08 【Sass语法介绍-混合指令】</title>
    <link href="http://example.com/2023/02/02/2d8afd58354f4270b36e307161cf351a/"/>
    <id>http://example.com/2023/02/02/2d8afd58354f4270b36e307161cf351a/</id>
    <published>2023-02-02T05:18:15.745Z</published>
    <updated>2023-02-02T05:23:36.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="08-【Sass语法介绍-混合指令】"><a href="#08-【Sass语法介绍-混合指令】" class="headerlink" title="08 【Sass语法介绍-混合指令】"></a>08 【Sass语法介绍-混合指令】</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>混合指令在 Sass 中也是一个比较常用的指令，在前面我们讲解的内容中有编写过混合指令 @mixin ，本节我们将详细讲解混合指令 @mixin 的语法包括定义混合指令和引用混合指令等等，混合指令同样非常好用，我们一起来学习它吧。</p><h2 id="2-什么是-Sass-混合指令"><a href="#2-什么是-Sass-混合指令" class="headerlink" title="2.什么是 Sass 混合指令"></a>2.什么是 Sass 混合指令</h2><p>混合指令的出现使你可以定义在样式表中重复使用的样式，这可以使你免去编写过多重复的样式，而且在混合指令 @mixin 中你也可以做一些逻辑处理。混合指令是一个很好用的指令，它将帮你更合理的维护样式代码，学会这种方式写起样式来也很便利，下面我们开始详细的讲解它。</p><h2 id="3-语法详情"><a href="#3-语法详情" class="headerlink" title="3.语法详情"></a>3.语法详情</h2><p>混合指令的写法是 @mixin name { … } 或者 @mixin name(&lt;arguments…&gt;) { … }，第一种写法是不传参的指令，第二种写法是传参的指令，我们先来举个简单的例子看下混合指令的样子：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> border &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#cccccc</span>;</span><br><span class="line">    style: solid;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我写的这个混合指令是一个不需要传参的，那么它怎么用呢？转换为 CSS 后是什么呢？下面我们从混合指令的定义开始逐一讲解。</p><h2 id="4-定义和引用混合指令"><a href="#4-定义和引用混合指令" class="headerlink" title="4.定义和引用混合指令"></a>4.定义和引用混合指令</h2><p>混合指令的定义是<strong>在 @mixin 后跟指令名字和 {}</strong> ，在 {} 中你可以写一些样式，同时也可以用一些函数或者前面章节讲的控制指令，现在我们定义一个不接收参数的混合指令和一个接收参数的混合指令：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不接收参数的混合指令</span></span><br><span class="line"><span class="keyword">@mixin</span> border &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#cccccc</span>;</span><br><span class="line">    style: solid;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收参数的混合指令</span></span><br><span class="line"><span class="keyword">@mixin</span> font(<span class="variable">$size</span>: <span class="number">12px</span>, <span class="variable">$weight</span>: <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: <span class="string">&quot;Myfont&quot;</span>;</span><br><span class="line">    weight: <span class="variable">$weight</span>;</span><br><span class="line">    size: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">// 引用混合指令</span></span><br><span class="line">  <span class="keyword">@include</span> border;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="comment">// 引用混合指令并传参</span></span><br><span class="line">  <span class="keyword">@include</span> font(<span class="number">20px</span>, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中我们分别定义了两个简单的混合指令，然后在 .box 和 .item 的样式中<strong>通过 @include 引用混合指令</strong>，在 @include 后直接跟混合指令的名称就可以引用了，传参如上面代码所示，那么上面这段代码将会转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#cccccc</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Myfont&quot;</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到转换后的 CSS 代码是不是感觉混合指令很强大，我们把指令写好后，可以在任何需要它的地方来使用，而且我们只需要传参就可以生成各种各样的样式代码。还有一点需要注意的是，在 Sass 中，@minxin 后面的名字将连字符和下划线视为是相同的！</p><h2 id="5-混合指令的参数"><a href="#5-混合指令的参数" class="headerlink" title="5.混合指令的参数"></a>5.混合指令的参数</h2><p>在上面的代码中我们已经知道了混合指令是可以传参数的，参数是在指令名后面由括号括起来的变量名列表，混合指令每次调用都可以操作这些传入的参数。</p><p>这些参数只要<strong>声明了就必须传入</strong>，如果你想让某个参数成为<strong>可选的</strong>，你需要<strong>为这个参数赋一个默认值</strong>，赋默认值的方法就像变量声明赋值一样，直接在变量名后面加冒号然后跟默认值。我们举例看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有赋默认值的参数</span></span><br><span class="line"><span class="keyword">@mixin</span> font-one(<span class="variable">$size</span>, <span class="variable">$weight</span>) &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: <span class="string">&quot;Myfont&quot;</span>;</span><br><span class="line">    weight: <span class="variable">$weight</span>;</span><br><span class="line">    size: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 赋默认值的参数</span></span><br><span class="line"><span class="keyword">@mixin</span> font(<span class="variable">$size</span>: <span class="number">12px</span>, <span class="variable">$weight</span>: <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: <span class="string">&quot;Myfont&quot;</span>;</span><br><span class="line">    weight: <span class="variable">$weight</span>;</span><br><span class="line">    size: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中可以看出是否赋默认值的区别，默认值还可以引用前面的参数。除了默认值，在传入参数的时候我们还可以<strong>按名称传入参数</strong>，什么意思呢，我们直接举例看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> font(<span class="variable">$size</span>: <span class="number">12px</span>, <span class="variable">$weight</span>: <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    family: <span class="string">&quot;Myfont&quot;</span>;</span><br><span class="line">    weight: <span class="variable">$weight</span>;</span><br><span class="line">    size: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="comment">// 按名称传入参数</span></span><br><span class="line">  <span class="keyword">@include</span> font-one(<span class="number">20px</span>, <span class="variable">$weight</span>: <span class="number">800</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码将会转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Myfont&quot;</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">800</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按名称传入参数使我们可以更好的控制混合指令接收的参数，但这个方法还是尽量少用，因为参数名有时在多人开发的时候可能不是一成不变的！</p><p>有时候 @mixin 接收的参数个数你可能不不清楚有多少个，那么你可以<strong>将最后一个参数以 … 结尾</strong>，那么所有额外的参数都将传给该参数，然后在 @mixin 里来获取所有参数，我们举个例子直观的感受下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> fonts(<span class="variable">$s</span>, <span class="variable">$familys</span>...) &#123;</span><br><span class="line">  <span class="attribute">font</span>:&#123;</span><br><span class="line">    size: <span class="variable">$s</span>;</span><br><span class="line">    family: <span class="variable">$familys</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> fonts(<span class="number">12px</span>, <span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码转换为 CSS 代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，@mixin 还可以通过参数列表接收任意参数，然后通过 meta.keywords() 这个函数来使用传入的这些参数，我们下面举例看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> args(<span class="variable">$args</span>...) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@each</span> <span class="variable">$key</span>, <span class="variable">$val</span> in keywords(<span class="variable">$args</span>) &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="variable">$key</span> <span class="variable">$val</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> args(<span class="variable">$one</span>: <span class="number">1</span>, <span class="variable">$two</span>: <span class="number">2</span>, <span class="variable">$three</span>: <span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个例子是为了让你更直观的看到这种传参方式，实际样式中不会这么写，上面这段代码我们通过循环 keywords() 函数返回的值来使用传入的参数，它将会被转化成如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: one <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">font</span>: two <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">font</span>: three <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>混合指令在传参这块还是有挺多方式的，你可以根据实际的需求来自行选择上面的传参方式，这使得我们用起它来很灵活。</p><h2 id="6-实战经验"><a href="#6-实战经验" class="headerlink" title="6.实战经验"></a>6.实战经验</h2><p>我们的项目是一个 Vue 单页应用，在我们的实际项目中有专门的 mixin.scss 文件来管理全局的 @mixin 指令，这里我从中截取出一部分来展示下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> border (<span class="variable">$width</span>: <span class="number">1px</span>, <span class="variable">$color</span>: <span class="number">#cccccc</span>, <span class="variable">$style</span>: solid) &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">    style: <span class="variable">$style</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@mixin</span> font(<span class="variable">$size</span>: <span class="number">12px</span>, <span class="variable">$weight</span>: <span class="number">100</span>, <span class="variable">$familys</span>...) &#123;</span><br><span class="line">  <span class="variable">$family</span>: <span class="string">&quot;Times&quot;</span>;</span><br><span class="line">  <span class="keyword">@if</span> length(<span class="variable">$familys</span>) &gt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="variable">$family</span>: <span class="variable">$familys</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    size:<span class="variable">$size</span>;</span><br><span class="line">    weight: <span class="variable">$weight</span>;</span><br><span class="line">    family: <span class="variable">$family</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> btn(<span class="variable">$type</span>: <span class="string">&quot;main&quot;</span>) &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$type</span> == <span class="string">&quot;small&quot;</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e5e5e5</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#4AA1FF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$type</span> == <span class="string">&quot;disable&quot;</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#CCCCCC</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e5e5e5</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#4AA1FF</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出，我定义的全局的 @mixin 有关于 border 样式的，有关于 font 样式的，还有一个我们自己封装的 button 样式，这样在项目的任何需要写这些样式的地方直接应用这些指令就可以了，而不需要编写大量的 CSS 样式，下面我截取一部分在某些页面中使用这些指令的代码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 border 混合指令</span></span><br><span class="line"><span class="selector-class">.normal-border</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> border;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.error-border</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> border(<span class="number">2px</span>, red, solid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 font 混合指令</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> font(<span class="number">24px</span>);</span><br><span class="line">  <span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> font(<span class="number">16px</span>, <span class="number">600</span>, <span class="string">&quot;serif&quot;</span>, <span class="string">&quot;Roman&quot;</span>, <span class="string">&quot;Times&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  使用 button 混合指令</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  &amp;-<span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> btn(); </span><br><span class="line">  &#125;</span><br><span class="line">  &amp;-disable&#123;</span><br><span class="line">    <span class="keyword">@include</span> btn(<span class="string">&quot;disable&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;-small&#123;</span><br><span class="line">    <span class="keyword">@include</span> btn(<span class="string">&quot;small&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码转换为 CSS 会非常的长，这里我就不贴出转换后的 CSS 代码了。</p><p>你可以仔细看下这些代码，看看是怎么封装和使用的，在公司的实际项目中，如果使用了 Sass ，你一定会看到类似的这些封装，当然你可能也会自己封装这些；你可以对照这上面两段定义混合指令和使用混合指令的代码来复习本节的内容，然后自己尝试这将它转换为 CSS 以便更好的理解！</p><h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7.小结"></a>7.小结</h2><p>本节内容我们讲了 Sass 混合指令，这也是一个好用且常用的指令。你要牢牢记住如何<strong>定义混合指令</strong>，如何<strong>引用混合指令</strong>以及如何<strong>处理混合指令的参数</strong>！我们用一张图来演示下：</p><p><img src="https://i0.hdslb.com/bfs/album/b78fed50aac5772593e3d85f1f28d44a3e96784b.png" alt="image-20220824232439812"></p><p>一般开始频繁使用指令的时候就说明你已经开始进入 Sass 的进阶水平了，你可以用混合指令为自己或者为其他人封装一些通用的样式，不但可以让自己开发样式高效，还可以减少其他人的工作量，所以学会 Sass 指令很重要！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;08-【Sass语法介绍-混合指令】&quot;&gt;&lt;a href=&quot;#08-【Sass语法介绍-混合指令】&quot; class=&quot;headerlink&quot; title=&quot;08 【Sass语法介绍-混合指令】&quot;&gt;&lt;/a&gt;08 【Sass语法介绍-混合指令】&lt;/h1&gt;&lt;h2 id=&quot;1</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    <category term="css预处理语言" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Sass" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/Sass/"/>
    
    
  </entry>
  
  <entry>
    <title>11【Sass语法介绍-导入】</title>
    <link href="http://example.com/2023/02/02/5c17818f7da844169c13e53e58c59fb7/"/>
    <id>http://example.com/2023/02/02/5c17818f7da844169c13e53e58c59fb7/</id>
    <published>2023-02-02T05:18:15.745Z</published>
    <updated>2023-02-02T05:23:36.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11【Sass语法介绍-导入】"><a href="#11【Sass语法介绍-导入】" class="headerlink" title="11【Sass语法介绍-导入】"></a>11【Sass语法介绍-导入】</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>在 CSS 中我们可以通过 @import 来导入一个样式文件，Sass 扩展了 CSS 的 @import 规则，使得可以导入 CSS 后缀的样式文件和 Scss 后缀的样式文件，并且提供了对 mixin 、函数和变量的访问。</p><p>与 CSS 的 @import 不同的是， CSS 使用 @import 导入文件是在页面渲染的时候发起多个 http 请求来获取文件内容，而 Sass 的导入 @import 是在编译时获取文件内容导入的。</p><h2 id="2-语法详情"><a href="#2-语法详情" class="headerlink" title="2.语法详情"></a>2.语法详情</h2><p>Sass 的导入和 CSS 中的导入语法类似，只不过在 Sass 中<strong>可以导入用逗号分隔的多个文件</strong>， 我们举个例子看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;a.scss&#x27;</span>, <span class="string">&#x27;b.scss&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上面的代码意思是导入 a.scss 和 b.scss 文件，那么导入后 a 和 b 中的任何mixin 、函数和变量都是可以使用的。</p><p>我们知道在 CSS 中也有 @import 语句，在以下几种情况 Sass 会认为 @import 是 CSS 语句：</p><ul><li>使用 url()</li><li>文件的扩展名是 .css</li><li>@import 包含 media queries</li><li>文件名以 http:&#x2F;&#x2F; 开头</li></ul><p>在使用的时候要注意上面的几种情况，如果导入的扩展名是 .scss 或 .sass 那么肯定用的是 Sass 提供的 @import 。如果<strong>导入文件没有指定文件扩展名，那么 Sass 会尝试寻找文件名相同的扩展名为 .sass 或 .scss 的文件</strong>。</p><h2 id="3-加载路径"><a href="#3-加载路径" class="headerlink" title="3.加载路径"></a>3.加载路径</h2><p>Sass 允许我们自行提供文件的加载路径，在我们导入文件的时候，Sass 总是会相对于当前文件进行解析，如果没有加载到则会使用<strong>加载路径</strong>。假如我们将加载路径设置为 node_modules&#x2F;public&#x2F;sass ，那么我们使用如下的导入方式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p>假如当前目录下没有 a.scss 文件，那么 Sass 就会去加载 node_modules&#x2F;public&#x2F;sass&#x2F;a.scss ，这就是使用了加载路径，不过这种方式我们在项目中<strong>极少应用</strong>，你只需要了解即可。</p><h2 id="4-部分导入"><a href="#4-部分导入" class="headerlink" title="4.部分导入"></a>4.部分导入</h2><p>什么是部分导入呢？ 我的理解是<strong>局部的使用导入</strong>，也就是说可以<strong>仅导入 Sass 或 Scss 文件，而不将它们编译为 CSS，</strong> 那么应该怎么做呢？假如我要导入一个 my.scss 文件，我不希望将它编译为 CSS ，那么需要<strong>使用下划线开头的文件名</strong>，也就是说需要改名为 _my.scss ，然后使用如下导入代码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;my&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上面的代码导入的就是 _my.scss 文件，并且不会将它编译为 CSS 。另外需要注意的是：<strong>不可以同时存在带有下划线和不带下划线的同名文件！</strong></p><h2 id="5-索引文件"><a href="#5-索引文件" class="headerlink" title="5.索引文件"></a>5.索引文件</h2><p>在 Sass 中什么是索引文件呢？_index.scss 文件，那它有什么用呢？假如我有一个 my 目录，这个目录下有两个文件，一个是 a.scss 一个是 _index.scss ，那么我使用如下文件导入代码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;my&#x27;</span>；</span><br></pre></td></tr></table></figure><p>那么上面的代码导入的就是 _index.scss 文件，也就是说 _index.scss 是这个目录下的<strong>默认文件</strong>，这就想你在写 vue 或者 html 中目录下的 index 文件类似。</p><h2 id="6-使用-use-替代-import"><a href="#6-使用-use-替代-import" class="headerlink" title="6.使用 @use 替代 @import"></a>6.使用 @use 替代 @import</h2><p>Sass 官方团队不鼓励使用 @import 导入，并且在未来几年将逐步淘汰它，并最终将 @import 从 Sass 中完全删除。所以使用 @use 是官方团队更推荐的方式，下面我们开始讲解使用 @use 导入。</p><p>@use 与 @import 的语法基本相同，我们先看一个简单的使用 @use 导入的例子：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;my/a.scss&#x27;</span>;</span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;my/b&#x27;</span>;</span><br></pre></td></tr></table></figure><p>从上面的代码中可以看到其使用方式与 @import 是相同的，那么为什么还要替换掉 @import 呢？ 主要是以下几个原因你需要了解下：</p><ul><li>@import 会使得所有变量、mixin 和函数都可以全局访问，这使开发者很难去维护这些定义的东西。</li><li>因为所有的都是全局的，那么 Sass 必须为所有的成员添加前缀，以避免命名冲突。</li><li>@extend 也是全局的，这样将很难预测哪些样式将被扩展。</li><li>每次使用 @import 时，每个样式表都会被执行，这会增加编译时间</li><li>无法定义下游样式表无法访问的私有成员。</li></ul><p>基于上述的这些原因，Sass 官方团队将会逐渐淘汰 @import，可以使用 @use 替代，语法是相同的，所以我们在 <strong>v4.x.x 及以上的版本</strong>中尽量使用 @use 来导入。</p><h2 id="7-实战经验"><a href="#7-实战经验" class="headerlink" title="7.实战经验"></a>7.实战经验</h2><p>其实在实际的项目中我们一般就是用 @import 来简单的导入文件，更多的时候是用它来方便整个项目中的 Sass 样式管理，如下图所示：</p><p><img src="https://i0.hdslb.com/bfs/album/914fa27c933c7268f301b1ac3ea60c37273ca975.png" alt="image-20220825230946960"></p><p>图中所演示的是我的项目中的一个使用方式。每个项目的样式管理方式都不同，你的公司中的项目中肯定也会使用 @import 或 @use 来管理样式文件，不过目前应该是使用 @import 的居多，这个功能其实很简单也没有太多的说法，在你的项目中需要你灵活的使用它，当然，慢慢的使用 @use 去替换掉它也是非常重要的！</p><h2 id="8-小结"><a href="#8-小结" class="headerlink" title="8.小结"></a>8.小结</h2><p><img src="https://i0.hdslb.com/bfs/album/01981baf9dad809208f4ecee5c182e8840b80e39.png" alt="image-20220825232019448"></p><p>本节内容我们讲解了 Sass 中的导入 @import，这在 CSS 中也是有这个功能的，这个功能我们可以理解就是导入文件中的内容的，一般在项目中我们也是用它来操作文件而已。</p><p>还有需要注意的是，Sass 官方推荐使用 @use 来替代 @import 使用，所以我们在导入的时候尽量使用 @use，如果你的项目中已经大量的使用了 @import （这是目前很常见的现状），可以找个时机替换掉，不过一定要确保 Sass 的<strong>版本是 v4.x.x 及以上！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;11【Sass语法介绍-导入】&quot;&gt;&lt;a href=&quot;#11【Sass语法介绍-导入】&quot; class=&quot;headerlink&quot; title=&quot;11【Sass语法介绍-导入】&quot;&gt;&lt;/a&gt;11【Sass语法介绍-导入】&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    <category term="css预处理语言" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Sass" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/Sass/"/>
    
    
  </entry>
  
  <entry>
    <title>06 【Sass语法介绍-函数】</title>
    <link href="http://example.com/2023/02/02/424c4e271557488ca5b2c1b775754008/"/>
    <id>http://example.com/2023/02/02/424c4e271557488ca5b2c1b775754008/</id>
    <published>2023-02-02T05:18:15.744Z</published>
    <updated>2023-02-02T05:23:36.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="06-【Sass语法介绍-函数】"><a href="#06-【Sass语法介绍-函数】" class="headerlink" title="06 【Sass语法介绍-函数】"></a>06 【Sass语法介绍-函数】</h1><blockquote><p>这篇文章只更新了颜色函数，由于Sass使用时间过短，其它函数暂时不太会用</p></blockquote><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>Sass 中的函数，这在 Sass 中是比较强大的一个功能，同时使用场景和语法也比较多，所以本节内容篇幅较长，但你一定要好好学习， Sass 函数很重要！在 Sass 中函数中几乎可以用到前面你学的所有章节的内容，所以说函数包括万象同时功能也非常强大，本节我们将详细讲解 Sass 中各种函数的功能和用法。</p><h2 id="2-什么是函数？"><a href="#2-什么是函数？" class="headerlink" title="2.什么是函数？"></a>2.什么是函数？</h2><p>函数是一段可以被另外的程序或代码调用的“子程序”，一个函数由称为函数体的一系列代码语句组成，并且函数也可以接收值，在大多数语言中函数都是这样的，Sass 中的函数也是一样。</p><h2 id="3-Sass-函数简介"><a href="#3-Sass-函数简介" class="headerlink" title="3.Sass 函数简介"></a>3.Sass 函数简介</h2><p>Sass 为我们提供了很多内置模块，其中就包含了很多函数（包括一些指令），我们可以通过 @use 去加载它们，然后我们就可以调用了，当然还有一些函数可以直接在 CSS 语句中调用，在 Sass 中常用的函数有：</p><ul><li>字符串函数</li><li>数字函数</li><li>列表函数</li><li>Introspection函数</li><li>条件函数</li><li>Map 函数</li><li>颜色函数</li></ul><p>上面这些函数为我们提供了强大而丰富的功能来更高效地编写样式，下面我们来详细讲解 Sass 函数。</p><h2 id="4-颜色函数"><a href="#4-颜色函数" class="headerlink" title="4.颜色函数"></a>4.颜色函数</h2><p>Sass 中提供了非常非常多的颜色函数用来处理颜色值，它们很多需要你具有专业的调色及配色知识才能发挥出作用，所以本节我们不讲的那么复杂，本节内容中我们只讲几种常见的、比较简单的颜色函数，其他特别复杂的用于调色的函数在以后你可以再慢慢研究。</p><h3 id="4-1-用于获取通道色值的函数"><a href="#4-1-用于获取通道色值的函数" class="headerlink" title="4.1 用于获取通道色值的函数"></a>4.1 用于获取通道色值的函数</h3><p>Sass 提供了可以获取一个色值中红色通道、绿色通道和蓝色通道色值的函数，它们分别是 red($color) 、green($color) 和 blue($color)。你可能还不太了解这三种通道是什么，不要紧，只要知道这三种函数和它的使用就可以。我们举例看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">blue</span>(#BA55D3)  <span class="comment">//=&gt; 211</span></span><br><span class="line"><span class="built_in">red</span>(#BA55D3)  <span class="comment">//=&gt; 186</span></span><br><span class="line"><span class="built_in">green</span>(#BA55D3)  <span class="comment">//=&gt; 85</span></span><br></pre></td></tr></table></figure><h3 id="4-2-saturate-color-amount"><a href="#4-2-saturate-color-amount" class="headerlink" title="4.2 saturate($color, $amount)"></a>4.2 saturate($color, $amount)</h3><p>saturate($color, $amount) 函数用于调整 $color 的饱和度，第 1 个参数 $color 是一个颜色值，第 2 个参数是 0% ～ 100% 之间的百分数，其返回值也是一个颜色值。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">saturate</span>(#BA55D3, <span class="number">20%</span>)  <span class="comment">//=&gt; #c740e8</span></span><br></pre></td></tr></table></figure><h3 id="4-3-scale-color-…"><a href="#4-3-scale-color-…" class="headerlink" title="4.3 scale-color(…)"></a>4.3 scale-color(…)</h3><p>这是一个非常强大的颜色函数，它<strong>接收很多个参数</strong>，可以<strong>调整一个色值的很多属性</strong>，包括这个颜色的红、绿、蓝通道，以及亮度等等，我们只能举例来直观的看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scale-color</span>(#BA55D3, $red: <span class="number">15%</span>)  <span class="comment">//=&gt; #c455d3  调整红色通道</span></span><br><span class="line"><span class="built_in">scale-color</span>(#BA55D3, $blue: <span class="number">15%</span>)  <span class="comment">//=&gt; #ba55da  调整蓝色通道</span></span><br><span class="line"><span class="built_in">scale-color</span>(#BA55D3, $lightness: -<span class="number">10%</span>, $saturation: <span class="number">10%</span>)  <span class="comment">//=&gt; #b338d2 调整亮度和饱和度</span></span><br><span class="line"><span class="built_in">scale-color</span>(#BA55D3, $alpha: -<span class="number">30%</span>)  <span class="comment">//=&gt; rgba(186, 85, 211, 0.7)  调整不透明度</span></span><br></pre></td></tr></table></figure><p>通过上面的例子可以看到颜色函数提供了非常强大的用于调色的函数，驾驭它的前提是你要有非常丰富的调色知识以及一定的美术基础。在实际的项目中我们非常少的用到颜色函数，因为一般都是由公司的 UI 设计师来进行调色，所以作为入门教程，你只需要了解 Sass 中的颜色函数就好。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>本节内容我们讲了 Sass 提供的各种各样的函数，基本覆盖到了比较常用的、常见的函数，它们分别是：</p><ul><li>字符串函数</li><li>数字函数</li><li>列表函数</li><li>Introspection函数</li><li>条件函数</li><li>Map 函数</li><li>颜色函数</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;06-【Sass语法介绍-函数】&quot;&gt;&lt;a href=&quot;#06-【Sass语法介绍-函数】&quot; class=&quot;headerlink&quot; title=&quot;06 【Sass语法介绍-函数】&quot;&gt;&lt;/a&gt;06 【Sass语法介绍-函数】&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    <category term="css预处理语言" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Sass" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/Sass/"/>
    
    
  </entry>
  
  <entry>
    <title>09 【Sass语法介绍-函数指令】</title>
    <link href="http://example.com/2023/02/02/8fd4499649a940418f3222e3d09ee2aa/"/>
    <id>http://example.com/2023/02/02/8fd4499649a940418f3222e3d09ee2aa/</id>
    <published>2023-02-02T05:18:15.743Z</published>
    <updated>2023-02-02T05:23:36.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="09-【Sass语法介绍-函数指令】"><a href="#09-【Sass语法介绍-函数指令】" class="headerlink" title="09 【Sass语法介绍-函数指令】"></a>09 【Sass语法介绍-函数指令】</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>在之前的章节我们学习过 Sass 提供的各种各样的函数，那么如果我们需要自定定义函数来使用就需要用到<strong>函数指令 @function</strong>了。本节内容我们来学习 Sass 函数指令的语法和使用，在 Sass 中自定义函数是必须要掌握的！</p><h2 id="2-什么是-Sass-函数指令"><a href="#2-什么是-Sass-函数指令" class="headerlink" title="2.什么是 Sass 函数指令"></a>2.什么是 Sass 函数指令</h2><p>函数指令也叫自定义函数让你可以容易的处理各种逻辑和定义复杂的操作，而且你可以在任何需要的地方复用函数，这使得我们可以抽离出来一些常见的公式或者逻辑，我们先来看下它长什么样，代码如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="keyword">@function</span> a() &#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="string">&quot;a&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">// 使用函数</span><br><span class="line">.p &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="built_in">a</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回忆一下，上面的代码在之前的章节中也出现过，这就是函数指令，定义好一个函数后我们就可以使用了，下面我们开始详细讲解函数指令。</p><p>函数指令是<strong>通过 @function 来定义</strong>，它的写法是 @function name（arguments…）{}，@function 后面跟函数名，然后是一个 () ，() 里面是这个函数接收的参数，可以接收也可以不接收，最后是 {} 中放的是你的逻辑代码。函数名<strong>将连字符和下划线视为相同</strong>，也就是说 a_b 和 a-b 是同一个函数。我们举例看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> fun-name() &#123;</span><br><span class="line">      <span class="comment">// 在这里编写逻辑代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-函数的参数"><a href="#3-函数的参数" class="headerlink" title="3.函数的参数"></a>3.函数的参数</h2><p>函数指令的参数和之前我们讲的混合指令的参数很像，函数如果接收参数那么使用的时候就<strong>必须传入这些参数</strong>，但是你<strong>可以定义默认值使参数成为可选的</strong>，我们举例来看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有默认值的参数</span></span><br><span class="line"><span class="keyword">@function</span> a(<span class="variable">$arg</span>: <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$arg</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无默认值的参数</span></span><br><span class="line"><span class="keyword">@function</span> b(<span class="variable">$arg</span>) &#123;</span><br><span class="line">  <span class="keyword">@return</span> <span class="variable">$arg</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="built_in">a</span>();</span><br><span class="line">  <span class="attribute">font</span>: <span class="built_in">b</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码转换为 CSS 如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意的是，为参数设置的默认值，也可以引用前面的参数或者是任何表达式。</p><h2 id="4-接收任意数量的参数"><a href="#4-接收任意数量的参数" class="headerlink" title="4.接收任意数量的参数"></a>4.接收任意数量的参数</h2><p>和前面章节讲的 @mixin 类似，函数指令也<strong>可以接收任意数量的参数</strong>，同样是将最后一个参数以 … 结尾，我们来举例看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> fonts(<span class="variable">$familys</span>...) &#123;</span><br><span class="line">  <span class="keyword">@return</span>  <span class="variable">$familys</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="built_in">fonts</span>(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码转换为 CSS 如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的函数的参数也可以接收任意的参数列表，就像之前在混合指令章节讲的一样，可以用过 meta.keywords() 来获取和使用这些参数，不过这个我们一般不是很常用。</p><h2 id="5-return"><a href="#5-return" class="headerlink" title="5.@return"></a>5.@return</h2><p>在前面的代码中，可以看到很多次我们在函数指令中使用了 @return。@return 指令表示作为函数调用结果的值，说的简单点就是这个函数的返回值，这和在 javascript 的函数中使用 return 很类似。</p><p>在 Sass 中 <strong>@return 指令只能在 @function</strong> 中使用，并且<strong>每个 @function 都必须以 @return 结尾！</strong> 在 @function 的逻辑代码中，如遇到 @return 会立即结束函数并返回其结果，这在一些 @if 判断的情况下很有用。我们举例看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@function</span> a(<span class="variable">$str</span>: <span class="string">&quot;a&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$str</span> == <span class="string">&quot;a&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">@return</span> <span class="number">10px</span>;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$str</span> == <span class="string">&quot;b&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">@return</span> <span class="number">20px</span>;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$str</span> == <span class="string">&quot;c&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">@return</span> <span class="number">30px</span>;</span><br><span class="line">  &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="keyword">@return</span> <span class="number">40px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="built_in">a</span>();</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">a</span>(<span class="string">&quot;f&quot;</span>);</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">a</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="built_in">a</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中我们可以可看到，在函数 a 中，我们根据不同的参数返回不同的结果，然后在 p 的样式中通过传入不同的参数来获取不同的结果。上面这段代码会转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-实战经验"><a href="#6-实战经验" class="headerlink" title="6.实战经验"></a>6.实战经验</h2><p>在实际的项目中使用函数指令是必不可少的，我们会定义很多函数来帮助我们解决逻辑问题，一般我们会独立抽出来一个 function.scss 文件来管理整个项目中的函数指令，一般这些函数都是根据你的项目特性以及样式需要封装出来的。</p><p>由于函数一般是和你的业务强相关的，一般就是为自己的项目定义一些工具和方法，这里我就不贴出代码示例了。在实际的应用中，这个函数指令就是需要你“随机应变”，按需封装和使用！</p><h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7.小结"></a>7.小结</h2><p>本节内容我们讲了 Sass 函数指令 @function ，还有函数指令的用法和参数。我们可以使用函数来编写各种各样我们自己的函数。函数指令和前面的混合指令很类似，我们通过下图来回一下函数指令的用法：</p><p><img src="https://i0.hdslb.com/bfs/album/ab773841b5921e39b687a9c007eea2c52641e31b.png" alt="image-20220825225712402"></p><p>除此之外 Sass 提供了大量的内置函数，这些我们在前面的章节 Sass 函数中都做了讲解，你可以借用这些函数再配合你自己定义的函数指令，来实现各种复杂的逻辑和强大的效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;09-【Sass语法介绍-函数指令】&quot;&gt;&lt;a href=&quot;#09-【Sass语法介绍-函数指令】&quot; class=&quot;headerlink&quot; title=&quot;09 【Sass语法介绍-函数指令】&quot;&gt;&lt;/a&gt;09 【Sass语法介绍-函数指令】&lt;/h1&gt;&lt;h2 id=&quot;1</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    <category term="css预处理语言" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Sass" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/Sass/"/>
    
    
  </entry>
  
  <entry>
    <title>01 【Sass的安装使用】</title>
    <link href="http://example.com/2023/02/02/c147cb6550934f58904823a45536056c/"/>
    <id>http://example.com/2023/02/02/c147cb6550934f58904823a45536056c/</id>
    <published>2023-02-02T05:18:15.743Z</published>
    <updated>2023-02-02T05:23:35.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-【Sass的安装使用】"><a href="#01-【Sass的安装使用】" class="headerlink" title="01 【Sass的安装使用】"></a>01 【Sass的安装使用】</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><h3 id="1-1-CSS预处理技术，及种类介绍"><a href="#1-1-CSS预处理技术，及种类介绍" class="headerlink" title="1.1 CSS预处理技术，及种类介绍"></a>1.1 CSS预处理技术，及种类介绍</h3><p>什么是css预处理技术</p><ul><li>CSS 预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者就只要使用这种语言进行编码工作。</li><li>通俗的说，“CSS 预处理器用一种专门的编程语言，进行 Web 页面样式设计，然后再编译成正常的 CSS 文件，以供项目使用。CSS 预处理器为 CSS 增加一些编程的特性，无需考虑浏览器的兼容性问题”，例如你可以在 CSS 中使用变量、简单的逻辑程序、函数（如变量$main-color）等等在编程语言中的一些基本特性，可以让你的 CSS 更加简洁、适应性更强、可读性更佳，更易于代码的维护等诸多好处。</li></ul><p>css预处理技术的种类</p><ul><li>Sass（SCSS）</li><li>LESS</li><li>Stylus</li><li>Turbine</li><li>Swithch CSS</li><li>CSS Cacheer</li><li>DT CSS</li></ul><p><strong>如此之多的 CSS 预处理器，那么“我应该选择哪种 CSS 预处理器？”也相应成了最近网上的一大热门话题，各大技术论坛也是争论不休。</strong></p><p>到目前为止，在众多优秀的 CSS 预处理器语言中就属 <code>Sass</code>、<code>LESS</code> 和 <code>Stylus</code> 最优秀。</p><h3 id="1-2-什么是sass"><a href="#1-2-什么是sass" class="headerlink" title="1.2 什么是sass"></a>1.2 什么是sass</h3><p>Sass(Syntactically Awesome StyleSheets)是一种CSS预处理器(<code>preprocessor</code>)， 是一款强化 CSS 的辅助工具。可以高效的编写样式，同时实现变量、嵌套、组合、继承等编程语言功能。</p><blockquote><p>css是一门非程序式语言，没有变量、函数、scope(作用域)等概念。</p><ul><li>CSS需要书写大量看似没有逻辑的代码，冗余度比较高</li><li>不方便维护及扩展，难以复用</li><li>css没有很好的计算能力</li><li>非前端工程师往往会因为缺少CSS编写经验而很难写出组织良好且易于维护的CSS代码</li></ul></blockquote><p>CSS 预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为 CSS 增加了一些编程的特性，将 CSS 作为目标生成文件，然后开发者只要使用这种语言进行CSS的编码工作就可以了。</p><blockquote><p>“用一种专门的编程语言，进行 Web 页面样式设计，再通过编译器转化为正常的 CSS 文件，以供项目使用。”</p></blockquote><h2 id="2-关于scss和sass"><a href="#2-关于scss和sass" class="headerlink" title="2.关于scss和sass"></a>2.关于scss和sass</h2><p>sass是最早出现的css预处理语言，有着比less更强大的功能。采用Ruby语言编写。</p><p>最初版本采用的是严格缩进的风格（不带大括号( {} )和分号( ; )，这一语法也导致一开始，sass并不太为开发者所接受）。</p><p><strong>从 V3 版本开始放弃了缩进式的风格，并完全兼容普通的css代码，也因此从第三代开始，sass也被称为scss。</strong></p><blockquote><p>Sass 3 就是 Scss，是Sassy CSS的简写，它是CSS3语法的超集，也就是说所有有效的CSS&#x2F;CSS3样式也同样适合于Sass。</p></blockquote><p>对现代编程来说，sass就是scss，也因此，sass现在的扩展名为<code>.scss</code>（如果是旧版本的sass，可能扩展名会为<code>.sass</code>）。</p><h2 id="3-安装和命令行编译"><a href="#3-安装和命令行编译" class="headerlink" title="3.安装和命令行编译"></a>3.安装和命令行编译</h2><p>cmd打开本地命令控制窗口，输入下面字符串然后回车就装好了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g sass</span><br></pre></td></tr></table></figure><p><strong>编译.scss文件为.css文件：</strong></p><p>Sass使用.scss作为文件后缀名，不能直接在&lt; link &gt;标签里使用，需要编译为 .css文件。 <strong>演示：</strong></p><ol><li><p>建一个html文件，随便写个h1标签：</p><p><img src="https://i0.hdslb.com/bfs/album/bacbc180d9a88cd06ac988ab8fab52448a35348b.png" alt="image-20220823140518434"></p></li><li><p>建一个.scss后缀的文件，如input.scss，写点基本样式sass的语法：<br><img src="https://i0.hdslb.com/bfs/album/7446e8cfea1963feec70f74c98e15a5570f0a8cd.png" alt="image-20220823140550201"></p></li><li><p>在html文件所在的路径下打开cmd命令控制符，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//单文件转换命令</span><br><span class="line">sass input.scss:output.css</span><br><span class="line"></span><br><span class="line">// 或 sass input.scss output.css</span><br></pre></td></tr></table></figure><p>表示把名字为 input.scss 转换成名字为 ouput.css 的文件。<br>回车后，接下来发现就得到了css的文件。</p><p><img src="https://i0.hdslb.com/bfs/album/cd57c9686d892e6f30e4f15aa3124c150a3038db.png" alt="image-20220823140645814"></p></li></ol><blockquote><p>使用 : 编译输出时，前后不能有空格，即 <code>:</code> 前紧跟输入的scss文件，<code>:</code> 后紧跟输出的css文件。</p></blockquote><blockquote><p><code>:</code> 冒号形式的命令，常用于编译文件夹（中的所有sass文件）的输入输出。</p></blockquote><p>​    css文件内容如下，可以看出转换好了：<br>​    <img src="https://i0.hdslb.com/bfs/album/23a4e7317c5dc935065a7d17de1af039ef1fef0a.png" alt="image-20220823140750386"><br>​    接下来就是老操作了，在HTML里用 &lt; link &gt;标签把css文件引入就行。</p><ol start="4"><li><p>但是不可能说写一句.scss语句就转换一次，太麻烦，所以可以自动转换，当我在.scss里写一句，.css就自动生成一句。在cmd输入以下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch input.scss:ouput.css</span><br></pre></td></tr></table></figure><p>表示监视变化，当input.scss一变化，output.css就变化</p></li></ol><p>空格和冒号对应生成css的两中模式，如果是一对一模式（一个scss生成一个css），使用空格即可；如果是多对多模式，比如一个文件夹生成到另一个文件夹，同时一次性有多个scss文件生成css文件等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 编译 light.scss 和 dark.scss 到 light.css 和 dark.css.</span></span><br><span class="line">&gt; sass light.scss:light.css dark.scss:dark.css</span><br><span class="line"></span><br><span class="line">sass  --watch  fileFolder:outputFolder/css</span><br></pre></td></tr></table></figure><p>当名字为<code>fileFolder</code>这个文件夹里任意一个.scss后缀的文件变化时，就将其编译到名字<code>outputFolder/css</code>这个文件夹里面（会自动生成相应的.css文件）</p><h2 id="4-Sass文件编译快览"><a href="#4-Sass文件编译快览" class="headerlink" title="4.Sass文件编译快览"></a>4.Sass文件编译快览</h2><h3 id="4-1-命令行编译配置选项"><a href="#4-1-命令行编译配置选项" class="headerlink" title="4.1 命令行编译配置选项"></a>4.1 命令行编译配置选项</h3><p>可以通过 <code>sass -h</code> 或 <code>sass --help</code> 查看详细配置项。</p><p>配置选项可以指定编译后的css的排版、是否生成调试map、开启debug等，最常用的是 <code>--style</code> 和 <code>--sourcemap</code>。</p><h3 id="4-2-watch监听文件变化"><a href="#4-2-watch监听文件变化" class="headerlink" title="4.2 --watch监听文件变化"></a>4.2 <code>--watch</code>监听文件变化</h3><p>sass使用<code>--watch</code>选项，用于监听scss文件的变化。这样，当scss文件内容有改动时，会自动编译为css。</p><ul><li>监听单个scss文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch .\firstsass.scss .\firstsass1.css</span><br></pre></td></tr></table></figure><ul><li>监听scss文件夹</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sass --watch .\scssdir\ .\cssdir\</span><br><span class="line"></span><br><span class="line">sass --watch scssdir:cssdir</span><br></pre></td></tr></table></figure><p>可以看到，<strong>使用 <code>:</code> 可以指定输出的路径（文件夹），否则css将默认生成在源scss文件所在目录中。</strong></p><ul><li>结合 <code>--style</code> 监听</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sass --watch app/sass:public/stylesheets --style=compressed</span><br></pre></td></tr></table></figure><blockquote><p><strong>使用压缩（compressed）的样式（style）输出 css 文件</strong></p></blockquote><h3 id="4-3-style指定css的样式"><a href="#4-3-style指定css的样式" class="headerlink" title="4.3 --style指定css的样式"></a>4.3 <code>--style</code>指定css的样式</h3><p><code>--style</code> 的css格式有两种：<code>expanded</code>（默认）、<code>compressed</code>。</p><blockquote><p>旧版本的Ruby实现中有四种样式，还有<code>nested</code>、<code>compact</code>。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 指定编译格式</span><br><span class="line">sass input.scss:output.css --style=expanded</span><br></pre></td></tr></table></figure><p>比如，一个scss文件如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  &amp;-title &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面，可以查看<code>expanded</code>、<code>compressed</code>编译后的css格式。</p><ol><li><code>expanded</code> ：默认值，未压缩的展开的css格式</li></ol><p>每个选择器和声明单独一行。</p><p>执行如下命令编译：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sass styletest.scss styletest.css --style=expanded</span><br><span class="line"></span><br><span class="line"><span class="comment">## 或 sass styletest.scss styletest.css</span></span><br></pre></td></tr></table></figure><p>expanded编译过后的样式，是标准的没有经过任何压缩，全部字符展开的css格式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-title</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>compressed</code> 去除所有的空白字符，全部css内容压缩为一行</li></ol><p><strong>生产环境中推荐的css格式。</strong></p><p>执行如下命令编译，将css结果输出在命令行中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sass --style=compressed styletest.scss</span><br><span class="line"></span><br><span class="line">.box&#123;width:300px;height:400px&#125;.box-title&#123;height:30px;line-height:30px&#125;</span><br></pre></td></tr></table></figure><h2 id="5-使用VSCode插件编译"><a href="#5-使用VSCode插件编译" class="headerlink" title="5.使用VSCode插件编译"></a>5.使用VSCode插件编译</h2><h3 id="5-1-基本使用"><a href="#5-1-基本使用" class="headerlink" title="5.1 基本使用"></a>5.1 基本使用</h3><p><strong>live sass compiler是VSCode扩展，可以实时地将SASS &#x2F; SCSS文件编译&#x2F;转换为CSS文件。</strong></p><ul><li>可以自动添加css兼容性前缀，-webkit-，-moz-，-ms，-o-等。</li><li>可以自定义css文件解析后的代码样式（expanded 展开，compact，compressed 压缩，nested）。</li><li>可自定义编译&#x2F;转换后的文件扩展名（.css或.min.css）。</li></ul><p><strong>1.在vscode插件里搜索live sass compiler安装。</strong></p><p><strong>2.安装后，新建scss文件，在vscode底部状态栏中点击watch sass，此时状态为 Watching ，即可自动解析sass为css文件。</strong></p><p><img src="https://i0.hdslb.com/bfs/album/f18b5afe44e8a50d00093d9683a9c6965272617b.png" alt="image-20220823173100339"></p><h3 id="5-2-自定义设置"><a href="#5-2-自定义设置" class="headerlink" title="5.2 自定义设置"></a>5.2 自定义设置</h3><p>在使用live sass compiler插件时，并不是所有的默认设置都如我们所愿，那么，我们来看一下如何自定义设置。</p><p><strong>1.编译&#x2F;转换后的文件格式、扩展名、保存位置</strong></p><ul><li>文件格式<br>格式可以是expanded，compact，compressed或nested。默认值为 expanded。</li><li>扩展名<br>扩展名可以是.css或.min.css。默认值为.css。</li><li>保存位置<br>默认的转换后的css文件保存在scss文件的同级目录下，但实际，我们通常需要把所有scss文件保存在scss文件夹，而css文件希望保存在css的文件夹，如图所示：<br><img src="https://i0.hdslb.com/bfs/album/50de6685454beb2c1ae13f5a12f7a70bc59d2c7d.png" alt="image-20220823173159840"></li></ul><p>​        我们在配置中如下设置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;liveSassCompile.settings.formats&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;expanded&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extensionName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.css&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;savePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~/../css/&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>savePath即为导出后的文件保存位置。</p><p><strong>2.去掉编译时出现的css.map文件</strong><br>在每个文件编译后，默认设置下，会同时出现一个map格式的文件，有时并不需要该文件，那么我们如何去掉呢？</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;liveSassCompile.settings.generateMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>默认值为true，我们设置为false即可。</p><p><strong>3.设置css兼容性前缀</strong><br>live sass compiler可以在编译时自动添加CSS兼容性前缀（-webkit-，-moz-，-ms，-o-等），如下设置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;liveSassCompile.settings.autoprefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;&gt; 1%&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;last 3 versions&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>其中，</p><ul><li>“&gt;1%”是指 通过全球使用情况统计信息选择出的高于1%使用率的浏览器版本。</li><li>“last 3 versions”是指 每个浏览器的最后3个版本。</li></ul><p>这里也可以设置为具体的浏览器，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;liveSassCompile.settings.autoprefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;ie &gt;= 6&quot;</span><span class="punctuation">,</span>  <span class="comment">//ie6以上</span></span><br><span class="line">  <span class="string">&quot;firefox &gt;= 8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;chrome &gt;= 24&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;Opera&gt;=10&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>个人配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;liveSassCompile.settings.generateMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;liveSassCompile.settings.autoprefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;ie &gt;= 6&quot;</span><span class="punctuation">,</span>  <span class="comment">//ie6以上</span></span><br><span class="line">  <span class="string">&quot;firefox &gt;= 8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;chrome &gt;= 24&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;Opera&gt;=10&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;liveSassCompile.settings.excludeList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="string">&quot;**/node_modules/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;.vscode/**&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;liveSassCompile.settings.formats&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;expanded&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extensionName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.css&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;savePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~/../css/&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span>      <span class="attr">&quot;liveSassCompile.settings.showOutputWindow&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">压缩生成min.css文件</span><br><span class="line"><span class="attr">&quot;liveSassCompile.settings.formats&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// More Complex</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compressed&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;extensionName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.min.css&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;savePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~/../css/&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span> </span><br><span class="line"> <span class="punctuation">]</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>感觉总体作用不大，还是结合webpack等工具，实时更新页面内容时，实时编译scss，而不需要单独使用该工具。</p></blockquote><h2 id="6-使用webpack编译"><a href="#6-使用webpack编译" class="headerlink" title="6.使用webpack编译"></a>6.使用webpack编译</h2><p>在目前主流的前端项目中，一般是使用 <a href="https://www.webpackjs.com/loaders/sass-loader/">Webpack</a> 来构建我们的前端项目，并且大多数都跑在 Node 环境下。</p><p>行如下命令安装 sass-loader ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install mini-css-extract-plugin -D</span><br><span class="line">npm install css-loader -D</span><br><span class="line">npm install sass-loader --save-dev</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;[MiniCssExtractPlugin.loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 将 css 文件整合到 js 文件中</span></span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 编译 sass 文件为 css 文件</span></span><br><span class="line">          <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 提取css成单独文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 定义输出文件名和目录</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;static/css/[name].css&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-【Sass的安装使用】&quot;&gt;&lt;a href=&quot;#01-【Sass的安装使用】&quot; class=&quot;headerlink&quot; title=&quot;01 【Sass的安装使用】&quot;&gt;&lt;/a&gt;01 【Sass的安装使用】&lt;/h1&gt;&lt;h2 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    <category term="css预处理语言" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Sass" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/Sass/"/>
    
    
  </entry>
  
  <entry>
    <title>05 【Sass语法介绍-插值】</title>
    <link href="http://example.com/2023/02/02/d40a67d9f9f841059a8a689603793673/"/>
    <id>http://example.com/2023/02/02/d40a67d9f9f841059a8a689603793673/</id>
    <published>2023-02-02T05:18:15.742Z</published>
    <updated>2023-02-02T05:23:36.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="05-【Sass语法介绍-插值】"><a href="#05-【Sass语法介绍-插值】" class="headerlink" title="05 【Sass语法介绍-插值】"></a>05 【Sass语法介绍-插值】</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>在很多编程器语言中都有插值这个概念，在 Sass 样式表的任何地方几乎都可以使用插值，你可以将这些包裹在 #{} 中来使用，所以记住在 Sass 中使用插值的方式是 <strong>#{}</strong> ，本节我们一起来看一下插值在 Sass 中的使用场景以及它的语法</p><h2 id="2-什么是插值？"><a href="#2-什么是插值？" class="headerlink" title="2.什么是插值？"></a>2.什么是插值？</h2><p>插值也就是可以在<strong>特定的区域</strong>插入一段表达式或者插入一个变量，以此来实现内容动态变换的需求。</p><blockquote><p>类似 es6 中的插值表达，插值几乎可以用在任何地方。</p><p>Sass的插值写法为：<code>#&#123;$variable_name&#125;</code>。</p></blockquote><p>应用于以下的一些场景：</p><ul><li>在选择器中使用</li><li>在属性名中使用</li><li>在属性值中使用</li><li>在注释中使用</li></ul><p>这里我们暂且详细讲解这五种使用场景，在 Sass 指令和在 Sass 函数中也是可以使用的，不过我们会在其对应的章节再去做讲解。下面我们先看下这四种使用场景。</p><h2 id="3-在选择器中使用"><a href="#3-在选择器中使用" class="headerlink" title="3.在选择器中使用"></a>3.在选择器中使用</h2><p>我们一般在写页面的时候会为 DOM 元素定义一些 class 或 id ，当我们为其写样式的时候会用不同的选择器，那么在选择器中我们可以湿用插值来拼接一些类名等等，我们举个例子来看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>: item;</span><br><span class="line"><span class="selector-class">.ul-</span>#&#123;<span class="variable">$name</span>&#125; &#123; <span class="comment">// 使用插值</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="selector-class">.li-</span>#&#123;<span class="variable">$name</span>&#125; &#123; <span class="comment">// 使用插值</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-</span>#&#123;<span class="variable">$name</span>&#125; &#123; <span class="comment">// 使用插值</span></span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  .#&#123;<span class="variable">$name</span>&#125; &#123; <span class="comment">// 使用插值</span></span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面的代码，我制定了一个 DOM 层级结构，这种结构也是很常见的，可能很多子元素的类名我们都带有 item ，那么我们就可以把它提取为一个变量然后通过在选择器中应用插值来拼接，这样就很方便我们维护，我们想改子元素类名的时候就不需要逐一的去更改了。上面这段 Sasd 代码转换为 CSS 如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ul-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ul-item</span> <span class="selector-class">.li-item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-item</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-item</span> <span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-在属性名中使用"><a href="#4-在属性名中使用" class="headerlink" title="4.在属性名中使用"></a>4.在属性名中使用</h2><p>除了在选择器中使用，在 Sass 属性名上也是可以使用插值的，也就是说你在写 CSS 属性名的时候你也是可以使用插值来拼接的，我们举个例子来看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>: color;</span><br><span class="line"><span class="variable">$position</span>: top;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>-#&#123;<span class="variable">$name</span>&#125;: red;</span><br><span class="line">  <span class="attribute">border</span>-#&#123;<span class="variable">$name</span>&#125;: blue;</span><br><span class="line">  <span class="attribute">padding</span>-#&#123;<span class="variable">$position</span>&#125;: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin</span>-#&#123;<span class="variable">$position</span>&#125;: <span class="number">10px</span>;</span><br><span class="line">  #&#123;<span class="variable">$position</span>&#125;: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面的代码中我对 CSS 的属性名使用了插值，可以用这种方式来拼接属性名，不过在实际项目中不是很常用，一般都是在指令里这么运用，就像在前面语法示例中举的例子一样。上面这段代码转换成 CSS 为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-在属性值中使用"><a href="#5-在属性值中使用" class="headerlink" title="5.在属性值中使用"></a>5.在属性值中使用</h2><p>在属性值中使用插值应该算是比较常用的，插值使你在属性值中不仅可以插入值，还可以插入表达式来计算。除此之外我们在前面的运算章节中，不知道你是否还记得，我们对两个变量使用 &#x2F; 标识符的时候，如果你不想对这两个变量进行除法运算而是进行分隔，那么就可以<strong>使用插值避免运算</strong>。</p><p>可以说插值在属性值中的应用很广泛也很实用，我们来举例看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$one</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="variable">$two</span>: <span class="number">2</span>;</span><br><span class="line"><span class="variable">$family</span>: <span class="string">&quot;UaTy&quot;</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="variable">$one</span> / <span class="variable">$two</span>; <span class="comment">// 除法运算</span></span><br><span class="line">  <span class="attribute">margin</span>: #&#123;<span class="variable">$one</span>&#125; / #&#123;<span class="variable">$two</span>&#125;; <span class="comment">// 分隔</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;MyFo #&#123;$family&#125;&quot;</span>; <span class="comment">// 带引号的字符串会转换为不带引号</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="variable">$one</span> * <span class="number">2</span> *<span class="variable">$two</span>); <span class="comment">// calc函数中内容会被当作字符串处理</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - #&#123;<span class="variable">$one</span> * <span class="number">2</span> *<span class="variable">$two</span>&#125;); <span class="comment">// calc函数中插值的内容会进行运算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中我对每一行都进行了标注，你要仔细看下，在属性值中你可以用这些方式来使用插值，上面的代码将会被转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>/<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;MyFo UaTy&quot;</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">http://xxx.xxx.xxx/a.jpg</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - $one * <span class="number">2</span> *$two);</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">80px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在属性值中应用插值的场景还蛮多的，你可以这么来使用以提高你的开发效率～</p><h2 id="6-在注释中使用"><a href="#6-在注释中使用" class="headerlink" title="6.在注释中使用"></a>6.在注释中使用</h2><p>在 Sass 中的注释里也是可以使用插值的，而且如果插值中的内容是一段表达式，将会返回表达式的结果，举个例子来看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在注释中使用插值:</span></span><br><span class="line"><span class="comment"> * 2 + 2 = #&#123;2 + 2&#125; */</span></span><br><span class="line"><span class="comment">/* #&#123;9 + 8 * 2&#125; */</span></span><br></pre></td></tr></table></figure><p>我们可以在注释中可以这么使用插值，具体什么时候需要使用看你的需求，你需要知道插值的这种使用方式，上面的代码将会被转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在注释中使用插值:</span></span><br><span class="line"><span class="comment"> * 2 + 2 = 4 */</span></span><br><span class="line"><span class="comment">/* 25 */</span></span><br></pre></td></tr></table></figure><h2 id="7-实战经验"><a href="#7-实战经验" class="headerlink" title="7.实战经验"></a>7.实战经验</h2><p>在我的实际项目中，在函数和指令中使用插值比较多，在后面函数和指令的章节你会看到插值的更多运用，这里我列出在属性值以及选择器中的使用。在我项目中专门维护变量的文件中，定义了如下的几个变量：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$primary-dom-name</span>: <span class="string">&quot;box&quot;</span>; <span class="comment">// 主要父级元素类名</span></span><br><span class="line"><span class="variable">$primary-child-name</span>: <span class="string">&quot;item&quot;</span>; <span class="comment">// 主要子元素类名</span></span><br><span class="line"><span class="variable">$public-top</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="variable">$public-bottom</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="variable">$public-margin</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="variable">$public-padding</span>: <span class="number">14px</span>;</span><br></pre></td></tr></table></figure><p>在我项目中的导航样式中我使用了上面的这些变量，代码如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menu-</span>#&#123;<span class="variable">$primary-dom-name</span>&#125; &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - #&#123;<span class="number">40px</span> - <span class="variable">$public-bottom</span>&#125;);</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#cccccc</span>;</span><br><span class="line">  <span class="attribute">overflow-x</span>:hidden;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">$public-padding</span>;</span><br><span class="line">  <span class="selector-class">.li-</span>#&#123;<span class="variable">$primary-child-name</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="variable">$public-margin</span>;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="selector-class">.txt-</span>#&#123;<span class="variable">$primary-dom-name</span>&#125; &#123;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid <span class="number">#999999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#999999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.logo-</span>#&#123;<span class="variable">$primary-dom-name</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，当有一天我们因为业务或者什么其他的需要，我们需要<strong>更换类名或者调整间距</strong>的时候，我们直接更改变量值就 ok 了，这样维护起来方便的多！不过一般在公司的项目中，这种公共的样式代码维护一般是由架构组或者专门的人来维护的，如果你不负责维护这些，你一定不要轻易去改动这些代码！</p><h2 id="8-小结"><a href="#8-小结" class="headerlink" title="8.小结"></a>8.小结</h2><p>本节内容我们讲解了 Sass 中的插值以及它的使用场景，一般我们会在如下的场景使用：</p><ul><li>在函数和指令中使用</li><li>在选择器中使用</li><li>在属性名中使用</li><li>在属性值中使用</li><li>在注释中使用</li></ul><p>我们通过下图来更深地回忆下本节插值的使用场景：</p><p><img src="https://i0.hdslb.com/bfs/album/d6890af7337563009618bc694bf160e233eb9c7a.png" alt="image-20220823192137071"></p><p>总体来说插值在 Sass 中用的还是比较多的，使用也比较简单不是那么复杂，后面在函数或指令中、在你项目的 Sass 中看见 <strong>#{}</strong> 要知道这是 Sass 的插值！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;05-【Sass语法介绍-插值】&quot;&gt;&lt;a href=&quot;#05-【Sass语法介绍-插值】&quot; class=&quot;headerlink&quot; title=&quot;05 【Sass语法介绍-插值】&quot;&gt;&lt;/a&gt;05 【Sass语法介绍-插值】&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    <category term="css预处理语言" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Sass" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/Sass/"/>
    
    
  </entry>
  
  <entry>
    <title>02 【Sass语法介绍-变量】</title>
    <link href="http://example.com/2023/02/02/cc4f543711a54ccd9a05d4bf128898f5/"/>
    <id>http://example.com/2023/02/02/cc4f543711a54ccd9a05d4bf128898f5/</id>
    <published>2023-02-02T05:18:15.741Z</published>
    <updated>2023-02-02T05:23:35.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="02-【Sass语法介绍-变量】"><a href="#02-【Sass语法介绍-变量】" class="headerlink" title="02 【Sass语法介绍-变量】"></a>02 【Sass语法介绍-变量】</h1><p>sass有两种语法格式Sass(早期的缩进格式：Indented Sass)和SCSS(Sassy CSS)</p><p>目前最常用的是SCSS，任何css文件将后缀改为scss，都可以直接使用<code>Sassy CSS</code>语法编写。</p><p><strong>所有有效的 CSS 也同样都是有效的 SCSS。</strong></p><h1 id="Sass语法介绍-变量"><a href="#Sass语法介绍-变量" class="headerlink" title="Sass语法介绍-变量"></a>Sass语法介绍-变量</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>Sass 为 CSS 引入了变量这一功能，在实际项目中使用最普遍的除了 Sass 嵌套 就是 Sass 变量了，你可以把 CSS 的某个<strong>属性值</strong>定义为变量，然后在项目中任何需要它的地方来使用它。本节主要讲解 Sass 变量的主要语法：变量的声明、引用、作用域等，同时还会讲解在实际项目中一般是如何来维护 Sass 变量的。</p><h2 id="2-什么是-Sass-变量"><a href="#2-什么是-Sass-变量" class="headerlink" title="2.什么是 Sass 变量 ?"></a>2.什么是 Sass 变量 ?</h2><p>Sass 简介中提到 Sass是 CSS的扩展语言，变量是 CSS的扩展功能。<br>举个例子，假如我们项目中很多地方要设置一个字体颜色为红色，那么我们完全可以把这个颜色抽出来作为一个<strong>变量</strong>，然后在需要设置字体颜色的地方引用这个变量。这样有一个好处就是，假如产品大大说要修改所有字体颜色的时候，我们就不需要每处都去修改了，直接更改变量的值就 OK 了，我们用 Sass 代码来直观的感受下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$variable</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$variable</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$variable</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面的代码，我们定义了 $variable 这个变量，然后在多个元素的样式中使用它，那么变量的值都可以是什么呢？这个一定要记住，变量的值可以是：</p><ul><li>字符串</li><li>数字</li><li>颜色值</li><li>布尔值</li><li>列表</li><li>Null 值</li></ul><p>下面我们将详细的讲解 Sass 变量的语法。</p><h2 id="3-使用变量"><a href="#3-使用变量" class="headerlink" title="3.使用变量"></a>3.使用变量</h2><p>sass使用<code>$</code>符号来标识变量。</p><p>变量的作用就是，让你在整个样式表中保存并重用一些信息或数据。</p><p>比如存储颜色(color)、字体集，或任何你想重用的CSS值。</p><h3 id="3-1-变量声明"><a href="#3-1-变量声明" class="headerlink" title="3.1 变量声明"></a>3.1 变量声明</h3><p>和css属性的声明（<code>property declaration</code>）很像！</p><p>如，声明值为 <code>#F90</code> 的变量 <code>$highlight-color</code>，字体集变量：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$highlight-color</span>: <span class="number">#F90</span>;</span><br><span class="line"><span class="variable">$font-stack</span>: Helvetica, sans-serif;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">100%</span> <span class="variable">$font-stack</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$highlight-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">100%</span> Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#F90</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>变量有作用域，当变量定义在css规则块内，则该变量只能在此规则块内使用。</strong></p><h3 id="3-2-变量引用"><a href="#3-2-变量引用" class="headerlink" title="3.2 变量引用"></a>3.2 变量引用</h3><p>凡是css属性的标准值（比如说1px或者bold）可存在的地方，就可以使用变量。</p><p>css生成时，变量会被它们的值所替代。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>:<span class="number">#A34554</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  &amp;-<span class="attribute">left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成css为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#A34554</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明变量时，变量的值也可以引用其他变量，如下 <code>$highlight-border</code> 变量中使用了 <code>$highlight-color</code> 变量：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$highlight-color</span>: <span class="number">#F90</span>;</span><br><span class="line"><span class="variable">$highlight-border</span>: <span class="number">1px</span> solid <span class="variable">$highlight-color</span>;</span><br><span class="line"><span class="selector-class">.selected</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="variable">$highlight-border</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译后</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.selected</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#F90</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-变量名中的中横线-hyphen-和下划线-underscore"><a href="#3-3-变量名中的中横线-hyphen-和下划线-underscore" class="headerlink" title="3.3 变量名中的中横线(hyphen)和下划线(underscore)"></a>3.3 变量名中的中横线(<code>hyphen</code>)和下划线(<code>underscore</code>)</h3><p>sass的变量名可以使用中划线和下划线，用中划线声明的变量可以使用下划线的方式引用，反之亦然。</p><p>也就是，变量名中的中横线和下划线没有区别，两者互通。</p><p>比如下面的示例，中横线的<code>$link-color</code>，可以通过下划线的<code>$link_color</code>引用。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$link-color</span>: blue;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$link_color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译后</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>相对，使用中横线更普遍些！</p></blockquote><h2 id="4-变量的作用域"><a href="#4-变量的作用域" class="headerlink" title="4.变量的作用域"></a>4.变量的作用域</h2><p>从 Sass 3.4.x 版本开始，Sass 中开始有作用域的概念。和 javascript 中的变量类似，Sass 的变量也是有作用域这个概念的，也有全局作用域和局部作用域之分，我们举个例子来看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$main-color</span>: red;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="variable">$main-color</span>: green; <span class="comment">// 局部变量</span></span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">$main-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">$main-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到在第一行代码我们声明了一个全局变量 $main-color ，在 h1 的样式中我们又声明了一个和全局变量同名的 $main-color ，在 h1 样式中声明的这个 $main-color 就是局部变量，在 h1 的样式中会引用局部变量而不是全局变量，最终转换为 CSS 的代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-global-标识符"><a href="#4-1-global-标识符" class="headerlink" title="4.1 !global 标识符"></a>4.1 !global 标识符</h3><p>上面我们讲解了局部变量和全局变量，那么如果我想用局部变量去改变全局变量呢？ Sass 允许使用 <strong>!global</strong> 标识符来设置局部变量为全局，以此来改变局部变量的作用范围，我们还是用上面的代码，来改变局部变量的作用域为全局：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$main-color</span>: red;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="variable">$main-color</span>: green!global;</span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">$main-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">$main-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看下，上面这段转换为 CSS 是这样的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们覆盖掉了全局变量 $main-color 的值 red ，不过请你记住，在大型项目中尽量不要使用这种方式去改变全局变量，这可能会影响到其他页面的样式改变！</p><h3 id="4-2-default标识符"><a href="#4-2-default标识符" class="headerlink" title="4.2 !default标识符"></a>4.2 !default标识符</h3><p>一般来说我们反复的声明一个重名变量，那么最后一个声明的变量值会覆盖上面所有的，比如像下面这样：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$main-color</span>: red;</span><br><span class="line"><span class="variable">$main-color</span>: green;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">$main-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么最后编译的时候会使用最后一次声明的变量值，也就是 green ，我们看下编译后的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就有一个问题，在实际的项目开发中，假如需要你来写一段公共的 Sass 代码给其他开发者使用，那么如果你的代码中声明了 $main-color 这个变量，那么其他开发者在自己页面也声明了 $main-color 这个变量，并且他是在导入你的这段代码之前声明的，那么他的就会被覆盖掉，这是不行的！</p><p>所以这里你需要使用 <strong>!default</strong> 标识符，顾名思义，就是默认值，如果这个变量被声明并赋值了，那么就使用声明的值，否则就使用默认值。我们还是用上面的例子来看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$main-color</span>: red; <span class="comment">// 假如这个是其他开发者自己声明的</span></span><br><span class="line"><span class="variable">$main-color</span>: green!default; <span class="comment">// 假如这个是你的代码片段声明的</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">$main-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在最后编译的时候会使用 red 这个变量值，如果其他开发者没有声明这个变量，就会使用 green 这个变量值，我们来看下编译后的效果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们演示了 !default 标识符的作用，这个在你使用 Sass 开发一个独立的模块的时候，或者使用 Sass 开发一个库来供他人使用的时候，!default 标识符石非常有用的！</p><h2 id="5-实战经验"><a href="#5-实战经验" class="headerlink" title="5.实战经验"></a>5.实战经验</h2><p>上面我们已经讲解了 Sass 变量的语法和使用，那在企业的实际项目中是怎么应用 Sass 变量的呢？这里以一个使用 webpack 搭建的前端项目为例，一般我们都会抽离出 1～n 个文件来专门声明 Sass 变量(抽离出几个文件视项目大小而定)，如下图所示：</p><p><img src="https://i0.hdslb.com/bfs/album/bd416afc39899b1f9c4cee4f63433c1e3fe1ee6d.png" alt="image-20220823183201014"></p><p>如上图所示，我们一般会在 styles 目录下新建一个 variables.scss 文件来管理声明的全局变量，我们接着来看下在这个文件中是怎么写的：</p><p><img src="https://i0.hdslb.com/bfs/album/7dae9a402ae3b6eed35a652b1e68bd04da921fb8.png" alt="image-20220823183220638"></p><p>我们可以看到，在这个文件中不但声明了很多变量，还对其做了注释，这样就很易于后期的管理，尤其是在多人开发的大型项目中，对整个项目的样式提取出一些全局变量是很有必要的！</p><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6.小结"></a>6.小结</h2><p>Sass 变量的使用及语法，主要包括：</p><ul><li>变量的声明</li><li>变量的引用</li><li>变量的作用域</li></ul><p>我们还是通过下图来回忆一下本节的内容：</p><p><img src="https://i0.hdslb.com/bfs/album/1cafa46bfec00abd4c1dfd2d5c86ac8bf960bad8.png" alt="image-20220823183316776"></p><p>在实际的项目中，Sass 变量的使用频率也是非常高的，不亚于 Sass 嵌套，所以一定要好好掌握这一节的内容，变量的应用会让你更加顺手的去管理项目中的样式！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;02-【Sass语法介绍-变量】&quot;&gt;&lt;a href=&quot;#02-【Sass语法介绍-变量】&quot; class=&quot;headerlink&quot; title=&quot;02 【Sass语法介绍-变量】&quot;&gt;&lt;/a&gt;02 【Sass语法介绍-变量】&lt;/h1&gt;&lt;p&gt;sass有两种语法格式Sas</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    <category term="css预处理语言" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Sass" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/Sass/"/>
    
    
  </entry>
  
  <entry>
    <title>07 【Sass语法介绍-控制指令】</title>
    <link href="http://example.com/2023/02/02/720abd9ef54447e6b45f4f690ae7f1b7/"/>
    <id>http://example.com/2023/02/02/720abd9ef54447e6b45f4f690ae7f1b7/</id>
    <published>2023-02-02T05:18:15.740Z</published>
    <updated>2023-02-02T05:23:36.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="07-【Sass语法介绍-控制指令】"><a href="#07-【Sass语法介绍-控制指令】" class="headerlink" title="07 【Sass语法介绍-控制指令】"></a>07 【Sass语法介绍-控制指令】</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>Sass 为我们提供了很多控制指令，使得我们可以更高效的来控制样式的输出，或者在函数中进行逻辑控制。本节内容我们就来讲解什么是 Sass 控制指令？它能用来做什么？它将使你更方便的编写 Sass 。</p><h2 id="2-什么是-Sass-控制指令"><a href="#2-什么是-Sass-控制指令" class="headerlink" title="2.什么是 Sass 控制指令"></a>2.什么是 Sass 控制指令</h2><p>控制指令，故名思义它是通过条件来控制某些逻辑的，提到条件你首先肯定想到了 if ，没错这是 Sass 控制指令的一种，除了这个还有循环，所以 Sass 一共为我们提供了 4 种控制指令，它们分别是：</p><ul><li>@if 指令</li><li>@each 指令</li><li>@for 指令</li><li>@while 指令</li></ul><p>如果你熟悉其他的编程语言或者你熟悉 javascript ，看见上面这四种是不是很熟悉，它们在 Sass 中也是用来做条件判断和循环的，下面我们就看一下它们如何在 Sass 中应用。</p><h2 id="3-if-指令"><a href="#3-if-指令" class="headerlink" title="3.@if 指令"></a>3.@if 指令</h2><h3 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3.1 基本使用"></a>3.1 基本使用</h3><p>@if 指令是在 @if 后跟一个表达式，然后再接 {} ，如果表达式为 true 则执行 {} 里的代码逻辑，写为 @if { … } ，我们来举例看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> avatar(<span class="variable">$size</span>, <span class="variable">$circle</span>: false) &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$circle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$size</span> / <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.square</span> &#123; <span class="keyword">@include</span> avatar(<span class="number">100px</span>, <span class="variable">$circle</span>: true); &#125;</span><br></pre></td></tr></table></figure><p>上面我们在 @mixin 中使用了 @if 指令，<strong>如果 @if 后面的表达式或变量为 true ，它将执行 {} 里的代码</strong>。上面的代码在 .square 的样式中使用了 @mixin ，它将会生成如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.square</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面两段代码的对比中我们看到，我们为 @mixin 传入了 $size 并且 @if 后面的变量为 true，所以它执行了 width: $size &#x2F; 2 生成的 CSS 就是 width: 50px ，在这里你要重点关注 @if 指令的用法，关于 @mixin 在后面的章节我们会详细讲到，这里你可以先认识下就好。</p><h3 id="3-2-else-和-else-if-指令"><a href="#3-2-else-和-else-if-指令" class="headerlink" title="3.2 @else 和 @else if 指令"></a>3.2 @else 和 @else if 指令</h3><p>如果你了解任何的编程语言，那么你一定知道有 if 就会有 else 和 else if ，<strong>如果 @if 后面的表达式为 false ，就会判断 @else if 后面的表达式，如果还是 false 则会继续往后走，如果所有表达式都为 false 则最终会执行 @else 后面的 {} 中的代码逻辑</strong>。</p><p>当然 @else if 和 @else是在你需要多条逻辑判断的时候写的，也可以不写，就像上面的代码一样。说了这么多可能你不是很理解，一码胜千言，我们直接将上面的代码段改造下，实际体会一下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> avatar(<span class="variable">$size</span>, <span class="variable">$circle</span>: <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@if</span> <span class="variable">$circle</span> == <span class="number">1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$size</span> / <span class="number">2</span>;</span><br><span class="line">  &#125; <span class="keyword">@else</span> if <span class="variable">$circle</span> == <span class="number">2</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$size</span> / <span class="number">5</span>;</span><br><span class="line">  &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$size</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.a</span> &#123; <span class="keyword">@include</span> avatar(<span class="number">100px</span>); &#125;</span><br><span class="line"><span class="selector-class">.b</span> &#123; <span class="keyword">@include</span> avatar(<span class="number">100px</span>, <span class="variable">$circle</span>: <span class="number">2</span>); &#125;</span><br><span class="line"><span class="selector-class">.c</span> &#123; <span class="keyword">@include</span> avatar(<span class="number">100px</span>, <span class="variable">$circle</span>: <span class="number">3</span>); &#125;</span><br></pre></td></tr></table></figure><p>上面的代码中我有 3 条判断逻辑对应不同的代码块，然后我在 .a .b .c 中分别调用 @mixin 并传入不同的参数，转换后的 CSS 代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.c</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的讲解可以看到 @if 指令还是非常实用的，在你写函数的时候很多地方会用到，所以这块要好好记住。</p><h2 id="4-each-指令"><a href="#4-each-指令" class="headerlink" title="4.@each 指令"></a>4.@each 指令</h2><p>@each 指令一般用来循环一个列表或 Map ，它的写法是这样的 @each in { … } ，这其中 expression 表达式返回一个列表或者直接就是一个列表，variable 是列表中的每一项，{} 中是每次循环都会执行的代码，我们举例来看下:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$borders</span>: <span class="number">2px</span>, <span class="number">3px</span>, <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$bor</span> in <span class="variable">$borders</span> &#123;</span><br><span class="line">  <span class="selector-class">.border-</span>#&#123;<span class="variable">$bor</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="variable">$bor</span> solid;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中我们通过 @each 循环一个 $borders 列表，来生成不同的 class 的 border 样式，上面这段代码转换为 CSS 如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border-2px</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border-3px</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border-5px</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面的写法是不是很方便，这样就直接生成了不用的类名并且对应不同的样式，在 Sass 编程中 @each 也是很常用的指令，所以这个你是一定要会用的，尤其是在写函数的时候！</p><h2 id="5-for-指令"><a href="#5-for-指令" class="headerlink" title="5.@for 指令"></a>5.@for 指令</h2><p>@for 指令很有意思，它可以<strong>设定一个范围然后在这个范围内循环</strong>，比如说在 1 ～ 5 这个范围内，或者在 3 ~ 6 这个范围内等等。</p><p>它有两种写法 @for from to { … } 或者 @for from through { … }，这两种写法中variable 都是每次循环时候的数值，start 都表示开始的边界，end 都表示结束的边界；</p><p>这两种写法不同的是 <strong>through 包含 start 与 en</strong> ，而 <strong>to 包含 start 但不包含 end</strong>。文字描述难免有些抽象，我们直接举例看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$base-color</span>: <span class="number">#036</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 范围是 1 ~ 3</span></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n + #&#123;$i&#125;) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">lighten</span>(<span class="variable">$base-color</span>, <span class="variable">$i</span> * <span class="number">5%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 范围是 4 ~ 6</span></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">4</span> through <span class="number">6</span> &#123;</span><br><span class="line">  <span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n + #&#123;$i&#125;) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">lighten</span>(<span class="variable">$base-color</span>, <span class="variable">$i</span> * <span class="number">5%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码我们用的是 <strong>through</strong> 写法，分别写了 1 ~ 3 范围的循环和 4 ~ 6范围的循环，也就是说循环体中的代码块会分别被计算 3 次，它最终会转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// <span class="number">1</span> ~ <span class="number">3</span> 范围生成的</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#004080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#004d99</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">3</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0059b3</span>;</span><br><span class="line">&#125;</span><br><span class="line">// <span class="number">4</span> ~ <span class="number">6</span> 范围生成的</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">4</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0066cc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">5</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0073e6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">6</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#0080ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到转换后的 CSS 是不是感觉使用 @for 指令写起来简直飞快，下面我们在使用 <strong>to</strong> 写法来举个例子看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$base-color</span>: <span class="number">#036</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> to <span class="number">3</span> &#123;</span><br><span class="line">  <span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n + #&#123;$i&#125;) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">lighten</span>(<span class="variable">$base-color</span>, <span class="variable">$i</span> * <span class="number">5%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面使用 <strong>to</strong> 写法的代码将会转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#004080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#004d99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，通过上面的代码可以看出使用 to 写法是不包含 end 边界的。从上面我们举的两个例子不难看出，@for 指令可以极大的简化我们编写冗余繁琐的 CSS ，你自己需要多尝试这个指令来实际感受下。</p><h2 id="6-while-指令"><a href="#6-while-指令" class="headerlink" title="6.@while 指令"></a>6.@while 指令</h2><p>@while 指令很像 javascript 中的 while 循环，在 Sass 中 @while 指令的写法是 @while { … } ，当表达式 expression 结果为 true 时就执行 {} 里的代码，直到表达式 expression 结果为 false 。我们举例来看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$num</span>: <span class="number">4</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$num</span> &gt;= <span class="number">1</span> &#123;</span><br><span class="line">  <span class="selector-class">.box-</span>#&#123;<span class="variable">$num</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">100</span> * <span class="variable">$num</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$num</span>: <span class="variable">$num</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码可以看出我设定了一个变量 $num 为 4 ，然后每次循环将这个变量 -1 ，知道 $num &lt; 1 的时候会停止循环，也就是说会循环 4 次，我们看下下面转换为 CSS 的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-4</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-3</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-2</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-1</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@while 指令可以让你很方便的控制循环次数，在实际应用中也是非常有用的！</p><h2 id="7-实战经验"><a href="#7-实战经验" class="headerlink" title="7.实战经验"></a>7.实战经验</h2><p>在实际项目中应用 Sass 控制指令的地方还是蛮多的，这里我说一个在我的项目中的应用。我的项目中有个需求是将视口分为 12 等份，然后根据不同的 class 类名来为其宽度设置不同的百分比，这很像其他 UI 库中的栅格系统，我们是这样在项目中实现的：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">0</span> through <span class="number">12</span> &#123;</span><br><span class="line">  <span class="selector-class">.width-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: (<span class="number">1</span> / <span class="number">12</span> * <span class="variable">$i</span>) * <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这几行代码就实现了我的需求，我需要有 .width-0 到 .width-12 的选择器，同时它们的样式分别是对应的百分比，我直接做了一个从 0 到 12 的循环，然后在其循环体中动态生成 class 和样式，它转换为 CSS 代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.width-0</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8.3333333333%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16.6666666667%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width-4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">33.3333333333%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width-5</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">41.6666666667%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width-6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width-7</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">58.3333333333%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width-8</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">66.6666666667%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width-9</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width-10</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">83.3333333333%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width-11</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">91.6666666667%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.width-12</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面这个示例中是不是可以看出使用控制指令来实现一些需求很方便，这样可以省去你编写大量 CSS 代码的工作，而且计算宽度也仅仅需要设置好公式即可，在我们的项目中有很多类似的用法，至于 @if 指令一般会在函数中做判断来使用。</p><h2 id="8-小结"><a href="#8-小结" class="headerlink" title="8.小结"></a>8.小结</h2><p>本节内容我们讲解了 Sass 控制指令，它是非常常用的，在 Sass 中有四种控制指令，它们分别是：</p><ul><li>@if 指令</li><li>@each 指令</li><li>@for 指令</li><li>@while 指令</li></ul><p>趁热打铁，快来回忆一下这几个指令都是干嘛的：</p><p><img src="https://i0.hdslb.com/bfs/album/ab11f4161886f8473f13b11d13628494a01a6e13.png" alt="image-20220824230811481"></p><p>记住它们并多加练习，控制指令是非常好用的，它可以让你避免编写过多冗余的 CSS 代码，在项目中也很方便维护。控制指令是在 Sass 进阶中必不可少的知识！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;07-【Sass语法介绍-控制指令】&quot;&gt;&lt;a href=&quot;#07-【Sass语法介绍-控制指令】&quot; class=&quot;headerlink&quot; title=&quot;07 【Sass语法介绍-控制指令】&quot;&gt;&lt;/a&gt;07 【Sass语法介绍-控制指令】&lt;/h1&gt;&lt;h2 id=&quot;1</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    <category term="css预处理语言" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Sass" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/Sass/"/>
    
    
  </entry>
  
  <entry>
    <title>03 【Sass语法介绍-嵌套】</title>
    <link href="http://example.com/2023/02/02/b6aa35c8f62d46e499d2847e3b0c0ba0/"/>
    <id>http://example.com/2023/02/02/b6aa35c8f62d46e499d2847e3b0c0ba0/</id>
    <published>2023-02-02T05:18:15.739Z</published>
    <updated>2023-02-02T05:23:36.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="03-【Sass语法介绍-嵌套】"><a href="#03-【Sass语法介绍-嵌套】" class="headerlink" title="03 【Sass语法介绍-嵌套】"></a>03 【Sass语法介绍-嵌套】</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>在企业的实际项目开发中，Sass 的嵌套可以说是非常非常有用的，它可以让你的 CSS 代码易于管理和维护，看起来也比较清晰，这也是 Sass 中很基础的一个知识点，首先掌握这个至关重要！在此章节我们将学习 Sass 嵌套中的嵌套规则、属性嵌套、父选择器和占位符选择器。Sass 嵌套式一个很基础也很简单的语法，关键在于要多多练习使用！</p><h2 id="2-什么是嵌套？"><a href="#2-什么是嵌套？" class="headerlink" title="2.什么是嵌套？"></a>2.什么是嵌套？</h2><p>在一般编写 CSS 的时候呢，我们一遍一遍的编写相同的选择器去处理深层级的样式，而 Sass 给你一种轻松的方式，你可以在一个样式规则中直接编写另一个样式规则，而不是重复相同的选择器，Sass 将自动组合内外部的选择器。</p><p>通俗点说就是：你可以在父选择器的样式中直接编写子元素的样式，同理你可以在一个子元素的样式中再去编写孙元素的样式，可以一层一层的嵌套着去写样式。</p><p>一般来说 Sass 中的嵌套应用于以下几种场景：</p><ul><li>样式的嵌套</li><li>父选择器</li><li>占位符选择器</li><li>属性嵌套</li></ul><h2 id="3-样式的嵌套"><a href="#3-样式的嵌套" class="headerlink" title="3.样式的嵌套"></a>3.样式的嵌套</h2><h3 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3.1 基本使用"></a>3.1 基本使用</h3><p><strong>父选择器里可以嵌套子选择器</strong></p><p>如：有以下标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>     </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以直接这样写：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="selector-tag">ul</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">        <span class="selector-tag">li</span>&#123;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scss嵌套打开(解析)的规则是：<strong>从外层到内层，将嵌套规则块打开，父级的选择器放在子级选择的前面组成一个新的选择器，然后再循环打开内部的嵌套块处理。</strong></p><p>写起来是不是方便很多，但使用嵌套的时候同时需要注意：</p><p>嵌套规则很有用很方便，但是你很难想象它实际会生成多少 CSS 语句，嵌套的越深，那么编译为 CSS 的语句就越多，同时消耗的资源也会越多，所以开发者尽量不要嵌套特别深的层级！</p><h3 id="3-2-嵌套选择器列表-Selector-Lists"><a href="#3-2-嵌套选择器列表-Selector-Lists" class="headerlink" title="3.2 嵌套选择器列表 (Selector Lists)"></a>3.2 嵌套选择器列表 (Selector Lists)</h3><p>css中，使用<code>,</code>分割的群组选择器可以同时应用样式在多个选择器上，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，如果想对一个特定的容器元素内的多个元素，使用群组选择器时，就会有很多重复性工作。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">h1</span>, <span class="selector-class">.container</span> <span class="selector-tag">h2</span>, <span class="selector-class">.container</span> <span class="selector-tag">h3</span> &#123; <span class="attribute">margin-bottom</span>: .<span class="number">8em</span> &#125;</span><br></pre></td></tr></table></figure><p>而，sass的嵌套特性，在解开一个内嵌的群组选择器时，会把每一个内嵌选择器正确的结合起来：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>&#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>:.<span class="number">8em</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sass会组合成 <code>.container h1</code>、 <code>.container h2</code>、<code>.container h3</code> 三者的群组选择器：<code>.container h1, .container h2, .container h3&#123; xxx &#125;</code>。</p><p>同样，群组选择器内的嵌套也会以这种方式解析：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span>, <span class="selector-tag">aside</span> &#123;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;<span class="attribute">color</span>: blue&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nav a, aside a &#123;color: blue&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-嵌套组合符选择器-Selector-Combinators"><a href="#3-3-嵌套组合符选择器-Selector-Combinators" class="headerlink" title="3.3 嵌套组合符选择器 (Selector Combinators)"></a>3.3 嵌套组合符选择器 (Selector Combinators)</h3><p>这三种选择器必须和其他选择器配合使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 子组合选择器&gt; */</span></span><br><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">section</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 相邻组合选择器+  选择 元素后紧跟的指定元素 */</span></span><br><span class="line"><span class="selector-tag">header</span> + <span class="selector-tag">p</span> &#123; <span class="attribute">font-size</span>: <span class="number">1.1em</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 同层全体组合选择器~，选择所有跟在article后的同层article元素 */</span></span><br><span class="line"><span class="selector-tag">article</span> ~ <span class="selector-tag">article</span> &#123; <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span> &#125;</span><br></pre></td></tr></table></figure><p>在sass中使用时，可以通过嵌套直接生成正确的结果（位于外层选择器的后面，或内层选择器的前面均可！），而不需要使用<code>&amp;</code>。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="comment">/* 放在 里层选择器前边 */</span></span><br><span class="line">  ~ <span class="selector-tag">article</span> &#123; <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span> &#125;</span><br><span class="line">  &gt; <span class="selector-tag">section</span> &#123; <span class="attribute">background</span>: <span class="number">#eee</span> &#125;</span><br><span class="line">  <span class="comment">/* 放在 外层选择器后边 */</span></span><br><span class="line">  <span class="selector-tag">dl</span> &gt; &#123;</span><br><span class="line">    <span class="selector-tag">dt</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</span><br><span class="line">    <span class="selector-tag">dd</span> &#123; <span class="attribute">color</span>: <span class="number">#555</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">nav</span> + &amp; &#123; <span class="attribute">margin-top</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解开后的css为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> ~ <span class="selector-tag">article</span> &#123; <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span> &#125;</span><br><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">footer</span> &#123; <span class="attribute">background</span>: <span class="number">#eee</span> &#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">dl</span> &gt; <span class="selector-tag">dt</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">dl</span> &gt; <span class="selector-tag">dd</span> &#123; <span class="attribute">color</span>: <span class="number">#555</span> &#125;</span><br><span class="line"><span class="selector-tag">nav</span> + <span class="selector-tag">article</span> &#123; <span class="attribute">margin-top</span>: <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后一句，<code>nav + &amp;</code> <strong>使用父选择器&amp;后，原本默认的嵌套规则不再适用，而是直接应用 &amp; 组合的结果</strong>。</p></blockquote><h2 id="4-父选择器-Parent-Selector"><a href="#4-父选择器-Parent-Selector" class="headerlink" title="4.父选择器 (Parent Selector)"></a>4.父选择器 (Parent Selector)</h2><h3 id="4-1-基本使用"><a href="#4-1-基本使用" class="headerlink" title="4.1 基本使用"></a>4.1 基本使用</h3><p>父选择器是 Sass 中一种特殊的选择器，用于嵌套选择器中，用来引用外部的选择器；通俗的讲就是，当你使用嵌套的时候，可能你会需要使用到嵌套外层的父选择器，比如为一个元素 <strong>添加伪类</strong> (hover、active、before、after) 的时候，可以用 <strong>&amp;</strong> 代表嵌套规则外层的父选择器，我们举个例子来更直观的感受下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">span</span> &#123;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>:green;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的 Sass 代码中我们编写了几个伪类，在编译的时候 &amp; 将会被替换为嵌套外层的父选择器，有多层嵌套的话将会把父选择器一级一级的传递下去，最终转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">span</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-添加后缀-Adding-Suffixes"><a href="#4-2-添加后缀-Adding-Suffixes" class="headerlink" title="4.2 添加后缀 (Adding Suffixes)"></a>4.2 添加后缀 (Adding Suffixes)</h3><p>可以使用 &amp; 向外部选择器添加后缀，举个例子看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  &amp;-head &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    &amp;-title &#123;</span><br><span class="line">      <span class="attribute">color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;-<span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;-<span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个例子将会转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-head</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-head-title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-footer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-占位符选择器-Placeholder-Selectors"><a href="#5-占位符选择器-Placeholder-Selectors" class="headerlink" title="5.占位符选择器 (Placeholder Selectors)"></a>5.占位符选择器 (Placeholder Selectors)</h2><p>在 Sass 中这是一种特殊的选择器，称为 “占位符”；它以 % 开头，必须通过 @extend 指令调用，如果单独使用的话是不会编译到 CSS 中的，后面会讲到 @extend 指令，这里我们先举个简单的例子感受一下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">%placeholder &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %placeholder;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn2</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %placeholder;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请记住，占位符必须<strong>通过 @extend 指令调用</strong>才会转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn2</span>, <span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn2</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-属性嵌套"><a href="#6-属性嵌套" class="headerlink" title="6.属性嵌套"></a>6.属性嵌套</h2><p>当我们在写 CSS 样式的时候，有些 CSS 属性具有相同的**命名空间 (namespace)**，比如定义字体样式的属性： font-size ; font-weight ; font-family ; 它们具有相同的命名空间 font 。再比如定义边框样式的属性：border-radius ; border-color ; 它们具有相同的命名空间 border 。当然还有很多其他这种的属性，为了方便管理和避免重复输入，Sass 允许将属性嵌套在命名空间中，同时命名空间也可以具有自己的属性值，我们举例看一下：</p><blockquote><p><strong>把属性名从中划线-的地方断开，在该属性后边添加一个冒号:，紧跟一个{ }块，把子属性部分写在这个{ }块中</strong>。这样就可以实现属性的嵌套。</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    radius: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">   family:<span class="string">&#x27;YaHei&#x27;</span>;</span><br><span class="line">   size:<span class="number">18px</span>;</span><br><span class="line">   weight:<span class="number">600</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attribute">margin</span>: auto &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这种写法将会被转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;YaHei&quot;</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-小结"><a href="#7-小结" class="headerlink" title="7.小结"></a>7.小结</h2><p>本节内容我们主要讲了 Sass 中的嵌套规则，Sass 的嵌套是最基本也是最常用的功能，主要包括如下几个重点：</p><ul><li>样式的嵌套<ul><li>基本的样式嵌套</li><li>嵌套选择器列表 (Selector Lists)</li><li>嵌套组合符选择器 (Selector Combinators)</li></ul></li><li>父选择器<ul><li>添加后缀 (Adding Suffixes)</li></ul></li><li>占位符选择器</li><li>属性嵌套</li></ul><p>你来根据下面这张图来复习一下本节的内容：</p><p><img src="https://i0.hdslb.com/bfs/album/55f989eb4bd4508c846a4c1e446c3f8e549631ee.png" alt="image-20220823190110782"></p><p>学会了 Sass 中的嵌套规则，快使用这种方式来改造一下你的 CSS 代码吧～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;03-【Sass语法介绍-嵌套】&quot;&gt;&lt;a href=&quot;#03-【Sass语法介绍-嵌套】&quot; class=&quot;headerlink&quot; title=&quot;03 【Sass语法介绍-嵌套】&quot;&gt;&lt;/a&gt;03 【Sass语法介绍-嵌套】&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    <category term="css预处理语言" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Sass" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/Sass/"/>
    
    
  </entry>
  
  <entry>
    <title>10 【Sass语法介绍-继承】</title>
    <link href="http://example.com/2023/02/02/4ff4b2c9dbf641d08213e2278205e32a/"/>
    <id>http://example.com/2023/02/02/4ff4b2c9dbf641d08213e2278205e32a/</id>
    <published>2023-02-02T05:18:15.738Z</published>
    <updated>2023-02-02T05:23:36.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-【Sass语法介绍-继承】"><a href="#10-【Sass语法介绍-继承】" class="headerlink" title="10 【Sass语法介绍-继承】"></a>10 【Sass语法介绍-继承】</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>在我们编写样式的时候，很多情况下我们几个不同的类会有相同的样式代码，同时这几个类又有其自己的样式代码，这使我们就可以通过 Sass 提供的<strong>继承</strong> @extend 来实现。本节内容我们将讲解 Sass 继承的语法以及继承的多重延伸等等，在 Sass 中继承也是非常好用的功能之一，所以你要重点熟悉 @extend 的用法，下面我们一起来学习它。</p><h2 id="2-什么是-Sass-继承"><a href="#2-什么是-Sass-继承" class="headerlink" title="2.什么是 Sass 继承"></a>2.什么是 Sass 继承</h2><p>继承，我们也叫做代码重用，在 Sass 中支持对样式进行继承。</p><p>首先我们看一段代码，看看在 Sass 中的继承是长什么样子的：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .a;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中可以看见，我在 .b 的样式中使用 @extend 继承了 .a 的样式，那么这段代码转换为 CSS 如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>, <span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中我们看到了 Sass 中继承的样子，它的写法是 @extend selector 也就是<strong>在 @extend 后面跟一个选择器</strong>，表示<strong>继承这个选择器的样式</strong>，下面我们详细讲解下它的语法。</p><p>@extend 会包含包含扩展的样式规则，同时在 Sass 中它会<strong>确保复杂的选择器是交错的</strong>，这样无论你的 DOM 元素是如何嵌套的它都能保证正常工作。它还可以<strong>根据实际情况将选择器组合在一起</strong>，可以<strong>更智能的处理选择器以及包含伪类的选择器</strong>。我们举个稍复杂点的例子来看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.link</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    &amp;<span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">i</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .a;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们仔细解读上面的代码，我为 .a 写了一大堆的样式，包括它的子元素以及它的伪类；而 .b 下面有同样的子元素，同样的伪类别，只是宽高不同，那么我直接在 .b 中继承 .a 的样式，它会转换为什么样子的代码呢？它转换为 CSS 的代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span>, <span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.b</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> <span class="selector-class">.link</span>, <span class="selector-class">.b</span> <span class="selector-class">.link</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> <span class="selector-class">.link</span><span class="selector-pseudo">:active</span>, <span class="selector-class">.b</span> <span class="selector-class">.link</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.a</span> <span class="selector-class">.link</span> <span class="selector-tag">i</span>, <span class="selector-class">.b</span> <span class="selector-class">.link</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面转换成 CSS 的代码我们可以看出，引用相同样式的部分都以逗号做了分隔，在 CSS 中使用逗号的含义你应该很了解，继承 @extend 就可以为你自动创建这些组合，提取相同的样式，所以如果有选择器使用了相同的样式，请使用继承的方式来实现！</p><h2 id="3-占位符选择器"><a href="#3-占位符选择器" class="headerlink" title="3.占位符选择器"></a>3.占位符选择器</h2><p>在 Sass 中有一种特殊的选择器叫占位符选择器，它的写法像我们写的 id 或 class 选择器一样，只不过<strong>占位符选择器是以 % 开头的</strong>。在 Sass 中你单独使用这种选择器是不会转换为 CSS 的，只能是<strong>通过 @extend 来使用</strong>。</p><p>比如说有时候你想编写一个可扩展的样式，然后在各处继承它，你就可以使用占位符选择器，我们结合实际的例子来看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">%placeholder &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> <span class="number">#666666</span> solid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123; <span class="attribute">border</span>: <span class="number">2px</span> <span class="number">#999999</span> solid; &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: blue;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %placeholder;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4285f4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> %placeholder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中看到，我通过占位符选择器 %placeholder 定义了一堆样式，然后在其他的样式表中继承它，这个告诉你一个简单的理解方式，占位符选择器你就理解为一个虚拟的选择器，这个名是不会编译到 CSS 中的，最终编译出的选择器名是根据你使用继承的选择器名来定的。上面这段代码会转化为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span>, <span class="selector-class">.buttons</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> <span class="number">#666666</span> solid;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.buttons</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:active</span>, <span class="selector-class">.buttons</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.buttons</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4285f4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中可以看到，编译成 CSS 后 %placeholder 这个选择器不见了，但它的样式被继承了，这就是<strong>占位符选择器结合继承 @extend 的用法</strong>。</p><h2 id="4-在-media-中使用-extend"><a href="#4-在-media-中使用-extend" class="headerlink" title="4.在 @media 中使用 @extend"></a>4.在 @media 中使用 @extend</h2><p>如果你需要在 @media 中使用继承，一定要注意使用方式！如果你<strong>在外部定义样式</strong>，然后<strong>在 @media 内部继承外部的样式</strong>，Sass 是<strong>会报错</strong>的。我们首先举个<strong>错误的例子</strong>看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.btn-error</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面的代码所示，这样的写法在 Sass 中是会报错的，也不会编译成功。 Sass 规定继承只能在给定的媒体上下文中使用，所以<strong>正确的写法</strong>如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.btn-error</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> .error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个正确的写法将会被编译为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.error</span>, <span class="selector-class">.btn-error</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 @media 中使用继承，一定要注意写法！</p></blockquote><h2 id="5-实战经验"><a href="#5-实战经验" class="headerlink" title="5.实战经验"></a>5.实战经验</h2><p>在实际的项目中，继承是非常好用的一个功能，不过这个就需要你自己根据需求来判断是否使用，因地制宜，而且尽量把公共的样式提取到一个单独的文件来维护。</p><p>还有一个需要注意的是除了继承 @mixin 也是可以封装和复用样式的，那么什么时候使用 @mixin 什么时候使用 @extend 呢？假如你需要使用参数来配置样式的时候，也就是<strong>需要传参数</strong>的时候毫无疑问<strong>使用 @mixin</strong> 。但如果你只是需要复用一部分样式那么还是使用继承会更方便些。</p><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6.小结"></a>6.小结</h2><p><img src="https://i0.hdslb.com/bfs/album/cfde0cfe18268eff4c308f08af6ee83d2823bab1.png" alt="image-20220825230233770"></p><p>本节内容我们讲解了 Sass 中的继承 @extend 。我们可以使用继承很方便的<strong>复用样式代码</strong>，同时我们也可以使用<strong>占位选择器</strong>配合 @extend 来扩展和复用样式代码，还有一定要<strong>注意在 @media 中使用继承的方式</strong>。记住 Sass 中的 @extend ，它可以让你的样式代码写起来更高效！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;10-【Sass语法介绍-继承】&quot;&gt;&lt;a href=&quot;#10-【Sass语法介绍-继承】&quot; class=&quot;headerlink&quot; title=&quot;10 【Sass语法介绍-继承】&quot;&gt;&lt;/a&gt;10 【Sass语法介绍-继承】&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    <category term="css预处理语言" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Sass" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/Sass/"/>
    
    
  </entry>
  
  <entry>
    <title>04 【Sass语法介绍-运算】</title>
    <link href="http://example.com/2023/02/02/d1b7676560c64fbb81882453865edebc/"/>
    <id>http://example.com/2023/02/02/d1b7676560c64fbb81882453865edebc/</id>
    <published>2023-02-02T05:18:15.738Z</published>
    <updated>2023-02-02T05:23:36.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="04-【Sass语法介绍-运算】"><a href="#04-【Sass语法介绍-运算】" class="headerlink" title="04 【Sass语法介绍-运算】"></a>04 【Sass语法介绍-运算】</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>运算是一种通过已知量可能的组合，获得新的量的行为。Sass 中也为我们提供了各种各样的运算，以便我们更好的处理样式代码。本节我们将学习 Sass 中的数字运算、关系运算、除法运算、颜色运算、字符串运算等等…</p><h2 id="2-什么是-Sass-运算？"><a href="#2-什么是-Sass-运算？" class="headerlink" title="2.什么是 Sass 运算？"></a>2.什么是 Sass 运算？</h2><p>运算从我们小时候就开始学习了，那在 Sass 中的运算是什么呢？<br>在我们写样式的时候，很多场景我们是需要用到计算的，而一般我们都是通过 javascript 来计算，CSS3 中也提供了用于运算的函数 calc() ，可能在工作中你使用过这个函数用来计算长度值，能用到的地方也非常有限。而在 Sass 中，扩展出了很多计算方法，使得你不止是可以计算长度值，还能做一些关系运算甚至颜色值的运算等等。这使我们可以把运算应用于更多的场景，来解决更复杂的问题，<strong>运算</strong>也是 Sass 的基本特性之一，下面我们一起来学习它～</p><p>这部分我们将详细讲解 Sass 运算中的：</p><ul><li>数字运算</li><li>圆括号</li><li>除法运算</li><li>关系运算</li><li>颜色运算</li><li>字符串运算</li><li>布尔运算</li></ul><h2 id="3-数字运算"><a href="#3-数字运算" class="headerlink" title="3.数字运算"></a>3.数字运算</h2><p>在 Sass 中我们可以对数字类型的值进行加减乘除、取整的运算。在使用运算的过程中，一定要注意<strong>不能使用不兼容的单位！</strong>（在除法运算中除外），什么意思呢？就是说两个数字相加，你不能一个数字单位是 px 另一个数字单位是 em 。还有一点需要注意的是，如果你使用乘法运算，你只需要为其中的一个数值写上单位就好。数值的运算包括加 (+)、减 (-)、乘 (*)、除 (&#x2F;)、取模 (%)，乘法只需要有一个数值带单位即可，还有就是除法稍有特殊，后面会单独讲解，下面我来写一段代码看一下 Sass 的数字运算：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span> + <span class="number">20px</span>; <span class="comment">// 加法运算 (不能使用不兼容的单位)</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span> +<span class="number">50</span>; <span class="comment">// 加法运算无单位的数字可以与有单位的一起使用</span></span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">800px</span> - <span class="number">100px</span>; <span class="comment">// 减法</span></span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">400px</span> * <span class="number">2</span>; <span class="comment">// 乘法，一个数值带单位即可</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span> % <span class="number">4</span>; <span class="comment">// 模运算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码转换成 CSS 为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">550px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">700px</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们对 Sass 数值运算的加减乘和模运算做了演示，在 Sass 的数字运算中还有一个需要特别注意的：<strong>减法运算符两边需要加空格或者都不加空格</strong>，也就是说运算符的两边是<strong>对称</strong>的；为什么要这样呢？因为减法运算符 - 不仅仅表示减法，对于负数或者一元否定则只需要在其前面加空格就好，也就是说这个标识符还可以表示负数和一元否定；我们举个例子来看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span> - <span class="number">5px</span>; <span class="comment">// 前后都有空格</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>-<span class="number">5px</span>; <span class="comment">// 前后都没有空格</span></span><br><span class="line">  <span class="attribute">width</span>:<span class="number">10px</span> -<span class="number">5px</span>; <span class="comment">// 只有前面有空格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段 Sass 代码将会被编译成如下的 CSS :</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span> -<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到上面的代码，如果你只在 - 标识符前面加了空格，其两边不对称是不会对数值进行运算的，所以这个在你写代码的过程中一定要注意！</p><h2 id="4-除法运算"><a href="#4-除法运算" class="headerlink" title="4.除法运算"></a>4.除法运算</h2><p>在讲除法运算之前，一定要先讲一下这个圆括号 () ，圆括号和数学运算中一样，可以来控制运算顺序，这个我们从小就学过，在 Sass 运算中你同样可以使用它来控制运算顺序。</p><p>另外就是如果你直使用除法运算符， Sass 会把这当成一个分隔符来处理，但如果你是写在<strong>圆括号内</strong>就可以被当作除法操作处理了，这也是圆括号在 Sass 中的另外一个作用！</p><p>在 CSS 中，你要知道 <strong>&#x2F; 这个标识符并不是代表除法</strong>的，一些 CSS 的属性值是支持使用 &#x2F; 来分隔的，所以在 Sass 中直接使用 &#x2F; 也是会当成分隔符来处理。但是呢，在以下情况下，Sass 将会把 &#x2F; 视为除法运算：</p><ul><li>运算符前后的值存储在变量中或由函数返回</li><li>运算符和前后的值被圆括号所包裹</li><li>值是另外一个表达式的一部分</li></ul><p>下面我们来举例看一下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$one</span>: <span class="number">20px</span> / <span class="number">2</span>;</span><br><span class="line"><span class="variable">$two</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span> + <span class="number">100px</span> / <span class="number">10</span>; <span class="comment">// 值是另外一个运算表达式的一部分</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$one</span>; <span class="comment">// 前后的值存储在变量中或由函数返回</span></span><br><span class="line">  <span class="attribute">border-width</span>: <span class="variable">$two</span> / <span class="number">5</span>; <span class="comment">// 前后的值存储在变量中或由函数返回</span></span><br><span class="line">  <span class="attribute">height</span>: (<span class="number">800px</span> / <span class="number">2</span>); <span class="comment">// 被圆括号所包裹</span></span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">800px</span> / <span class="number">2</span>; <span class="comment">// 会被当作分隔符来处理，而不是除法运算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段 Sass 代码我对使用 &#x2F; 的情况进行了注释，那么它转换为 CSS 代码是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">210px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">800px</span>/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们看到了 Sass 除法运算的使用，还有一种情况是：假如我在两个变量之间使用 &#x2F; 标识符，而且我又不想对这两个变量进行除法运算，我只是想对这两个变量的值进行分隔而已，那该怎么办呢？那我们需要使用<strong>插值</strong> #{} 来将两个变量包裹住即可，关于插值以后的章节会有讲解，这里我们先看一下如何做：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$one</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="variable">$two</span>: <span class="number">10</span>;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$one</span> / <span class="variable">$two</span>; <span class="comment">// 没有使用插值，会对变量值进行除法运算</span></span><br><span class="line">  <span class="attribute">height</span>: #&#123;<span class="variable">$one</span>&#125; / #&#123;<span class="variable">$two</span>&#125;; <span class="comment">// 使用插值，不会进行除法运算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段使用插值的代码将会转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，除法运算讲完了，通过上面的讲解，是不是感觉 Sass 中的除法运算和你脑海中的还是有差别的，还有一个值得注意的是，如果你使用除法运算前后的值都带有相同的单位，那么最后的结果是一个不带单位的数值。在以后你使用除法运算的时候一定要知道在 Sass 中 <strong>&#x2F; 不仅仅代表除法运算</strong>，你要用正确的方式来使用它！</p><h2 id="5-关系运算"><a href="#5-关系运算" class="headerlink" title="5.关系运算"></a>5.关系运算</h2><p>在 Sass 中关系运算来比较数字与数字间的大小，和数字运算一样，关系运算也是不能使用不兼容的单位。关系运算的返回值是布尔值（ true 或 false ），下面我们举个例子看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span> &gt; <span class="number">5px</span>; <span class="comment">// 大于</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10</span> &lt; <span class="number">5px</span>; <span class="comment">// 小于</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10</span> &gt;= <span class="number">5</span>; <span class="comment">// 大于等于</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5</span> &lt;= <span class="number">5</span>; <span class="comment">// 小于等于</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">5</span> == <span class="number">5</span>; <span class="comment">// 等于</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面这个例子中，width 属性的值是没有布尔类型的，我这里这么举例子是为了让大家可以更直观的感受，一般关系运算不会直接应用于样式表中，在 Sass 的函数中应用的比较多。那么上面这段代码转换成 CSS 如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: true;</span><br><span class="line">  <span class="attribute">width</span>: false;</span><br><span class="line">  <span class="attribute">width</span>: true;</span><br><span class="line">  <span class="attribute">width</span>: true;</span><br><span class="line">  <span class="attribute">width</span>: true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里你应该了解 Sass 中的关系运算了，切记我这里的代码举例只是为了让大家直观的感受，实际情况下并不会这么写。另外在 Sass 中使用相等运算符去做比较的时候，对于数字类型，数字具有相同的值和相同的单位，或者在单位之间转换时它们的值相等，则它们是相等的；对于字符串类型，具有相同内容的未加引号和带引号的字符串被认为是相等的；对于颜色类型，具有相同的红色、绿色、蓝色和alpha值，则颜色是相等的；</p><h2 id="6-颜色运算"><a href="#6-颜色运算" class="headerlink" title="6.颜色运算"></a>6.颜色运算</h2><p>颜色要怎么运算呢？下面我们举个例子看一下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#020304</span> + <span class="number">#050203</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进行颜色值计算的时候是分段计算的，也就是 02 + 05 、03 + 02 、04 + 03，我们知道十六进制颜色值是分为三组的（两个数字一组），分别代表红、绿、蓝，所以在做运算的时候也是按照这个来运算的，那么上面这段代码转换成 CSS 为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#070507</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们讲了颜色运算，但是 Sass 官方给出了明确的说明：<strong>不推荐使用颜色运算，而使用颜色函数</strong>。什么原因呢？因为 Sass 颜色运算所产生出来的色值可能和你感知的并不一致，所以不推荐使用。如果你使用了的话， Sass 也是支持的，但是会给出警告，强烈建议用户避免使用颜色运算！所以我们的教程里只是做了个演示，你可以了解下，但在<strong>实际开发中不推荐使用颜色运算，可以使用颜色函数来实现你的需求！</strong></p><h2 id="7-字符串运算"><a href="#7-字符串运算" class="headerlink" title="7.字符串运算"></a>7.字符串运算</h2><p>在 Sass 中还允许对字符串进行运算，那对于字符串的运算都有哪些呢？我们先文字描述下：</p><ul><li>字符串1 + 字符串2：用于连接字符串，结果会返回包含两个字符串的新字符串，如果这其中一个字符串带引号，那么结果也会带引号，否则就不带引号（带引号的字符串要位于 + 号左侧）；</li><li>字符串1 &#x2F; 字符串2：返回一个字符串，这里包含字符串 1 和 字符串 2 ，会用 &#x2F; 分隔；</li><li>字符串1 - 字符串2：返回一个字符串，这里包含字符串 1 和 字符串 2 ，会用 - 分隔。</li></ul><p>下面我们使用代码来举例看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: r + <span class="string">&#x27;ed&#x27;</span>; <span class="comment">// 带引号的在加号右侧，返回一个不带引号的字符串</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="string">&#x27;r&#x27;</span> + ed; <span class="comment">// 带引号的在加号左侧，返回一个带引号的字符串</span></span><br><span class="line">  <span class="attribute">color</span>:r + ed; <span class="comment">// 返回一个不带引号的字符串</span></span><br><span class="line">  <span class="attribute">color</span>: r/ed; <span class="comment">// 返回一个使用 / 分隔的字符串</span></span><br><span class="line">  <span class="attribute">color</span>: r-ed; <span class="comment">// 返回一个使用 - 分隔的字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码会转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: <span class="string">&quot;red&quot;</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: r/ed;</span><br><span class="line">  <span class="attribute">color</span>: r-ed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样此处举的例子只是为了方便大家感受，实际应用时可能并不会写这么多 color 属性，字符串运算可以让你很方便的拼接一些字符串来使用。</p><h2 id="8-布尔运算"><a href="#8-布尔运算" class="headerlink" title="8.布尔运算"></a>8.布尔运算</h2><p>可能与其他的语言不太相同，Sass 中的布尔运算使用的<strong>不是运算符而是单词</strong>，所以 Sass 中的布尔运算是 not 、and 和 or，not 的意思是取反，and 的意思是两个都为真则返回真反之则返回假，or 的意思是其中一个为真则返回真。看到这你可能懂了，这不就是我们常说的逻辑非、逻辑与和逻辑或嘛，下面我们举个例子来看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="selector-tag">a</span>: true and true;</span><br><span class="line">  <span class="selector-tag">b</span>: true or false; </span><br><span class="line">  c: true and false;</span><br><span class="line">  d: not false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么上面这段代码在 Sass 中会转换为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="selector-tag">a</span>: true;</span><br><span class="line">  <span class="selector-tag">b</span>: true;</span><br><span class="line">  c: false;</span><br><span class="line">  d: true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>布尔运算在实际写样式的时候基本是不会用到的，大家也不会直接在样式中应用，一般布尔运算会应用在 Sass 函数中。</p><h2 id="9-实战经验"><a href="#9-实战经验" class="headerlink" title="9.实战经验"></a>9.实战经验</h2><p>上面讲了这么多，现在该说到实战了。在实际的项目开发中，可能最最常用的就是加减乘除的运算了，有时可能会用到字符串运算。在你写 CSS 的时候，相信你一定知道 rem 布局，这个简直太常用了。我们在做 rem 布局的时候经常会设置一个根元素的字体大小，然后其余所有的像素可能都根据这个去计算，所以为了便于维护，我把这个根元素的大小抽离出来作为一个变量，然后在每个元素的样式中对这个变量进行运算就可以了，同时呢，我们还可以在动画中运用一些运算，我们一起来看下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$root</span>: <span class="number">28</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$root</span>+px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: (<span class="number">460rem</span> / <span class="variable">$root</span>);</span><br><span class="line">  <span class="attribute">height</span>: (<span class="number">320rem</span> / <span class="variable">$root</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> sacle &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: (<span class="number">800px</span> - <span class="variable">$root</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span> - <span class="variable">$root</span> * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: (<span class="number">800px</span> / <span class="variable">$root</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码我们动态的计算了 rem 还有动画中的一些需要的运算。而且这样做的好处是我们可以随时按需更改变量而不需要重新把没处样式都再手动进行更改，这样就让项目的代码更具有扩展性并且更易于维护。它将会被转换为如下的 CSS 代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16.4285714286rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">11.4285714286rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> sacle &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">772px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">744px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">28.5714285714px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我们的项目中，我们会把 $root 这个变量抽出来到专门维护变量的文件中，然后供项目中所有的页面做运算使用。</p><h2 id="10-小结"><a href="#10-小结" class="headerlink" title="10.小结"></a>10.小结</h2><p>本节我们讲解了 Sass 中的运算以及运算的应用，我们回忆一下都有哪些运算：</p><p><img src="https://i0.hdslb.com/bfs/album/2236be21044d373d08033c892a9e88dbe2dbd6ed.png" alt="image-20220823191110579"></p><p>在编写样式的时候加减乘除运算可能会应用的比较多，而字符串运算、布尔值运算、关系运算在 Sass 函数中应用比较多，后面的章节我们会讲解 Sass 函数，而颜色运算官方已经不推荐大家使用了，取而代之的是颜色函数，所以这里我们也尽量不要使用颜色运算了。</p><p>在 CSS 中的某些需要你自己计算的值你可以尝试使用 Sass 运算来提升你的开发效率，而且像一些经常使用到的运算完全可以抽离出来统一维护，这样项目会更加易于维护，管理起来也更清晰！Sass 的运算我个人认为是一个能特别提升开发 CSS 效率的扩展功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;04-【Sass语法介绍-运算】&quot;&gt;&lt;a href=&quot;#04-【Sass语法介绍-运算】&quot; class=&quot;headerlink&quot; title=&quot;04 【Sass语法介绍-运算】&quot;&gt;&lt;/a&gt;04 【Sass语法介绍-运算】&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    <category term="css预处理语言" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Sass" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/CSS/css%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E8%A8%80/Sass/"/>
    
    
  </entry>
  
  <entry>
    <title>01 【认识canvas】</title>
    <link href="http://example.com/2023/02/02/fc62e5cc497a4fc8ae6b4c6a93bf4830/"/>
    <id>http://example.com/2023/02/02/fc62e5cc497a4fc8ae6b4c6a93bf4830/</id>
    <published>2023-02-02T05:18:15.721Z</published>
    <updated>2023-02-02T05:20:49.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01-【认识canvas】"><a href="#01-【认识canvas】" class="headerlink" title="01 【认识canvas】"></a>01 【认识canvas】</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p><code>&lt;canvas&gt;</code>元素用于生成图像。它本身就像一个画布，JavaScript 通过操作它的 API，在上面生成图像。它的底层是一个个像素，基本上<code>&lt;canvas&gt;</code>是一个可以用 JavaScript 操作的位图（bitmap）。</p><p>它与 SVG 图像的区别在于，<code>&lt;canvas&gt;</code>是脚本调用各种方法生成图像，SVG 则是一个 XML 文件，通过各种子元素生成图像。</p><p>使用 Canvas API 之前，需要在网页里面新建一个<code>&lt;canvas&gt;</code>元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span>&gt;</span></span><br><span class="line">  您的浏览器不支持 Canvas</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果浏览器不支持这个 API，就会显示<code>&lt;canvas&gt;</code>标签中间的文字：“您的浏览器不支持 Canvas”。</p><p>每个<code>&lt;canvas&gt;</code>元素都有一个对应的<code>CanvasRenderingContext2D</code>对象（上下文对象）。Canvas API 就定义在这个对象上面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>&lt;canvas&gt;</code>元素节点对象的<code>getContext()</code>方法，返回的就是<code>CanvasRenderingContext2D</code>对象。</p><p>注意，Canvas API 需要<code>getContext</code>方法指定参数<code>2d</code>，表示该<code>&lt;canvas&gt;</code>节点生成 2D 的平面图像。如果参数是<code>webgl</code>，就表示用于生成 3D 的立体图案，这部分属于 WebGL API。</p><p>按照用途，Canvas API 分成两大部分：绘制图形和图像处理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;01-【认识canvas】&quot;&gt;&lt;a href=&quot;#01-【认识canvas】&quot; class=&quot;headerlink&quot; title=&quot;01 【认识canvas】&quot;&gt;&lt;/a&gt;01 【认识canvas】&lt;/h1&gt;&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot;</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Canvas" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/Canvas/"/>
    
    
  </entry>
  
  <entry>
    <title>04 【canvas绘制文字】</title>
    <link href="http://example.com/2023/02/02/48f96f2e7faf49ce94282d5e4da0145e/"/>
    <id>http://example.com/2023/02/02/48f96f2e7faf49ce94282d5e4da0145e/</id>
    <published>2023-02-02T05:18:15.720Z</published>
    <updated>2023-02-02T05:20:49.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="04-【canvas绘制文字】"><a href="#04-【canvas绘制文字】" class="headerlink" title="04 【canvas绘制文字】"></a>04 【canvas绘制文字】</h1><p>以下方法和属性用于绘制文本。</p><ul><li><code>CanvasRenderingContext2D.fillText()</code>：在指定位置绘制实心字符。</li><li><code>CanvasRenderingContext2D.strokeText()</code>：在指定位置绘制空心字符。</li><li><code>CanvasRenderingContext2D.measureText()</code>：返回一个 TextMetrics 对象。</li><li><code>CanvasRenderingContext2D.font</code>：指定字型大小和字体，默认值为<code>10px sans-serif</code>。</li><li><code>CanvasRenderingContext2D.textAlign</code>：文本的对齐方式，默认值为<code>start</code>。</li><li><code>CanvasRenderingContext2D.direction</code>：文本的方向，默认值为<code>inherit</code>。</li><li><code>CanvasRenderingContext2D.textBaseline</code>：文本的垂直位置，默认值为<code>alphabetic</code>。</li></ul><p><code>fillText()</code>方法用来在指定位置绘制实心字符。</p><pre><code>CanvasRenderingContext2D.fillText(text, x, y [, maxWidth])</code></pre><p>该方法接受四个参数。</p><ul><li><code>text</code>：所要填充的字符串。</li><li><code>x</code>：文字起点的横坐标，单位像素。</li><li><code>y</code>：文字起点的纵坐标，单位像素。</li><li><code>maxWidth</code>：文本的最大像素宽度。该参数可选，如果省略，则表示宽度没有限制。如果文本实际长度超过这个参数指定的值，那么浏览器将尝试用较小的字体填充。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;Hello world&#x27;</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/d92318af6e1885ef7f8da3531d85acc9955654c9.png" alt="image-20221228155435605"></p><p>上面代码在<code>(50, 50)</code>位置写入字符串<code>Hello world</code>。</p><p>注意，<code>fillText()</code>方法不支持文本断行，所有文本一定出现在一行内。如果要生成多行文本，只有调用多次<code>fillText()</code>方法。</p><p><code>strokeText()</code>方法用来添加空心字符，它的参数与<code>fillText()</code>一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&#x27;Bold Arial&#x27;</span></span><br><span class="line">ctx.<span class="title function_">strokeText</span>(<span class="string">&#x27;Hello world&#x27;</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p>上面这两种方法绘制的文本，默认都是<code>10px</code>大小、<code>sans-serif</code>字体，<code>font</code>属性可以改变字体设置。该属性的值是一个字符串，使用 CSS 的<code>font</code>属性即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&#x27;Bold 20px Arial&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;Hello world&#x27;</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/f74c05ca48173ac9cd42702d303ae271eeed7dc8.png" alt="image-20221228155524549"></p><p><code>textAlign</code>属性用来指定文本的对齐方式。它可以取以下几个值。</p><ul><li><code>left</code>：左对齐</li><li><code>right</code>：右对齐</li><li><code>center</code>：居中</li><li><code>start</code>：默认值，起点对齐（从左到右的文本为左对齐，从右到左的文本为右对齐）。</li><li><code>end</code>：结尾对齐（从左到右的文本为右对齐，从右到左的文本为左对齐）。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&#x27;Bold 20px Arial&#x27;</span>;</span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&#x27;center&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;Hello world&#x27;</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/e165cae68a59a00378c9f4ec51bf71a21195503c.png" alt="image-20221228155708069"></p><p><code>direction</code>属性指定文本的方向，默认值为<code>inherit</code>，表示继承<code>&lt;canvas&gt;</code>或<code>document</code>的设置。其他值包括<code>ltr</code>（从左到右）和<code>rtl</code>（从右到左）。</p><p><code>textBaseline</code>属性指定文本的垂直位置，可以取以下值。</p><ul><li><code>top</code>：上部对齐（字母的基线是整体上移）。</li><li><code>hanging</code>：悬挂对齐（字母的上沿在一根直线上），适用于印度文和藏文。</li><li><code>middle</code>：中部对齐（字母的中线在一根直线上）。</li><li><code>alphabetic</code>：默认值，表示字母位于字母表的正常位置（四线格的第三根线）。</li><li><code>ideographic</code>：下沿对齐（字母的下沿在一根直线上），使用于东亚文字。</li><li><code>bottom</code>：底部对齐（字母的基线下移）。对于英文字母，这个设置与<code>ideographic</code>没有差异。</li></ul><p><code>measureText()</code>方法接受一个字符串作为参数，返回一个 TextMetrics 对象，可以从这个对象上面获取参数字符串的信息，目前主要是文本渲染后的宽度（<code>width</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text1 = ctx.<span class="title function_">measureText</span>(<span class="string">&#x27;Hello world&#x27;</span>);</span><br><span class="line">text1.<span class="property">width</span> <span class="comment">// 55.14</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&#x27;Bold 20px Arial&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> text2 = ctx.<span class="title function_">measureText</span>(<span class="string">&#x27;Hello world&#x27;</span>);</span><br><span class="line">text2.<span class="property">width</span> <span class="comment">// 107.78</span></span><br></pre></td></tr></table></figure><p>上面代码中，<code>10px</code>大小的字符串<code>Hello world</code>，渲染后宽度为<code>49.46</code>。放大到<code>20px</code>以后，宽度为<code>107.78</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;04-【canvas绘制文字】&quot;&gt;&lt;a href=&quot;#04-【canvas绘制文字】&quot; class=&quot;headerlink&quot; title=&quot;04 【canvas绘制文字】&quot;&gt;&lt;/a&gt;04 【canvas绘制文字】&lt;/h1&gt;&lt;p&gt;以下方法和属性用于绘制文本。&lt;/p&gt;</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Canvas" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/Canvas/"/>
    
    
  </entry>
  
  <entry>
    <title>03 【canvas样式控制】</title>
    <link href="http://example.com/2023/02/02/54f4c804683649cc9eb20b1f7b33d7a4/"/>
    <id>http://example.com/2023/02/02/54f4c804683649cc9eb20b1f7b33d7a4/</id>
    <published>2023-02-02T05:18:15.720Z</published>
    <updated>2023-02-02T05:20:49.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="03-【canvas样式控制】"><a href="#03-【canvas样式控制】" class="headerlink" title="03 【canvas样式控制】"></a>03 【canvas样式控制】</h1><h2 id="1-线性"><a href="#1-线性" class="headerlink" title="1.线性"></a>1.线性</h2><p>以下的方法和属性控制线条的视觉特征。</p><ul><li><code>CanvasRenderingContext2D.lineWidth</code>：指定线条的宽度，默认为1.0。</li><li><code>CanvasRenderingContext2D.lineCap</code>：指定线条末端的样式，有三个可能的值：<code>butt</code>（默认值，末端为矩形）、<code>round</code>（末端为圆形）、<code>square</code>（末端为突出的矩形，矩形宽度不变，高度为线条宽度的一半）。</li><li><code>CanvasRenderingContext2D.lineJoin</code>：指定线段交点的样式，有三个可能的值：<code>round</code>（交点为扇形）、<code>bevel</code>（交点为三角形底边）、<code>miter</code>（默认值，交点为菱形)。</li><li><code>CanvasRenderingContext2D.miterLimit</code>：指定交点菱形的长度，默认为10。该属性只在<code>lineJoin</code>属性的值等于<code>miter</code>时有效。</li><li><code>CanvasRenderingContext2D.getLineDash()</code>：返回一个数组，表示虚线里面线段和间距的长度。</li><li><code>CanvasRenderingContext2D.setLineDash()</code>：数组，用于指定虚线里面线段和间距的长度。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">3</span>;</span><br><span class="line">ctx.<span class="property">lineCap</span> = <span class="string">&#x27;round&#x27;</span>;</span><br><span class="line">ctx.<span class="property">lineJoin</span> = <span class="string">&#x27;round&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">setLineDash</span>([<span class="number">15</span>, <span class="number">5</span>]);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/5e4b689b205057c7862a7669f9ff7fb47cba3fbb.png" alt="image-20221227210236975"></p><p>上面代码中，线条的宽度为3，线条的末端和交点都改成圆角，并且设置为虚线。</p><h2 id="2-渐变色"><a href="#2-渐变色" class="headerlink" title="2.渐变色"></a>2.渐变色</h2><p>以下方法用于设置渐变效果和图像填充效果。</p><ul><li><code>CanvasRenderingContext2D.createLinearGradient()</code>：定义线性渐变样式。</li><li><code>CanvasRenderingContext2D.createRadialGradient()</code>：定义辐射渐变样式。</li><li><code>CanvasRenderingContext2D.createPattern()</code>：定义图像填充样式。</li></ul><p><code>createLinearGradient()</code>方法按照给定直线，生成线性渐变的样式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">createLinearGradient</span>(x0, y0, x1, y1)</span><br></pre></td></tr></table></figure><p><code>ctx.createLinearGradient(x0, y0, x1, y1)</code>方法接受四个参数：<code>x0</code>和<code>y0</code>是起点的横坐标和纵坐标，<code>x1</code>和<code>y1</code>是终点的横坐标和纵坐标。通过不同的坐标值，可以生成从上至下、从左到右的渐变等等。</p><p>该方法的返回值是一个<code>CanvasGradient</code>对象，该对象只有一个<code>addColorStop()</code>方向，用来指定渐变点的颜色。<code>addColorStop()</code>方法接受两个参数，第一个参数是0到1之间的一个位置量，0表示起点，1表示终点，第二个参数是一个字符串，表示 <code>CSS </code>颜色。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gradient = ctx.<span class="title function_">createLinearGradient</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>)</span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">0</span>, <span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">1</span>, <span class="string">&#x27;skyblue&#x27;</span>)</span><br><span class="line">ctx.<span class="property">fillStyle</span> = gradient</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">200</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/7a85732903d6ac4f53974a67a6a31f4cf93eb749.png" alt="image-20221227211353828"></p><p>上面代码中，定义了渐变样式<code>gradient</code>以后，将这个样式指定给<code>fillStyle</code>属性，然后<code>fillRect()</code>就会生成以这个样式填充的矩形区域。</p><p><code>createRadialGradient()</code>方法定义一个辐射渐变，需要指定两个圆。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">createRadialGradient</span>(x0, y0, r0, x1, y1, r1)</span><br></pre></td></tr></table></figure><p><code>createRadialGradient()</code>方法接受六个参数，<code>x0</code>和<code>y0</code>是辐射起始的圆的圆心坐标，<code>r0</code>是起始圆的半径，<code>x1</code>和<code>y1</code>是辐射终止的圆的圆心坐标，<code>r1</code>是终止圆的半径。</p><p>该方法的返回值也是一个<code>CanvasGradient</code>对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gradient = ctx.<span class="title function_">createRadialGradient</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">0</span>, <span class="string">&#x27;white&#x27;</span>);</span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">1</span>, <span class="string">&#x27;green&#x27;</span>);</span><br><span class="line">ctx.<span class="property">fillStyle</span> = gradient;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，生成辐射样式以后，用这个样式填充一个矩形。</p><h2 id="3-图像填充"><a href="#3-图像填充" class="headerlink" title="3.图像填充"></a>3.图像填充</h2><p><code>createPattern()</code>方法定义一个图像填充样式，在指定方向上不断重复该图像，填充指定的区域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">createPattern</span>(image, repetition)</span><br></pre></td></tr></table></figure><p>该方法接受两个参数，第一个参数是图像数据，它可以是<code>&lt;img&gt;</code>元素，也可以是另一个<code>&lt;canvas&gt;</code>元素，或者一个表示图像的 Blob 对象。第二个参数是一个字符串，有四个可能的值，分别是<code>repeat</code>（双向重复）、<code>repeat-x</code>(水平重复)、<code>repeat-y</code>(垂直重复)、<code>no-repeat</code>(不重复)。如果第二个参数是空字符串或<code>null</code>，则等同于<code>null</code>。</p><p>该方法的返回值是一个<code>CanvasPattern</code>对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&#x27;https://example.com/pattern.png&#x27;</span>;</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"> </span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> pattern = ctx.<span class="title function_">createPattern</span>(img, <span class="string">&#x27;repeat&#x27;</span>);</span><br><span class="line">  ctx.<span class="property">fillStyle</span> = pattern;</span><br><span class="line">  ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，图像加载成功以后，使用<code>createPattern()</code>生成图像样式，然后使用这个样式填充指定区域。</p><h2 id="4-阴影"><a href="#4-阴影" class="headerlink" title="4.阴影"></a>4.阴影</h2><p>以下属性用于设置阴影。</p><ul><li><code>CanvasRenderingContext2D.shadowBlur</code>：阴影的模糊程度，默认为<code>0</code>。</li><li><code>CanvasRenderingContext2D.shadowColor</code>：阴影的颜色，默认为<code>black</code>。</li><li><code>CanvasRenderingContext2D.shadowOffsetX</code>：阴影的水平位移，默认为<code>0</code>。</li><li><code>CanvasRenderingContext2D.shadowOffsetY</code>：阴影的垂直位移，默认为<code>0</code>。</li></ul><p>下面是一个例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">shadowOffsetX</span> = <span class="number">10</span>;</span><br><span class="line">ctx.<span class="property">shadowOffsetY</span> = <span class="number">10</span>;</span><br><span class="line">ctx.<span class="property">shadowBlur</span> = <span class="number">5</span>;</span><br><span class="line">ctx.<span class="property">shadowColor</span> = <span class="string">&#x27;rgba(0,0,0,0.5)&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/2c6b0da81372983e58b9f224067cd2ba309e3792.png" alt="image-20221227212053929"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;03-【canvas样式控制】&quot;&gt;&lt;a href=&quot;#03-【canvas样式控制】&quot; class=&quot;headerlink&quot; title=&quot;03 【canvas样式控制】&quot;&gt;&lt;/a&gt;03 【canvas样式控制】&lt;/h1&gt;&lt;h2 id=&quot;1-线性&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Canvas" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/Canvas/"/>
    
    
  </entry>
  
  <entry>
    <title>06 【canvas图像合成】</title>
    <link href="http://example.com/2023/02/02/815ddf95af0048f2ac2ab12ffb2ca36d/"/>
    <id>http://example.com/2023/02/02/815ddf95af0048f2ac2ab12ffb2ca36d/</id>
    <published>2023-02-02T05:18:15.719Z</published>
    <updated>2023-02-02T05:20:49.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="06-【canvas图像合成】"><a href="#06-【canvas图像合成】" class="headerlink" title="06 【canvas图像合成】"></a>06 【canvas图像合成】</h1><p>在默认情况之下，如果在Canvas之中将某个物体（源）绘制在另一个物体（目标）之上，那么浏览器就会简单地把源特体的图像叠放在目标物体图像上面。</p><p>简单点讲，在Canvas中，把图像源和目标图像，通过Canvas中的<code>globalCompositeOperation</code>操作，可以得到不同的效果，比如下图：</p><p><img src="https://i0.hdslb.com/bfs/album/fd3f83bf4a90d6cfedb3aaac93c3a7285895d784.png" alt="image-20221228191528802"></p><p>正如上图，红苹果和黑色的圆，通过<code>globalCompositeOperation</code>的<code>destination-out</code>就变成了被咬了一口的红苹果。也就是说，在Canvas中通过图像的合成，我们可以实现一些与众不同的效果，比如我们要制作一个刮刮卡抽奖的效果。 今天我们就来了解Canvas中的图像合成怎么使用。</p><p>在Canvas中<code>globalCompositeOperation</code>属性的值总共有<strong>26</strong>种类型，每种类型都将前生不一样的效果，当然你可能看到效果都将不样，甚至有一些效果在浏览器中并不能正常的渲染。不过不要紧，我们简单的了解这26种类型其代表的含意以及产生的效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">40</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">ctx.<span class="title function_">fill</span>()</span><br><span class="line">ctx.<span class="title function_">closePath</span>()</span><br></pre></td></tr></table></figure><p>上面的代码将在Canvas画布上绘制一个半径为<code>80px</code>的红色圆形，在这里把它称为图像源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;orange&#x27;</span></span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">120</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">ctx.<span class="title function_">fill</span>()</span><br><span class="line">ctx.<span class="title function_">closePath</span>()</span><br></pre></td></tr></table></figure><p>这段代码将在Canvas画布上绘制一个半径为<code>80px</code>的橙色圆形，在这里把它称为图像目标。在图像源和目标图像之间设置<code>globalCompositeOperation</code>的值，就可以完成图像的合成操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">40</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">ctx.<span class="title function_">fill</span>()</span><br><span class="line">ctx.<span class="title function_">closePath</span>()</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">globalCompositeOperation</span> = <span class="string">&#x27;source-in&#x27;</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;orange&#x27;</span></span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">120</span>, <span class="number">100</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">ctx.<span class="title function_">fill</span>()</span><br><span class="line">ctx.<span class="title function_">closePath</span>()</span><br></pre></td></tr></table></figure><p>此时得到的效果如下：</p><p><img src="https://i0.hdslb.com/bfs/album/6d94e108c2c70a9b99bbf17c1b72f4645b34e498.png" alt="image-20221228193200050"></p><ol><li>source-over</li></ol><p><code>source-over</code>是<code>globalCompositeOperation</code>属性的默认值。源图形覆盖目标图形，源图形不透明的地方显示源图形，其余显示目标图形</p><p><img src="https://i0.hdslb.com/bfs/album/c8e4faee164f776c2b77518e3ff37301e5b4bf64.png" alt="image-20221228193248059"></p><ol start="2"><li>source-in</li></ol><p><code>source-in</code>：目标图形和源图形重叠且都不透明的部分才被绘制</p><p><img src="https://i0.hdslb.com/bfs/album/47ff3f1b1e99a8b50953dac148a4ca332bccb1b3.png" alt="image-20221228193301630"></p><ol start="3"><li>source-out</li></ol><p><code>source-out</code>：目标图形和源图形不重叠的部分会被绘制</p><p><img src="https://i0.hdslb.com/bfs/album/66382da50127d988404df05ac3a02f6c06801835.png" alt="image-20221228193324939"></p><ol start="4"><li>source-atop</li></ol><p><code>source-atop</code>：目标图形和源图形内容重叠的部分的目标图形会被绘制</p><p><img src="https://i0.hdslb.com/bfs/album/f8e24bc8f441fdb8062d78864d19a77250611272.png" alt="image-20221228193349396"></p><ol start="5"><li>destination-over</li></ol><p><code>destination-over</code>：目标图形和源图形内容后面的目标图形会被绘制</p><p><img src="https://i0.hdslb.com/bfs/album/2df58462d4499c88c3d573fcf4cbc095ce7194ea.png" alt="image-20221228194821738"></p><table><thead><tr><th>source-over</th><th>默认。在目标图像上显示源图像。</th></tr></thead><tbody><tr><td>source-atop</td><td>在目标图像顶部显示源图像。源图像位于目标图像之外的部分是不可见的。</td></tr><tr><td>source-in</td><td>在目标图像中显示源图像。只有目标图像内的源图像部分会显示，目标图像是透明的。</td></tr><tr><td>source-out</td><td>在目标图像之外显示源图像。只会显示目标图像之外源图像部分，目标图像是透明的。</td></tr><tr><td>destination-over</td><td>在源图像上方显示目标图像。</td></tr><tr><td>destination-atop</td><td>在源图像顶部显示目标图像。源图像之外的目标图像部分不会被显示。</td></tr><tr><td>destination-in</td><td>在源图像中显示目标图像。只有源图像内的目标图像部分会被显示，源图像是透明的。</td></tr><tr><td>destination-out</td><td>在源图像外显示目标图像。只有源图像外的目标图像部分会被显示，源图像是透明的。</td></tr><tr><td>lighter</td><td>显示源图像 + 目标图像。</td></tr><tr><td>copy</td><td>显示源图像。忽略目标图像。</td></tr><tr><td>xor</td><td>使用异或操作对源图像与目标图像进行组合。</td></tr></tbody></table><p>具体每个值对应的描述，可以<a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation">点击这里查阅</a>。</p><p>具体效果可以看下面的实现效果：</p><p><a href="https://jsrun.net/tw3Kp/edit">https://jsrun.net/tw3Kp/edit</a></p><p>刮刮卡练习:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#card</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#myCanvas</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;card&quot;</span>&gt;</span>谢谢惠顾<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span>&gt;</span> 您的浏览器不支持 Canvas<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">HTMLCanvasElement</span>&#125; */</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> card = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;card&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> isDraw = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>()</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#ccc&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">250</span>)</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">closePath</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">globalCompositeOperation</span> = <span class="string">&#x27;destination-out&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function">() =&gt;</span> (isDraw = <span class="literal">true</span>))</span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="function">() =&gt;</span> (isDraw = <span class="literal">false</span>))</span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!isDraw) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">beginPath</span>()</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">arc</span>(e.<span class="property">pageX</span>, e.<span class="property">pageY</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">fill</span>()</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">closePath</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.1</span>) card.<span class="property">textContent</span> = <span class="string">&#x27;一等奖&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;06-【canvas图像合成】&quot;&gt;&lt;a href=&quot;#06-【canvas图像合成】&quot; class=&quot;headerlink&quot; title=&quot;06 【canvas图像合成】&quot;&gt;&lt;/a&gt;06 【canvas图像合成】&lt;/h1&gt;&lt;p&gt;在默认情况之下，如果在Canvas之</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Canvas" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/Canvas/"/>
    
    
  </entry>
  
  <entry>
    <title>05 【canvas图像变换】</title>
    <link href="http://example.com/2023/02/02/e96f125a9a854c8eb2ce8b05244ba275/"/>
    <id>http://example.com/2023/02/02/e96f125a9a854c8eb2ce8b05244ba275/</id>
    <published>2023-02-02T05:18:15.718Z</published>
    <updated>2023-02-02T05:20:49.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="05-【canvas图像变换】"><a href="#05-【canvas图像变换】" class="headerlink" title="05 【canvas图像变换】"></a>05 【canvas图像变换】</h1><p>以下方法用于图像变换。</p><ul><li><code>CanvasRenderingContext2D.rotate()</code>：图像旋转</li><li><code>CanvasRenderingContext2D.scale()</code>：图像缩放</li><li><code>CanvasRenderingContext2D.translate()</code>：图像平移</li><li><code>CanvasRenderingContext2D.transform()</code>：通过一个变换矩阵完成图像变换</li><li><code>CanvasRenderingContext2D.setTransform()</code>：取消前面的图像变换</li></ul><h2 id="1-rotate"><a href="#1-rotate" class="headerlink" title="1.rotate()"></a>1.rotate()</h2><p><code>CanvasRenderingContext2D.rotate()</code>方法用于图像旋转。它接受一个弧度值作为参数，表示顺时针旋转的度数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">rotate</span>(<span class="number">45</span> * <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">180</span>);</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">70</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/557d88c5087f696881cbb34af25455af5a20f749.png" alt="image-20221228162422216"></p><p>上面代码会显示一个顺时针倾斜45度的矩形。注意，<code>rotate()</code>方法必须在<code>fillRect()</code>方法之前调用，否则是不起作用的。</p><p>旋转中心点始终是画布左上角的原点。如果要更改中心点，需要使用<code>translate()</code>方法移动画布。</p><h2 id="2-scale"><a href="#2-scale" class="headerlink" title="2.scale()"></a>2.scale()</h2><p><code>CanvasRenderingContext2D.scale()</code>方法用于缩放图像。它接受两个参数，分别是<code>x</code>轴方向的缩放因子和<code>y</code>轴方向的缩放因子。默认情况下，一个单位就是一个像素，缩放因子可以缩放单位，比如缩放因子<code>0.5</code>表示将大小缩小为原来的50%，缩放因子<code>10</code>表示放大十倍。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">scale</span>(<span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/e82f3daef1d46790ab2d557977d9a05c9a7fed38.png" alt="image-20221228162708177"></p><p>上面代码中，原来的矩形是 10 x 10，缩放后展示出来是 100 x 30。</p><p>如果缩放因子为1，就表示图像没有任何缩放。如果为-1，则表示方向翻转。<code>ctx.scale(-1, 1)</code>为水平翻转，<code>ctx.scale(1, -1)</code>表示垂直翻转。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">scale</span>(<span class="number">1</span>, -<span class="number">2</span>);</span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;16px serif&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&#x27;Hello world!&#x27;</span>, <span class="number">20</span>, -<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/ca61eb7ef60d689aeb41d99e94599b6cd2cbbb52.png" alt="image-20221228163052256"></p><p>上面代码会显示一个水平倒转的、高度放大2倍的<code>Hello World!</code>。</p><p>注意，负向缩放本质是坐标翻转，所针对的坐标轴就是画布左上角原点的坐标轴。</p><h2 id="3-translate"><a href="#3-translate" class="headerlink" title="3.translate()"></a>3.translate()</h2><p><code>CanvasRenderingContext2D.translate()</code>方法用于平移图像。它接受两个参数，分别是 x 轴和 y 轴移动的距离（单位像素）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">translate</span>(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/453036a7a401c798442e33c8c200b80c2b3fb85e.png" alt="image-20221228163516530"></p><h2 id="4-transform"><a href="#4-transform" class="headerlink" title="4.transform()"></a>4.transform()</h2><p><code>CanvasRenderingContext2D.transform()</code>方法接受一个变换矩阵的六个元素作为参数，完成缩放、旋转、移动和倾斜等变形。</p><p>它的使用格式如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">transform</span>(a, b, c, d, e, f);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a:水平缩放(默认值1，单位倍数)</span></span><br><span class="line"><span class="comment">b:水平倾斜(默认值0，单位弧度)</span></span><br><span class="line"><span class="comment">c:垂直倾斜(默认值0，单位弧度)</span></span><br><span class="line"><span class="comment">d:垂直缩放(默认值1，单位倍数)</span></span><br><span class="line"><span class="comment">e:水平位移(默认值0，单位像素)</span></span><br><span class="line"><span class="comment">f:垂直位移(默认值0，单位像素)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">transform</span>(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，原始图形是 100 x 100 的矩形，结果缩放成 200 x 100 的矩形，并且左上角从<code>(0, 0)</code>移动到<code>(50, 50)</code>。</p><p>注意，多个<code>transform()</code>方法具有叠加效果。</p><h2 id="5-setTransform"><a href="#5-setTransform" class="headerlink" title="5.setTransform()"></a>5.setTransform()</h2><p><code>CanvasRenderingContext2D.setTransform()</code>方法取消前面的图形变换，将画布恢复到该方法指定的状态。该方法的参数与<code>transform()</code>方法完全一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">translate</span>(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">setTransform</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，第一个<code>fillRect()</code>方法绘制的矩形，左上角从<code>(0, 0)</code>平移到<code>(50, 50)</code>。<code>setTransform()</code>方法取消了这个变换（已绘制的图形不受影响），将画布恢复到默认状态（变换矩形<code>1, 0, 0, 1, 0, 0</code>），所以第二个矩形的左上角回到<code>(0, 0)</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;05-【canvas图像变换】&quot;&gt;&lt;a href=&quot;#05-【canvas图像变换】&quot; class=&quot;headerlink&quot; title=&quot;05 【canvas图像变换】&quot;&gt;&lt;/a&gt;05 【canvas图像变换】&lt;/h1&gt;&lt;p&gt;以下方法用于图像变换。&lt;/p&gt;
&lt;u</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Canvas" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/Canvas/"/>
    
    
  </entry>
  
  <entry>
    <title>07 【canvas图像处理】</title>
    <link href="http://example.com/2023/02/02/faa9ad753f834bb181309f4257b09b37/"/>
    <id>http://example.com/2023/02/02/faa9ad753f834bb181309f4257b09b37/</id>
    <published>2023-02-02T05:18:15.717Z</published>
    <updated>2023-02-02T05:20:49.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="07-【canvas图像处理】"><a href="#07-【canvas图像处理】" class="headerlink" title="07 【canvas图像处理】"></a>07 【canvas图像处理】</h1><h2 id="1-绘制图片"><a href="#1-绘制图片" class="headerlink" title="1.绘制图片"></a>1.绘制图片</h2><p>Canvas API 允许将图像文件写入画布，做法是读取图片后，使用<code>drawImage()</code>方法将这张图片放上画布。</p><p><code>CanvasRenderingContext2D.drawImage()</code>有三种使用格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">drawImage</span>(image, dx, dy);</span><br><span class="line">ctx.<span class="title function_">drawImage</span>(image, dx, dy, dWidth, dHeight);</span><br><span class="line">ctx.<span class="title function_">drawImage</span>(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);</span><br></pre></td></tr></table></figure><p>各个参数的含义如下。</p><ul><li>image：图像元素</li><li>sx：图像内部的横坐标，用于映射到画布的放置点上。</li><li>sy：图像内部的纵坐标，用于映射到画布的放置点上。</li><li>sWidth：图像在画布上的宽度，会产生缩放效果。如果未指定，则图像不会缩放，按照实际大小占据画布的宽度。</li><li>sHeight：图像在画布上的高度，会产生缩放效果。如果未指定，则图像不会缩放，按照实际大小占据画布的高度。</li><li>dx：画布内部的横坐标，用于放置图像的左上角</li><li>dy：画布内部的纵坐标，用于放置图像的右上角</li><li>dWidth：图像在画布内部的宽度，会产生缩放效果。</li><li>dHeight：图像在画布内部的高度，会产生缩放效果。</li></ul><p>下面是最简单的使用场景，将图像放在画布上，两者左上角对齐。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&#x27;image.png&#x27;</span>;</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码将一个 PNG 图像放入画布。这时，图像将是原始大小，如果画布小于图像，就会只显示出图像左上角，正好等于画布大小的那一块。</p><p><img src="https://i0.hdslb.com/bfs/album/0f983a145fb173667f276ee2d5a96134aa30e0d6.png" alt="image-20221228202847847"></p><p>如果要显示完整的图片，可以用图像的宽和高，设置成画布的宽和高。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&#x27;./images/girl.webp&#x27;</span></span><br><span class="line"></span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  ctx.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">250</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/f1c65117f6a589b7237bfa8aaa7d88cf2c8c5055.png" alt="image-20221228203055093"></p><h2 id="2-图片裁剪"><a href="#2-图片裁剪" class="headerlink" title="2.图片裁剪"></a>2.图片裁剪</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>, <span class="number">640</span>, <span class="number">0</span>, <span class="number">1280</span>, <span class="number">720</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">250</span>)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\DS\AppData\Roaming\Typora\typora-user-images\image-20221228204259329.png" alt="image-20221228204259329"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;07-【canvas图像处理】&quot;&gt;&lt;a href=&quot;#07-【canvas图像处理】&quot; class=&quot;headerlink&quot; title=&quot;07 【canvas图像处理】&quot;&gt;&lt;/a&gt;07 【canvas图像处理】&lt;/h1&gt;&lt;h2 id=&quot;1-绘制图片&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Canvas" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/Canvas/"/>
    
    
  </entry>
  
  <entry>
    <title>02 【canvas绘制基本图形】</title>
    <link href="http://example.com/2023/02/02/1b03369a713343afa2a193408cc8b22f/"/>
    <id>http://example.com/2023/02/02/1b03369a713343afa2a193408cc8b22f/</id>
    <published>2023-02-02T05:18:15.716Z</published>
    <updated>2023-02-02T05:20:49.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="02-【canvas绘制基本图形】"><a href="#02-【canvas绘制基本图形】" class="headerlink" title="02 【canvas绘制基本图形】"></a>02 【canvas绘制基本图形】</h1><p>Canvas 画布提供了一个作图的平面空间，该空间的每个点都有自己的坐标。原点<code>(0, 0)</code>位于图像左上角，<code>x</code>轴的正向是原点向右，<code>y</code>轴的正向是原点向下。</p><h2 id="1-绘制三角形"><a href="#1-绘制三角形" class="headerlink" title="1.绘制三角形"></a>1.绘制三角形</h2><p>以下方法和属性用来绘制路径。</p><ul><li><code>CanvasRenderingContext2D.beginPath()</code>：开始绘制路径。</li><li><code>CanvasRenderingContext2D.closePath()</code>：结束路径，返回到当前路径的起始点，会从当前点到起始点绘制一条直线。如果图形已经封闭，或者只有一个点，那么此方法不会产生任何效果。</li><li><code>CanvasRenderingContext2D.moveTo()</code>：设置路径的起点，即将一个新路径的起始点移动到<code>(x，y)</code>坐标。</li><li><code>CanvasRenderingContext2D.lineTo()</code>：使用直线从当前点连接到<code>(x, y)</code>坐标。</li><li><code>CanvasRenderingContext2D.fill()</code>：在路径内部填充颜色（默认为黑色）。</li><li><code>CanvasRenderingContext2D.stroke()</code>：路径线条着色（默认为黑色）。</li><li><code>CanvasRenderingContext2D.fillStyle</code>：指定路径填充的颜色和样式（默认为黑色）。</li><li><code>CanvasRenderingContext2D.strokeStyle</code>：指定路径线条的颜色和样式（默认为黑色）。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">HTMLCanvasElement</span>&#125; */</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><p>上面代码只是确定了路径的形状，画布上还看不出来，因为没有颜色。所以还需要着色。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">fill</span>()</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">ctx.<span class="title function_">stroke</span>()</span><br></pre></td></tr></table></figure><p>上面代码中，这两个方法都可以使得路径可见。</p><p><code>fill()</code>在路径内部填充颜色，使之变成一个实心的图形；</p><img src="https://i0.hdslb.com/bfs/album/2b85eafa550940c03b03a0c1ff2fedac2d5fe190.png" alt="image-20221227185426891"  /><p><code>stroke()</code>只对路径线条着色。</p><p><img src="https://i0.hdslb.com/bfs/album/1f38102add1d4e96e769584142358cd40df024f7.png" alt="image-20221227190156581"></p><p>这两个方法默认都是使用黑色，可以使用<code>fillStyle</code>和<code>strokeStyle</code>属性指定其他颜色。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><p>上面代码将填充和线条的颜色指定为红色。</p><p><img src="https://i0.hdslb.com/bfs/album/25df00e5a0f410791154408a1bd4cd8348fa360d.png" alt="image-20221227190233092"></p><h2 id="2-绘制弧线"><a href="#2-绘制弧线" class="headerlink" title="2.绘制弧线"></a>2.绘制弧线</h2><p>以下方法用于绘制弧形。</p><ul><li><code>CanvasRenderingContext2D.arc()</code>：通过指定圆心和半径绘制弧形。</li><li><code>CanvasRenderingContext2D.arcTo()</code>：通过指定两根切线和半径绘制弧形。</li></ul><p><code>CanvasRenderingContext2D.arc()</code>主要用来绘制圆形或扇形。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">ctx.<span class="title function_">arc</span>(x, y, radius, startAngle, endAngle, anticlockwise)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例</span></span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p><code>arc()</code>方法的<code>x</code>和<code>y</code>参数是圆心坐标，<code>radius</code>是半径，<code>startAngle</code>和<code>endAngle</code>则是扇形的起始角度和终止角度（以弧度表示），<code>anticlockwise</code>表示做图时应该逆时针画（<code>true</code>）还是顺时针画（<code>false</code>），这个参数用来控制扇形的方向（比如上半圆还是下半圆）。</p><p><img src="https://i0.hdslb.com/bfs/album/747f68e53ce578c0c9043a939e4daa88be7bb613.png" alt="image-20221227193323852"></p><p>上面代码绘制了一个半径30，起始角度为0，终止角度为 2 * PI 的完整的圆。</p><p>绘制空心半圆的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">100</span>)</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">false</span>)</span><br><span class="line">ctx.<span class="title function_">stroke</span>()</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/d00e1b61af28fecf4a52b27b58a1fb066d2fa8e6.png" alt="image-20221227194258658"></p><p><code>CanvasRenderingContext2D.arcTo()</code>方法主要用来绘制圆弧，需要给出两个点的坐标，当前点与第一个点形成一条直线，第一个点与第二个点形成另一条直线，然后画出与这两根直线相切的弧线。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.<span class="title function_">arcTo</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">25</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><p>上面代码中，<code>arcTo()</code>有5个参数，前两个参数是第一个点的坐标，第三个参数和第四个参数是第二个点的坐标，第五个参数是半径。然后，<code>(0, 0)</code>与<code>(50, 50)</code>形成一条直线，然后<code>(50, 50)</code>与<code>(100, 0)</code>形成第二条直线。弧线就是与这两根直线相切的部分。</p><p>绘制一个笑脸</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">150</span>, <span class="number">140</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">false</span>)</span><br><span class="line">ctx.<span class="title function_">stroke</span>()</span><br><span class="line">ctx.<span class="title function_">closePath</span>()</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">false</span>)</span><br><span class="line">ctx.<span class="title function_">stroke</span>()</span><br><span class="line">ctx.<span class="title function_">closePath</span>()</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">200</span>, <span class="number">100</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">false</span>)</span><br><span class="line">ctx.<span class="title function_">stroke</span>()</span><br><span class="line">ctx.<span class="title function_">closePath</span>()</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">150</span>, <span class="number">140</span>, <span class="number">70</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">false</span>)</span><br><span class="line">ctx.<span class="title function_">stroke</span>()</span><br><span class="line">ctx.<span class="title function_">closePath</span>()</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/5e047282d40998988c9f69d3fab6c0eb9a16f1ce.png" alt="image-20221227202144199"></p><h2 id="3-绘制矩形"><a href="#3-绘制矩形" class="headerlink" title="3.绘制矩形"></a>3.绘制矩形</h2><p>以下方法用来绘制矩形。</p><ul><li><code>CanvasRenderingContext2D.rect()</code>：绘制矩形路径。</li><li><code>CanvasRenderingContext2D.fillRect()</code>：填充一个矩形。</li><li><code>CanvasRenderingContext2D.strokeRect()</code>：绘制矩形边框。</li><li><code>CanvasRenderingContext2D.clearRect()</code>：指定矩形区域的像素都变成透明。</li></ul><p>上面四个方法的格式都一样，都接受四个参数，分别是矩形左上角的横坐标和纵坐标、矩形的宽和高。</p><p><code>CanvasRenderingContext2D.rect()</code>方法用于绘制矩形路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/9c4582aebee82798a4073cbfd385c69c6b431e8c.png" alt="image-20221227202533630"></p><p>上面代码绘制一个正方形，左上角坐标为<code>(10, 10)</code>，宽和高都为100。</p><p><code>CanvasRenderingContext2D.fillRect()</code>用来向一个矩形区域填充颜色。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;#bfa&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/4ea1f25905bb3aadfc42b8aef2567a99dea49f0e.png" alt="image-20221227202811172"></p><p>上面代码绘制一个绿色的正方形，左上角坐标为<code>(10, 10)</code>，宽和高都为100。</p><p><code>CanvasRenderingContext2D.strokeRect()</code>用来绘制一个矩形区域的边框。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>上面代码绘制一个绿色的空心正方形，左上角坐标为<code>(10, 10)</code>，宽和高都为100。</p><p><img src="https://i0.hdslb.com/bfs/album/36bc6b2b09901c19a6af9d687bfc98fe972bb9fd.png" alt="image-20221227202908811"></p><p><code>CanvasRenderingContext2D.clearRect()</code>用于擦除指定矩形区域的像素颜色，等同于把早先的绘制效果都去除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">clearRect</span>(<span class="number">15</span>, <span class="number">15</span>, <span class="number">90</span>, <span class="number">90</span>);</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/3106a07088526540d31c72384aaaf23ed5b4f5cf.png" alt="image-20221227203628451"></p><p>上面代码先绘制一个 100 x 100 的正方形，然后在它的内部擦除 90 x 90 的区域，等同于形成了一个5像素宽度的边框。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;02-【canvas绘制基本图形】&quot;&gt;&lt;a href=&quot;#02-【canvas绘制基本图形】&quot; class=&quot;headerlink&quot; title=&quot;02 【canvas绘制基本图形】&quot;&gt;&lt;/a&gt;02 【canvas绘制基本图形】&lt;/h1&gt;&lt;p&gt;Canvas 画布提</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Canvas" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/Canvas/"/>
    
    
  </entry>
  
  <entry>
    <title>02 【axios fetch 跨域】</title>
    <link href="http://example.com/2023/02/02/a4bdac42f33042a09a9d5ff13bf5effe/"/>
    <id>http://example.com/2023/02/02/a4bdac42f33042a09a9d5ff13bf5effe/</id>
    <published>2023-02-02T05:18:15.714Z</published>
    <updated>2023-02-02T05:31:26.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="02-【axios-fetch-跨域】"><a href="#02-【axios-fetch-跨域】" class="headerlink" title="02 【axios fetch 跨域】"></a>02 【axios fetch 跨域】</h1><h2 id="1-axios"><a href="#1-axios" class="headerlink" title="1.axios"></a>1.axios</h2><h3 id="1-1-axios-是什么"><a href="#1-1-axios-是什么" class="headerlink" title="1.1 axios 是什么?"></a>1.1 axios 是什么?</h3><ol><li>前端最流行的 ajax请求库</li><li>react&#x2F;vue 官方都推荐使用 axios 发ajax 请求</li><li><a href="https://github.com/axios/axios">文档: https://github.com/axios/axios</a></li></ol><h3 id="1-2-axios-特点"><a href="#1-2-axios-特点" class="headerlink" title="1.2 axios 特点"></a>1.2 axios 特点</h3><ol><li>基于 xhr + promise 的异步 ajax请求库</li><li>浏览器端&#x2F;node 端都可以使用</li><li>支持请求／响应拦截器</li><li>支持请求取消</li><li>请求&#x2F;响应数据转换</li><li>批量发送多个请求</li></ol><h3 id="1-3-axios-常用语法"><a href="#1-3-axios-常用语法" class="headerlink" title="1.3 axios 常用语法"></a>1.3 axios 常用语法</h3><p>axios(config): 通用&#x2F;最本质的发任意类型请求的方式<br>axios(url[, config]): 可以只指定url 发get 请求<br>axios.request(config): 等同于axios(config)<br>axios.get(url[, config]): 发get 请求<br>axios.delete(url[, config]): 发delete 请求<br>axios.post(url[, data, config]): 发post 请求<br>axios.put(url[, data, config]): 发put 请求</p><p>axios.defaults.xxx: 请求的默认全局配置（method\baseURL\params\timeout…）<br>axios.interceptors.request.use(): 添加请求拦截器<br>axios.interceptors.response.use(): 添加响应拦截器</p><p>axios.create([config]): 创建一个新的axios(它没有下面的功能)</p><p>axios.Cancel(): 用于创建取消请求的错误对象<br>axios.CancelToken(): 用于创建取消请求的 token 对象<br>axios.isCancel(): 是否是一个取消请求的错误<br>axios.all(promises): 用于批量执行多个异步请求<br>axios.spread(): 用来指定接收所有成功数据的回调函数的方法</p><p><img src="https://i0.hdslb.com/bfs/album/ddc28465dad12c1c979947998de61a0ca9bd3968.png" alt="image-20220625194840070"></p><h3 id="1-4-使用"><a href="#1-4-使用" class="headerlink" title="1.4 使用"></a>1.4 使用</h3><h5 id="配置对象常用的配置项"><a href="#配置对象常用的配置项" class="headerlink" title="配置对象常用的配置项"></a>配置对象常用的配置项</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 路径url</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求方法，默认get</span></span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, </span><br><span class="line"></span><br><span class="line">  <span class="comment">//基础url，最终请求的url是 baseURL+url拼接，所以再全局设置默认，可以使得发送请求时的url变得简洁</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置请求头</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置请求url的query参数，可以使得url简洁。</span></span><br><span class="line">  <span class="comment">//比如url是https://some-domain.com/api/user  然后params如下设置，那么最终的url是：</span></span><br><span class="line">  <span class="comment">//https://some-domain.com/api/user?ID=12345&amp;name=Jack</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">ID</span>: <span class="number">12345</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;Jack&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//设置请求体</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置请求的另外一种格式，不过这个是直接设置字符串的</span></span><br><span class="line">  <span class="attr">data</span>: <span class="string">&#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;</span>,</span><br><span class="line"></span><br><span class="line"> <span class="comment">//请求超时，单位毫秒，默认0，不超时。</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//响应数据类型，默认json</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>, </span><br><span class="line"></span><br><span class="line">  <span class="comment">//响应数据的编码规则，默认utf-8</span></span><br><span class="line">  <span class="attr">responseEncoding</span>: <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//响应体的最大长度 </span></span><br><span class="line">  <span class="attr">maxContentLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求体的最大长度</span></span><br><span class="line">  <span class="attr">maxBodyLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置响应状态码为多少时是成功，调用resolve，否则调用reject失败</span></span><br><span class="line">  <span class="comment">//默认是大于等于200，小于300</span></span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;发送get请求&lt;/button&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>发送post请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;br&gt;&lt;br&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>发送put请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;br&gt;&lt;br&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn4&quot;</span>&gt;</span>发送delete请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>其他发送请求的api:<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;br&gt;&lt;br&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn5&quot;</span>&gt;</span>发送get请求1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span> &lt;br&gt;&lt;br&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn6&quot;</span>&gt;</span>发送post请求1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;br&gt;&lt;br&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn7&quot;</span>&gt;</span>发送put请求1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>&lt;br&gt;&lt;br&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn8&quot;</span>&gt;</span>发送delete请求1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//发送get</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;http://localhost:3000/posts/1&quot;</span></span><br><span class="line">       &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送post</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn2&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;http://localhost:3000/posts&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&quot;axios学习&quot;</span>,</span><br><span class="line">            <span class="attr">author</span>:<span class="string">&quot;Yehaocong&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">       &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//发送put</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn3&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;http://localhost:3000/posts/2&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&quot;axios学习&quot;</span>,</span><br><span class="line">            <span class="attr">author</span>:<span class="string">&quot;Liaoxiaoyan&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">       &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn4&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&quot;DELETE&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;http://localhost:3000/posts/2&quot;</span>,</span><br><span class="line">       &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他发送请求的api</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn5&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//发送get,使用get，第一个参数时url，第二个参数时config配置对象</span></span><br><span class="line">       axios.<span class="title function_">get</span>(<span class="string">&quot;http://localhost:3000/posts/1&quot;</span>)</span><br><span class="line">       .<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送post</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn6&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//发送post请求，第一个参数时url，第二个参数时请求体，第三个参数时config配置对象</span></span><br><span class="line">        axios.<span class="title function_">post</span>(<span class="string">&quot;http://localhost:3000/posts&quot;</span>,</span><br><span class="line">        &#123;<span class="attr">title</span>:<span class="string">&quot;axios学习2&quot;</span>,</span><br><span class="line">            <span class="attr">author</span>:<span class="string">&quot;Yehaocong2&quot;</span>&#125;)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//发送put,</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn7&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//发送put,接收三个参数，url  请求体 、 config配置对象</span></span><br><span class="line">       axios.<span class="title function_">put</span>(<span class="string">&quot;http://localhost:3000/posts/2&quot;</span>,&#123;<span class="attr">title</span>:<span class="string">&quot;axios学习&quot;</span>,</span><br><span class="line">            <span class="attr">author</span>:<span class="string">&quot;Liaoxiaoyan&quot;</span>&#125;)</span><br><span class="line">       .<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn8&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//发送delete请求，接收2个参数， url config配置对象</span></span><br><span class="line">        axios.<span class="title function_">delete</span>(<span class="string">&quot;http://localhost:3000/posts/3&quot;</span>)</span><br><span class="line">       .<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/34b45913177b519321b0d509a3a9c527eb87d4d3.png" alt="image-20220625195401372"></p><h5 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h5><p>可以设置全局默认配置，是为了避免多种重复配置在不同请求中重复，比如baseURL、timeout等，这里设置baseURL。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> axios.<span class="property">defaults</span>.<span class="property">baseURL</span>=<span class="string">&quot;http://localhost:3000&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//因为上面配置了baseURL，所以我们之后的请求只需要配置url不用像之前那样的全路径</span></span><br><span class="line"> axios.<span class="title function_">get</span>(<span class="string">&quot;/posts/1&quot;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-5-创建一个新的axios对象"><a href="#1-5-创建一个新的axios对象" class="headerlink" title="1.5 创建一个新的axios对象"></a>1.5 创建一个新的axios对象</h3><p>根据指定配置创建一个新的 axios, 也就是每个新 axios 都有自己的配置<br>新 axios 只是没有取消请求和批量发请求的方法, 其它所有语法都是一致的<br>为什么要设计这个语法?<br>(1) 需求: 项目中有部分接口需要的配置与另一部分接口需要的配置不太一样, 如何处理（比如有多个baseURL需要指定）<br>(2) 解决: 创建2 个新axios, 每个都有自己特有的配置, 分别应用到不同要求的接口请求中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123; <span class="comment">// instance是函数类型</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用instance发Ajax请求</span></span><br><span class="line"><span class="title function_">instance</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/posts&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">instance.<span class="title function_">get</span>(<span class="string">&#x27;/posts&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-6-拦截器"><a href="#1-6-拦截器" class="headerlink" title="1.6 拦截器"></a>1.6 拦截器</h3><p><strong>请求拦截器</strong>（在发送请求前，使用函数对请求的参数和内容进行处理和检测，若请求有问题可直接进行拦截-&gt;取消，后进先执行&#x3D;则后面的请求拦截器先执行）</p><p><strong>响应拦截器</strong>（对响应的结果预处理，先进先执行&#x3D;前面的响应拦截器先执行）</p><p>1）请求拦截器：</p><p>① 在真正发送请求前执行的回调函数</p><p>② 可以对请求进行检查或配置进行特定处理</p><p>③ 失败的回调函数，传递的默认是error</p><p>④ 成功的回调函数，传递的默认是config（也必须是）</p><p>2）响应拦截器</p><p>① 在请求得到响应后执行的回调函数</p><p>② 可以对响应数据进行特定处理</p><p>③ 成功的回调函数，传递的默认是response</p><p>④ 失败的回调函数，传递的默认是error</p><p>3）请求转换器：对请求头和请求体数据进行特定处理的函数</p><p>响应转换器：将响应体json字符串解析为js对象或数组的函数</p><ol><li>说明: 调用axios()并不是立即发送ajax 请求, 而是需要经历一个较长的流程</li><li>流程: 请求拦截器2 &#x3D;&gt; 请求拦截器1 &#x3D;&gt; 发ajax 请求 &#x3D;&gt; 响应拦截器1 &#x3D;&gt; 响应拦截器2 &#x3D;&gt; 请求的回调</li><li>注意: 此流程是通过 promise 串连起来的, 请求拦截器传递的是config, 响应拦截器传递的是response</li></ol><p><strong>代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">script&gt;</span><br><span class="line">      <span class="comment">//设置一个请求拦截器，在请求拦截器中可以对请求参数进行修改</span></span><br><span class="line">      <span class="comment">//config：配置对象</span></span><br><span class="line">      axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求拦截器 成功 1号&quot;</span>);</span><br><span class="line">          <span class="comment">// config.headers.test = &quot;I am only a header!&quot;;</span></span><br><span class="line">          <span class="comment">//修改 config 中的参数</span></span><br><span class="line">          config.<span class="property">params</span> = &#123; <span class="attr">a</span>: <span class="number">100</span> &#125;;</span><br><span class="line">          <span class="keyword">return</span> config;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求拦截器 失败 1号&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">          config.<span class="property">timeout</span> = <span class="number">5000</span>;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求拦截器 成功 2号&quot;</span>);</span><br><span class="line">          <span class="comment">// config.headers.test = &quot;I am only a header!&quot;;</span></span><br><span class="line">          <span class="comment">//修改 config 中的参数</span></span><br><span class="line">          config.<span class="property">timeout</span> = <span class="number">2000</span>;</span><br><span class="line">          <span class="keyword">return</span> config;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求拦截器 失败 2号&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">//设置一个响应拦截器，可以对响应结果做一些处理</span></span><br><span class="line">      axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应拦截器 成功 1号&quot;</span>);</span><br><span class="line">            <span class="comment">//返回到请求回调时，只要data数据</span></span><br><span class="line">             <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应拦截器 失败 1号&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">//设置一个响应拦截器</span></span><br><span class="line">      axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应拦截器 成功 2号&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> response;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应拦截器 失败 2号&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">//发送请求</span></span><br><span class="line">      <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/posts&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;自定义回调处理成功的结果&quot;</span>);</span><br><span class="line">          <span class="comment">//console.log(response);</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/397433af4df136d75a4f6efdf2be9b9d95f450ab.png" alt="image-20220625200618691"></p><h3 id="1-7-取消请求"><a href="#1-7-取消请求" class="headerlink" title="1.7 取消请求"></a>1.7 取消请求</h3><p><strong>0.22版本之前可以使用,0.22开始被废弃</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span>axios取消请求<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span>&gt;</span>取消请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//获取按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;button&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//2.声明一个全局变量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">let</span> cancel = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//发送请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//检测上一次请求是否已经完成</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (cancel !== <span class="literal">null</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//则代表上一次请求还未取消，故直接取消上一次请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">cancel</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/posts&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//1.添加配置对象的属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">cancelToken</span>: <span class="keyword">new</span> axios.<span class="title class_">CancelToken</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//3.将c的值赋值给cancel</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        cancel = c;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//当请求执行完后 将cancel进行初始化设置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      cancel = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//取消请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">cancel</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>0.22新方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.27.2/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"> <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">      btn[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">axios</span>( &#123;</span><br><span class="line">              <span class="attr">url</span>:<span class="string">&#x27;https://api.uomg.com/api/get.kg?songurl=https://node.kg.qq.com/play?s=YaCv8EYfJunVWYcH&#x27;</span>,</span><br><span class="line">              <span class="attr">signal</span>: controller.<span class="property">signal</span></span><br><span class="line">              &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">              &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      btn[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        controller.<span class="title function_">abort</span>()</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-在vue中封装axios"><a href="#1-8-在vue中封装axios" class="headerlink" title="1.8 在vue中封装axios"></a>1.8 在vue中封装axios</h3><p><code>requests.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于axios进行二次封装</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="comment">//获取仓库:存储数据</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//axios.create方法执行,其实返回一个axios和request一样的</span></span><br><span class="line"><span class="keyword">let</span> requests = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">//基础路径,发请求URL携带api【发现:真实服务器接口都携带/api】</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">  <span class="comment">//超时的设置</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求拦截器:将来项目中【N个请求】，只要发请求,会触发请求拦截器!!!</span></span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//请求拦截器:请求头【header】,请求头能否给服务器携带参数</span></span><br><span class="line">  <span class="comment">//请求拦截器：其实项目中还有一个重要的作用,给服务器携带请求们的公共的参数</span></span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">state</span>.<span class="property">detail</span>.<span class="property">nanoid_token</span>) config.<span class="property">headers</span>.<span class="property">userTempId</span> = store.<span class="property">state</span>.<span class="property">detail</span>.<span class="property">nanoid_token</span>;</span><br><span class="line">  <span class="keyword">if</span> (store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">token</span>) config.<span class="property">headers</span>.<span class="property">token</span> = store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">token</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应拦截器：请求数据返回会执行</span></span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//res:实质就是项目中发请求、服务器返回的数据</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//温馨提示:某一天发请求,请求失败,请求失败的信息打印出来</span></span><br><span class="line">    <span class="title function_">alert</span>(err.<span class="property">message</span>);</span><br><span class="line">    <span class="comment">//终止Promise链</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>();</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后需要暴露:暴露的是添加新的功能的axios,即为requests</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> requests;</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">from</span> <span class="string">&#x27;@/api/requests&#x27;</span>;</span><br><span class="line"><span class="comment">//注册的接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqRegister</span> = data =&gt;</span><br><span class="line">  <span class="title function_">requests</span>(&#123; <span class="attr">url</span>: <span class="string">`/user/passport/register`</span>, <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>, data &#125;);</span><br></pre></td></tr></table></figure><h2 id="2-fetch"><a href="#2-fetch" class="headerlink" title="2.fetch"></a>2.fetch</h2><h3 id="2-1-XMLHttpRequest缺点"><a href="#2-1-XMLHttpRequest缺点" class="headerlink" title="2.1 XMLHttpRequest缺点"></a>2.1 XMLHttpRequest缺点</h3><p>浏览器提供了原生的AJAX实现类XMLHttpRequest，基于该类实例，我们可以实现在网页上发送AJAX请求到服务端。</p><p>但是XMLHttpRequest的设计并不完美，主要体现在以下几个方面：</p><p>HTTP请求，响应都被耦合在XMLHttpRequest实例上，结构不够简单明了<br>采用事件回调的方式获取HTTP响应，可能会产生回调地狱<br>如果HTTP响应数据过大，则会占用大量内存<br>最后一点就是，XMLHttpRequest实现AJAX的步骤太零碎了</p><h3 id="2-2-fetch的优点"><a href="#2-2-fetch的优点" class="headerlink" title="2.2 fetch的优点"></a>2.2 fetch的优点</h3><p>fetch和XMLHttpRequest一样，也是浏览器原生的，用于发送AJAX请求。</p><p><img src="https://i0.hdslb.com/bfs/album/38f9be56559957dd41f78484da8608d627b09af8.png" alt="fetch"></p><p><img src="https://i0.hdslb.com/bfs/album/1258b1db7577409542c0b9794f54c38beb7cf580.png" alt="image-20220624220655195"></p><p>XMLHttpRequest之后诞生的，它旨在解决XMLHttpRequest的不足，所以XMLHttpRequest的缺点就是它的优点，具体优点如下</p><ul><li>语法简单，结构清晰明了</li><li>支持Promise获取异步的HTTP响应</li><li>HTTP响应支持流式获取，内存友好</li></ul><p>fetch被设计为函数，通过fetch函数调用即可发起AJAX，而不需要像XMLHttpRequest那样创建实例，然后基于xhr实例发起AJAX。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/test&#x27;</span>) <span class="comment">// fetch函数调用即发起AJAX</span></span><br></pre></td></tr></table></figure><p>fetch函数返回一个Promise对象，而Promise对象的结果值就是HTTP响应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/test&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123; <span class="comment">// fetch函数返回值是一个Promise类型对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response) <span class="comment">// 该Promise对象的结果值response就是HTTP响应</span></span><br></pre></td></tr></table></figure><p>fetch函数返回的Promise对象的结果值HTTP响应是流式获取，即使HTTP响应数据很大，也不会占用过多的内存。</p><h3 id="2-3-fetch的请求和响应"><a href="#2-3-fetch的请求和响应" class="headerlink" title="2.3 fetch的请求和响应"></a>2.3 fetch的请求和响应</h3><h4 id="2-3-1-Request"><a href="#2-3-1-Request" class="headerlink" title="2.3.1 Request"></a>2.3.1 Request</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url,options).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//处理http响应</span></span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//处理错误</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>url ：是发送网络请求的地址。</p><p>options：发送请求参数,</p><ul><li>body - http请求参数</li><li>mode -  请求的模式<ul><li><code>cors</code>：默认值，允许跨域请求。</li><li><code>same-origin</code>：只允许同源请求。</li><li><code>no-cors</code>：请求方法只限于 GET、POST 和 HEAD，并且只能使用有限的几个简单标头，不能添加跨域的复杂标头，相当于提交表单所能发出的请求。</li></ul></li><li>cache - 用户指定缓存。</li><li>method - 请求方法，默认GET</li><li>signal - 用于取消 fetch</li><li>headers - http请求头设置</li><li>keepalive - 用于页面卸载时，告诉浏览器在后台保持连接，继续发送数据。</li><li>credentials -是否发送 Cookie<ul><li><code>same-origin</code>：默认值，同源请求时发送 Cookie，跨域请求时不发送。</li><li><code>include</code>：不管同源请求，还是跨域请求，一律发送 Cookie。</li><li><code>omit</code>：一律不发送。</li></ul></li><li>referrer- 用于设定<code>fetch()</code>请求的<code>referer</code>标头</li><li>referrerPolicy- 用于设定<code>Referer</code>标头的规则<ul><li>no-referrer-when-downgrade：默认值，总是发送Referer标头，除非从 HTTPS 页面请求 HTTP 资源时不发送。</li><li>no-referrer：不发送Referer标头。</li><li>origin：Referer标头只包含域名，不包含完整的路径。</li><li>origin-when-cross-origin：同源请求Referer标头包含完整的路径，跨域请求只包含域名。</li><li>same-origin：跨域请求不发送Referer，同源请求发送。</li><li>strict-origin：Referer标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送Referer标头。</li><li>strict-origin-when-cross-origin：同源请求时Referer标头包含完整路径，跨域请求时只包含域名，</li><li>HTTPS 页面请求 HTTP 资源时不发送该标头。</li><li>unsafe-url：不管什么情况，总是发送Referer标头。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:3000/test&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;qfc&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i0.hdslb.com/bfs/album/fbd11a8129e218c75e9897080d3e4014f5db996a.png" alt="image-20220624222137163"></p><p>其中需要注意的是Request对象的body属性，该属性值支持</p><ul><li>查询参数字符串，如’name&#x3D;qfc&amp;age&#x3D;18’</li><li>文本字符串，如’{“name”:”qfc”, “age”: 18}’</li><li>FormData对象</li><li>Blob对象</li><li>ReadableStream对象</li><li>BufferSource对象</li></ul><h4 id="2-3-2-Response"><a href="#2-3-2-Response" class="headerlink" title="2.3.2 Response"></a>2.3.2 Response</h4><p>fetch 请求成功后，响应 response 对象如图：</p><p><img src="https://i0.hdslb.com/bfs/album/980304396e4a9765abf9f9831d4ab42a3870973d.png" alt="image-20220624221326446"></p><ul><li><p>status - http状态码，范围在100-599之间</p></li><li><p>statusText - 服务器返回状态文字描述</p></li><li><p>ok - 返回布尔值，如果状态码2开头的，则true,反之false</p></li><li><p>headers - 响应头</p></li><li><p>body - 响应体。响应体内的数据，根据类型各自处理。</p></li><li><p>type - 返回请求类型。</p><ul><li><p>basic: 标准值, 同源响应, 带有所有的头部信息除了“Set-Cookie” 和 “Set-Cookie2″.</p></li><li><p>cors: Response 接收到一个有效的跨域请求.</p></li><li><p>error: 网络错误. 没有有用的描述错误的信息。响应的状态为0，header为空且不可变。从 Response.error()中获得的响应的类型.</p></li><li><p>opaque: 响应 “no-cors” 的跨域请求.</p></li><li><p>redirected - 返回布尔值，表示该 Response 是否来自一个重定向，如果是的话，它的 URL 列表将会有多个条目。</p></li></ul></li><li><p>url:HTTP请求URL</p></li></ul><p>其中，我们需要注意的是body属性值是一个可读流，所以我们无法直接获取body内容，需要从可读流中读取内容，而读取可读流中内容也是一个异步操作，Response贴心的为我们提供了如下实例方法去异步地获取body可读流中的内容</p><ul><li>json()    读取body内容为JSON对象</li><li>text()    读取body内容为普通文本字符串</li><li>formData()    读取body内容为FormData对象</li><li>blob()    读取body内容为Blob对象</li><li>arrayBuffer()    读取body内容为ArrayBuffer对象</li></ul><p>以上方法都返回一个Promise对象，且Promise对象的结果值为它们读取到并转换为对应格式的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1:8000/fetch-server?vip=10&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">//请求方法</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="comment">//请求头</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//请求体</span></span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;username=admin&amp;password=admin&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// return response.text();</span></span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过以上代码测试发现，当response.json()返回的Promise的结果值确实是body实际内容，并且自动被转化为JSON对象。</p><h3 id="2-4-GET和POST"><a href="#2-4-GET和POST" class="headerlink" title="2.4 GET和POST"></a>2.4 GET和POST</h3><h4 id="2-1-1-GET"><a href="#2-1-1-GET" class="headerlink" title="2.1.1 GET"></a>2.1.1 GET</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">`http://localhost:80/fetch.html?user=<span class="subst">$&#123;user.value&#125;</span>&amp;pas=<span class="subst">$&#123;pas.value&#125;</span>`</span>,&#123;</span><br><span class="line"> <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应&#x27;</span>,response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-1-2-POST"><a href="#2-1-2-POST" class="headerlink" title="2.1.2 POST"></a>2.1.2 POST</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">`http://localhost:80/fetch`</span>,&#123;</span><br><span class="line"> <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"> <span class="attr">headers</span>:&#123;</span><br><span class="line">  <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">body</span>:<span class="string">`user=<span class="subst">$&#123;user.value&#125;</span>&amp;pas=<span class="subst">$&#123;pas.value&#125;</span>`</span></span><br><span class="line"> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应&#x27;</span>,response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果是提交json数据时，需要把json转换成字符串。如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">`http://localhost:80/fetch`</span>,&#123;</span><br><span class="line"> <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;qfc&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应&#x27;</span>,response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果提交的是表单数据，使用 formData转化下，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">body</span>:<span class="keyword">new</span> <span class="title class_">FormData</span>(form)</span><br></pre></td></tr></table></figure><p>上传文件，可以包含在整个表单里一起提交，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;file&quot;]&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">data.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, input.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line">data.<span class="title function_">append</span>(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/avatars&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: data</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-5-fetch默认不带cookie"><a href="#2-5-fetch默认不带cookie" class="headerlink" title="2.5 fetch默认不带cookie"></a>2.5 fetch默认不带cookie</h3><p>传递cookie时，必须在<a href="https://so.csdn.net/so/search?q=header&spm=1001.2101.3001.7020">header</a>参数内加上 credentials:’include’，才会像 xhr 将当前cookie 带有请求中。</p><h3 id="2-6-异常处理"><a href="#2-6-异常处理" class="headerlink" title="2.6 异常处理"></a>2.6 异常处理</h3><p>fetch 不同于 xhr ，xhr 自带取消、错误等方法，所以服务器返回 4xx 或 5xx 时，是不会抛出错误的，需要手动处理，通过 response 中的 status 字段来判断。</p><h2 id="6-跨域"><a href="#6-跨域" class="headerlink" title="6.跨域"></a>6.跨域</h2><h3 id="6-1-同源策略"><a href="#6-1-同源策略" class="headerlink" title="6.1 同源策略"></a>6.1 同源策略</h3><ul><li>同源策略(Same-Origin Policy)最早由Netscape 公司提出，是浏览器的一种安全策略</li><li>同源： 协议、域名、端口号必须完全相同</li><li>跨域： 违背同源策略就是<strong>跨域</strong></li></ul><h3 id="6-2-如何解决跨域"><a href="#6-2-如何解决跨域" class="headerlink" title="6.2 如何解决跨域"></a>6.2 如何解决跨域</h3><h4 id="6-2-1-JSONP"><a href="#6-2-1-JSONP" class="headerlink" title="6.2.1 JSONP"></a>6.2.1 JSONP</h4><blockquote><p>jsonp 只支持get请求不支持post请求</p></blockquote><p><strong>1) JSONP 是什么</strong></p><p>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明<br>才智开发出来，只支持get 请求。</p><p><strong>2) JSONP 怎么工作的？</strong></p><p>在网页有一些标签天生具有跨域能力，比如：img link iframe script。<br>JSONP 就是利用script 标签的跨域能力来发送请求的。</p><p><strong>3) JSONP 的使用</strong></p><p><strong>html代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建 script 标签</span></span><br><span class="line"><span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line"><span class="comment">//2. 设置标签的 src 属性</span></span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://127.0.0.1:8000/check-username?callback=abc&#x27;</span>;</span><br><span class="line"><span class="comment">//3. 将script 添加到body 中</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">abc</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(data.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>后端代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/check-username&quot;</span> , <span class="keyword">function</span> (<span class="params">req , res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> callback = req.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;孙悟空&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//将数据转化为字符串</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//返回结果(一段可执行的JavaScript代码)</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">`handle(<span class="subst">$&#123;str&#125;</span>)`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="6-2-2-CORS"><a href="#6-2-2-CORS" class="headerlink" title="6.2.2 CORS"></a>6.2.2 CORS</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p><ol><li><p><strong>CORS 是什么？</strong><br>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方<br>案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持<br>get 和post 请求。跨域资源共享标准新增了一组HTTP 首部字段，允许服务器声明哪些<br>源站通过浏览器有权限访问哪些资源</p></li><li><p><strong>CORS 怎么工作的？</strong><br>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应<br>以后就会对响应放行。</p></li><li><p><strong>CORS 的使用</strong><br>主要是服务器端的设置：</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/testAJAX&quot;</span> , <span class="keyword">function</span> (<span class="params">req , res</span>) &#123;</span><br><span class="line">    <span class="comment">//通过res 来设置响应头，来允许跨域请求</span></span><br><span class="line">    <span class="comment">//res.set(&quot;Access-Control-Allow-Origin&quot;,&quot;http://127.0.0.1:3000&quot;);</span></span><br><span class="line">    res.<span class="title function_">set</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);<span class="comment">//允许所有来源访问</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;testAJAX 返回的响应&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;02-【axios-fetch-跨域】&quot;&gt;&lt;a href=&quot;#02-【axios-fetch-跨域】&quot; class=&quot;headerlink&quot; title=&quot;02 【axios fetch 跨域】&quot;&gt;&lt;/a&gt;02 【axios fetch 跨域】&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Ajax" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/Ajax/"/>
    
    
  </entry>
  
</feed>
